\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Tue Apr 12 14:44:38 CEST 2016
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=6000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:allow , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_OFF
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\javaSource "../src";

\proofObligation "#Proof Obligation Settings
#Tue Apr 12 14:44:38 CEST 2016
name=verif.selectvoting.system.core.MixServer[verif.selectvoting.system.core.MixServer\\:\\:total([B,[B)].JML model_behavior operation contract.0
contract=verif.selectvoting.system.core.MixServer[verif.selectvoting.system.core.MixServer\\:\\:total([B,[B)].JML model_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "mihai" ) (keyVersion "6bc7ade97061383f11985e24decf735b7f2f0af2"))
(keyLog "1" (keyUser "mihai" ) (keyVersion "6bc7ade97061383f11985e24decf735b7f2f0af2"))

(autoModeTime "23369")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "a,b,result,heapAtPre,heapBefore,heapAtPreBefore,o,f,o,f"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "8"))
(rule "notLeft" (formula "7"))
(builtin "One Step Simplification" (formula "9"))
(builtin "Evaluate Query" (formula "6") (term "0") (newnames "a1,a2,callee,queryResult,res_compare"))
(rule "notLeft" (formula "1") (userinteraction))
(rule "variableDeclaration" (formula "7") (term "1") (newnames "queryResult") (userinteraction))
(builtin "Use Operation Contract" (formula "7") (newnames "heapBefore_compare,result_0,exc") (contract "verif.selectvoting.system.core.Utils[verif.selectvoting.system.core.Utils::compare([B,[B)].JML normal_behavior operation contract.0"))
(branch "Post (compare)"
   (builtin "One Step Simplification" (formula "7"))
   (builtin "One Step Simplification" (formula "8"))
   (rule "assignment" (formula "8") (term "1") (userinteraction))
   (rule "methodCallEmpty" (formula "8") (term "1,1") (userinteraction))
   (builtin "One Step Simplification" (formula "8"))
   (rule "emptyModality" (formula "8") (term "1") (userinteraction))
   (builtin "One Step Simplification" (formula "8"))
   (rule "notRight" (formula "8") (userinteraction))
   (rule "andLeft" (formula "8") (userinteraction))
   (rule "andLeft" (formula "9") (userinteraction))
   (rule "applyEq" (formula "9") (term "0,1") (ifseqformula "1") (userinteraction))
   (rule "replaceKnownQuery_verif_selectvoting_system_core_Utils_compare(heap,a,b)__0" (formula "7") (term "0") (userinteraction))
   (rule "cut_direct" (formula "9") (term "1") (userinteraction))
   (branch "CUT: res_compare ≤ 0 TRUE"
      (builtin "One Step Simplification" (formula "10"))
      (rule "eqSymm" (formula "10") (term "1,0,1,1,0,0"))
      (rule "eqSymm" (formula "10") (term "1,0,0,1"))
      (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "12"))
      (builtin "One Step Simplification" (formula "5"))
      (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "11"))
      (builtin "One Step Simplification" (formula "4"))
      (rule "inEqSimp_leqRight" (formula "13"))
      (rule "times_zero_1" (formula "1") (term "1,0,0"))
      (rule "add_zero_right" (formula "1") (term "0,0"))
      (rule "inEqSimp_gtToGeq" (formula "8"))
      (rule "times_zero_1" (formula "8") (term "1,0,0"))
      (rule "add_zero_right" (formula "8") (term "0,0"))
      (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,0,1"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0,0,1"))
      (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,1,1,0,0"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0,1,1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "11") (term "0,1,0,0"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,1,0,0"))
      (rule "polySimp_addComm1" (formula "11") (term "0,0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,1,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "11") (term "1,1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "1"))
      (rule "mul_literals" (formula "1") (term "1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "8"))
      (rule "mul_literals" (formula "8") (term "1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,0"))
      (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,0"))
      (rule "mul_literals" (formula "11") (term "0,1,1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,0,1"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,0,1"))
      (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,0,1"))
      (rule "mul_literals" (formula "11") (term "0,1,1,0,0,0,1"))
      (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,0,1"))
      (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,1,1,0,0"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,1,1,0,0"))
      (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,1,1,0,0"))
      (rule "mul_literals" (formula "11") (term "0,1,1,0,0,1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,1,1,0,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "11") (term "0,0,1,0,0"))
      (rule "polySimp_elimOne" (formula "11") (term "0,0,1,0,0"))
      (rule "inEqSimp_contradInEq0" (formula "8") (ifseqformula "10"))
      (rule "qeq_literals" (formula "8") (term "0"))
      (builtin "One Step Simplification" (formula "8"))
      (rule "closeFalse" (formula "8"))
   )
   (branch "CUT: res_compare ≤ 0 FALSE"
      (builtin "One Step Simplification" (formula "9"))
      (rule "notLeft" (formula "9") (userinteraction))
      (rule "orRight" (formula "9") (userinteraction))
      (builtin "Evaluate Query" (formula "14") (term "0") (newnames "a1_0,a2_0,callee,queryResult_0,res_compare_0"))
      (rule "variableDeclaration" (formula "1") (term "1,0") (newnames "queryResult_0") (userinteraction))
      (rule "notLeft" (formula "1") (userinteraction))
      (builtin "Use Operation Contract" (formula "9") (newnames "heapBefore_compare_0,result_1,exc_0") (contract "verif.selectvoting.system.core.Utils[verif.selectvoting.system.core.Utils::compare([B,[B)].JML normal_behavior operation contract.0"))
      (branch "Post (compare)"
         (rule "assignment" (formula "10") (term "1") (userinteraction))
         (rule "methodCallEmpty" (formula "10") (term "1,1") (userinteraction))
         (builtin "One Step Simplification" (formula "10"))
         (rule "emptyModality" (formula "10") (term "1") (userinteraction))
         (builtin "One Step Simplification" (formula "10"))
         (rule "notRight" (formula "10") (userinteraction))
         (builtin "One Step Simplification" (formula "10"))
         (rule "andLeft" (formula "10") (userinteraction))
         (rule "andLeft" (formula "11") (userinteraction))
         (rule "applyEq" (formula "11") (term "0,1") (ifseqformula "1") (userinteraction))
         (rule "replaceKnownQuery_verif_selectvoting_system_core_Utils_compare(heap,b,a)_10_1" (formula "17") (term "0") (userinteraction))
         (rule "replace_known_right" (formula "11") (term "1") (ifseqformula "17") (userinteraction))
         (builtin "One Step Simplification" (formula "11"))
         (rule "notLeft" (formula "11") (userinteraction))
         (rule "orRight" (formula "11") (userinteraction))
         (builtin "Evaluate Query" (formula "11") (term "1,1,0,0") (newnames "a_0,b_0,callee,queryResult_1,res_min"))
         (rule "notLeft" (formula "1") (userinteraction))
         (rule "variableDeclaration" (formula "11") (term "1") (newnames "queryResult_1") (userinteraction))
         (builtin "Use Operation Contract" (formula "11") (newnames "heapBefore_min,result_2,exc_1") (contract "verif.selectvoting.system.core.Utils[verif.selectvoting.system.core.Utils::min(int,int)].JML normal_behavior operation contract.0"))
         (branch "Post (min)"
            (rule "assignment" (formula "12") (term "1") (userinteraction))
            (rule "methodCallEmpty" (formula "12") (term "1,1") (userinteraction))
            (rule "emptyModality" (formula "12") (term "1,1") (userinteraction))
            (builtin "One Step Simplification" (formula "12"))
            (rule "notRight" (formula "12") (userinteraction))
            (builtin "One Step Simplification" (formula "12"))
            (rule "andLeft" (formula "12"))
            (rule "andLeft" (formula "13"))
            (rule "andLeft" (formula "13"))
            (rule "replaceKnownQuery_verif_selectvoting_system_core_Utils_min(heap,length(b),length(a))_010_2" (formula "15") (term "1,1,0,0") (userinteraction))
            (rule "replaceKnownQuery_verif_selectvoting_system_core_Utils_min(heap,length(b),length(a))_010_2" (formula "16") (term "1,1,0,0,0") (userinteraction))
            (builtin "Evaluate Query" (formula "17") (term "1,1,0,0") (newnames "a_1,b_1,callee,queryResult_2,res_min_0"))
            (rule "notLeft" (formula "1") (userinteraction))
            (rule "variableDeclaration" (formula "15") (term "1") (newnames "queryResult_2") (userinteraction))
            (builtin "Use Operation Contract" (formula "15") (newnames "heapBefore_min_0,result_3,exc_2") (contract "verif.selectvoting.system.core.Utils[verif.selectvoting.system.core.Utils::min(int,int)].JML normal_behavior operation contract.0"))
            (branch "Post (min)"
               (builtin "One Step Simplification" (formula "15"))
               (rule "assignment" (formula "16") (term "1") (userinteraction))
               (rule "methodCallEmpty" (formula "16") (term "1,1") (userinteraction))
               (rule "emptyModality" (formula "16") (term "1,1") (userinteraction))
               (builtin "One Step Simplification" (formula "16"))
               (rule "notRight" (formula "16") (userinteraction))
               (rule "replaceKnownQuery_verif_selectvoting_system_core_Utils_min(heap,length(a),length(b))_0010_3" (formula "20") (term "1,1,0,0,0") (userinteraction))
               (rule "replaceKnownQuery_verif_selectvoting_system_core_Utils_min(heap,length(a),length(b))_0010_3" (formula "19") (term "1,1,0,0") (userinteraction))
               (rule "andLeft" (formula "16"))
               (rule "andLeft" (formula "17"))
               (rule "andLeft" (formula "17"))
               (rule "cut" (inst "cutFormula=res_min = res_min_0") (userinteraction))
               (branch "CUT: res_min = res_min_0 TRUE"
                  (rule "applyEqReverse" (formula "22") (term "1,1,0,0") (ifseqformula "1") (userinteraction))
                  (rule "applyEqReverse" (formula "23") (term "1,1,0,0,0") (ifseqformula "1") (userinteraction))
                  (rule "cut" (inst "cutFormula=  int::select(heap, a, arr(Z(0(#))))
= int::select(heap, b, arr(Z(0(#))))") (userinteraction))
                  (branch "CUT: a[0] = b[0] TRUE"
                     (rule "eqSymm" (formula "22") (term "1,0,0") (userinteraction))
                     (rule "cut_direct" (formula "24") (term "0") (userinteraction))
                     (branch "CUT: ∀ int j; (0 ≤ j ∧ j < res_min → a[j] = b[j]) TRUE"
                        (rule "replace_known_left" (formula "23") (term "0") (ifseqformula "1") (userinteraction))
                        (builtin "One Step Simplification" (formula "25"))
                        (builtin "One Step Simplification" (formula "23"))
                        (rule "eqSymm" (formula "17") (term "1"))
                        (rule "eqSymm" (formula "18") (term "0,1"))
                        (rule "eqSymm" (formula "24") (term "1,0,1,1,0"))
                        (rule "eqSymm" (formula "20") (term "1"))
                        (rule "eqSymm" (formula "21") (term "0,1"))
                        (rule "eqSymm" (formula "21") (term "0,1,1"))
                        (rule "eqSymm" (formula "3"))
                        (rule "eqSymm" (formula "2"))
                        (rule "eqSymm" (formula "1") (term "1,0"))
                        (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "28"))
                        (builtin "One Step Simplification" (formula "11"))
                        (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "27"))
                        (builtin "One Step Simplification" (formula "10"))
                        (rule "replace_known_right" (formula "17") (term "0") (ifseqformula "23"))
                        (builtin "One Step Simplification" (formula "17"))
                        (rule "notLeft" (formula "17"))
                        (rule "replace_known_right" (formula "19") (term "0") (ifseqformula "25"))
                        (builtin "One Step Simplification" (formula "19"))
                        (rule "notLeft" (formula "19"))
                        (rule "inEqSimp_leqRight" (formula "26"))
                        (rule "times_zero_1" (formula "1") (term "1,0,0"))
                        (rule "add_zero_right" (formula "1") (term "0,0"))
                        (rule "inEqSimp_leqRight" (formula "29"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_zero_right" (formula "1") (term "0,0"))
                        (rule "inEqSimp_leqRight" (formula "27"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "inEqSimp_leqRight" (formula "26"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "inEqSimp_gtToGeq" (formula "23") (term "0"))
                        (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0"))
                        (rule "polySimp_addComm1" (formula "23") (term "0,0"))
                        (rule "replace_known_left" (formula "23") (term "0") (ifseqformula "2"))
                        (builtin "One Step Simplification" (formula "23"))
                        (rule "andLeft" (formula "23"))
                        (rule "notLeft" (formula "24"))
                        (rule "replace_known_right" (formula "21") (term "0,1,1") (ifseqformula "24"))
                        (builtin "One Step Simplification" (formula "21"))
                        (rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "27") (term "0,1,0"))
                        (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0,1,0"))
                        (rule "inEqSimp_gtToGeq" (formula "17"))
                        (rule "times_zero_1" (formula "17") (term "1,0,0"))
                        (rule "add_literals" (formula "17") (term "0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0,1,1,0"))
                        (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0,1,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "27") (term "0,1,0"))
                        (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0,1,0"))
                        (rule "polySimp_addComm1" (formula "27") (term "0,0,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0,1,1,0"))
                        (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,0,1,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0,1,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0,1,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0"))
                        (rule "inEqSimp_gtToGeq" (formula "20") (term "0"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0"))
                        (rule "replace_known_left" (formula "20") (term "0") (ifseqformula "1"))
                        (builtin "One Step Simplification" (formula "20"))
                        (rule "applyEq" (formula "2") (term "0,1,0") (ifseqformula "22"))
                        (rule "polySimp_addComm1" (formula "2") (term "0"))
                        (rule "applyEq" (formula "23") (term "0") (ifseqformula "22"))
                        (rule "eqSymm" (formula "23"))
                        (rule "applyEq" (formula "24") (term "0") (ifseqformula "22"))
                        (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "22"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "applyEq" (formula "23") (term "0") (ifseqformula "20"))
                        (rule "eqSymm" (formula "23"))
                        (rule "applyEq" (formula "8") (term "1") (ifseqformula "7"))
                        (rule "applyEq" (formula "23") (term "1") (ifseqformula "9"))
                        (rule "close" (formula "23") (ifseqformula "8"))
                     )
                     (branch "CUT: ∀ int j; (0 ≤ j ∧ j < res_min → a[j] = b[j]) FALSE"
                        (rule "replace_known_right" (formula "22") (term "0") (ifseqformula "24") (userinteraction))
                        (builtin "One Step Simplification" (formula "22"))
                        (builtin "One Step Simplification" (formula "25"))
                        (rule "false_right" (formula "22") (userinteraction))
                        (rule "cut" (inst "cutFormula=\\exists int i;
  (  leq(Z(0(#)), i)
   & lt(i, res_min)
   & !  int::select(heap, a, arr(i))
      = int::select(heap, b, arr(i))
   & \\forall int j;
       (   leq(Z(0(#)), j) & lt(j, i)
        ->   int::select(heap, a, arr(j))
           = int::select(heap, b, arr(j))))") (userinteraction))
                        (branch "CUT: ∃ int i; ( 0 ≤ i ∧ i < res_min ∧ ¬a[i] = b[i] ∧ ∀ int j; (0 ≤ j ∧ j < i → a[j] = b[j])) TRUE"
                           (rule "allRight" (formula "24") (inst "sk=j_126"))
                           (rule "impRight" (formula "24"))
                           (rule "andLeft" (formula "1"))
                           (rule "exLeft" (formula "3") (inst "sk=i_0"))
                           (rule "andLeft" (formula "3"))
                           (rule "andLeft" (formula "3"))
                           (rule "notLeft" (formula "4"))
                           (rule "andLeft" (formula "3"))
                           (rule "eqSymm" (formula "25") (term "0,1"))
                           (rule "eqSymm" (formula "25") (term "0,1,1"))
                           (rule "eqSymm" (formula "24") (term "1"))
                           (rule "eqSymm" (formula "22") (term "0,1"))
                           (rule "eqSymm" (formula "21") (term "1"))
                           (rule "eqSymm" (formula "28") (term "1,0,1,1,0"))
                           (rule "eqSymm" (formula "7"))
                           (rule "eqSymm" (formula "6"))
                           (rule "eqSymm" (formula "29"))
                           (rule "eqSymm" (formula "5") (term "1,0"))
                           (rule "eqSymm" (formula "26"))
                           (rule "replace_known_right" (formula "14") (term "0") (ifseqformula "31"))
                           (builtin "One Step Simplification" (formula "14"))
                           (rule "replace_known_right" (formula "15") (term "0") (ifseqformula "32"))
                           (builtin "One Step Simplification" (formula "15"))
                           (rule "inEqSimp_leqRight" (formula "33"))
                           (rule "times_zero_1" (formula "1") (term "1,0,0"))
                           (rule "add_zero_right" (formula "1") (term "0,0"))
                           (rule "inEqSimp_leqRight" (formula "31"))
                           (rule "times_zero_1" (formula "1") (term "1,0,0"))
                           (rule "add_zero_right" (formula "1") (term "0,0"))
                           (rule "inEqSimp_gtToGeq" (formula "19"))
                           (rule "times_zero_1" (formula "19") (term "1,0,0"))
                           (rule "add_zero_right" (formula "19") (term "0,0"))
                           (rule "inEqSimp_gtToGeq" (formula "23") (term "0"))
                           (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "28") (term "1,0,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,0,1,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "28") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "28") (term "0,1,0"))
                           (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "29") (term "1,0,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,0,1,1,0"))
                           (rule "inEqSimp_gtToGeq" (formula "26") (term "0"))
                           (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,0"))
                           (rule "polySimp_addComm1" (formula "26") (term "0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "29") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "29") (term "0,1,0"))
                           (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,0,1,0"))
                           (rule "polySimp_addComm1" (formula "29") (term "0,0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "4"))
                           (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "4") (term "0"))
                           (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "6"))
                           (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "6") (term "0"))
                           (rule "inEqSimp_commuteLeq" (formula "25") (term "0"))
                           (rule "inEqSimp_commuteLeq" (formula "29") (term "0,0,0,1,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "28") (term "0,0,0,1,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "28") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "29") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "3"))
                           (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "5"))
                           (rule "applyEq" (formula "23") (term "1,0,1") (ifseqformula "11"))
                           (rule "applyEq" (formula "25") (term "1,1") (ifseqformula "10"))
                           (rule "applyEq" (formula "26") (term "1,0,1") (ifseqformula "10"))
                           (rule "applyEq" (formula "22") (term "1,1") (ifseqformula "11"))
                           (rule "applyEqRigid" (formula "10") (term "1") (ifseqformula "9"))
                           (rule "applyEqRigid" (formula "26") (term "1,0,1") (ifseqformula "9"))
                           (rule "applyEq" (formula "25") (term "1,1") (ifseqformula "9"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                           (rule "mul_literals" (formula "2") (term "1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                           (rule "mul_literals" (formula "1") (term "1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "0"))
                           (rule "polySimp_mulComm0" (formula "23") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "23") (term "1,0"))
                           (rule "mul_literals" (formula "23") (term "0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0"))
                           (rule "polySimp_elimOne" (formula "23") (term "1,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0,1,1,0"))
                           (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0,1,1,0"))
                           (rule "mul_literals" (formula "28") (term "0,1,1,0,0,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0,1,1,0"))
                           (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0,1,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "28") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,1,0"))
                           (rule "polySimp_mulComm0" (formula "28") (term "1,0,1,0"))
                           (rule "polySimp_rightDist" (formula "28") (term "1,0,1,0"))
                           (rule "mul_literals" (formula "28") (term "0,1,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,1,0"))
                           (rule "polySimp_elimOne" (formula "28") (term "1,1,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0,1,1,0"))
                           (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0,1,1,0"))
                           (rule "mul_literals" (formula "29") (term "0,1,1,0,0,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0,1,1,0"))
                           (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0,1,1,0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "26") (term "0"))
                           (rule "polySimp_mulLiterals" (formula "26") (term "0,0"))
                           (rule "polySimp_elimOne" (formula "26") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "29") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "29") (term "0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "29") (term "0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "29") (term "0,0,1,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                           (rule "polySimp_elimOne" (formula "4") (term "0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "6"))
                           (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                           (rule "polySimp_elimOne" (formula "6") (term "0"))
                           (rule "nnf_ex2all" (formula "28"))
                           (rule "nnf_ex2all" (formula "29"))
                           (rule "nnf_imp2or" (formula "9") (term "0"))
                           (rule "nnf_notAnd" (formula "2") (term "0"))
                           (rule "nnf_notAnd" (formula "1") (term "0"))
                           (rule "nnf_notAnd" (formula "9") (term "0,0"))
                           (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0"))
                           (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "9") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
                           (rule "mul_literals" (formula "9") (term "1,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "9") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "9") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0"))
                           (rule "nnf_notAnd" (formula "2") (term "0,0"))
                           (rule "inEqSimp_notGeq" (formula "2") (term "0,0,0"))
                           (rule "times_zero_1" (formula "2") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "2") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "0,0,0"))
                           (rule "mul_literals" (formula "2") (term "1,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "2") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "2") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "2") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "2") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "2") (term "1,1,0,0"))
                           (rule "nnf_notAnd" (formula "2") (term "1,0"))
                           (rule "inEqSimp_notLeq" (formula "2") (term "0,1,0"))
                           (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,1,0"))
                           (rule "mul_literals" (formula "2") (term "0,1,0,0,0,1,0"))
                           (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,1,0"))
                           (rule "add_literals" (formula "2") (term "0,0,0,0,1,0"))
                           (rule "add_zero_left" (formula "2") (term "0,0,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,0"))
                           (rule "polySimp_elimOne" (formula "2") (term "1,0,1,0"))
                           (rule "nnf_notAnd" (formula "1") (term "0,0"))
                           (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                           (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                           (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
                           (rule "nnf_notAnd" (formula "1") (term "1,0"))
                           (rule "inEqSimp_notGeq" (formula "1") (term "0,1,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0,1,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0,0,0,1,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,1,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0,0,1,0"))
                           (rule "add_zero_left" (formula "1") (term "0,0,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0"))
                           (rule "polySimp_elimOne" (formula "1") (term "1,0,1,0"))
                           (rule "nnf_notAll" (formula "2") (term "1,1,0"))
                           (rule "nnf_notAll" (formula "1") (term "1,1,0"))
                           (rule "nnf_imp2or" (formula "2") (term "0,0,1,1,0"))
                           (rule "nnf_notOr" (formula "2") (term "0,1,1,0"))
                           (builtin "One Step Simplification" (formula "2"))
                           (rule "nnf_imp2or" (formula "1") (term "0,0,1,1,0"))
                           (rule "nnf_notOr" (formula "1") (term "0,1,1,0"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "arrayLengthIsAShort" (formula "24") (term "1,0"))
                           (builtin "One Step Simplification" (formula "24"))
                           (rule "true_left" (formula "24"))
                           (rule "arrayLengthIsAShort" (formula "25") (term "0,0,1,1"))
                           (builtin "One Step Simplification" (formula "25"))
                           (rule "true_left" (formula "25"))
                           (rule "arrayLengthNotNegative" (formula "25") (term "1,0,1,1"))
                           (rule "arrayLengthNotNegative" (formula "26") (term "0,0,1,1"))
                           (rule "equiv_left" (formula "24"))
                           (branch "Case 1"
                              (rule "replace_known_left" (formula "31") (term "0,1") (ifseqformula "25"))
                              (builtin "One Step Simplification" (formula "31"))
                              (rule "applyEq" (formula "28") (term "0,0") (ifseqformula "25"))
                              (rule "inEqSimp_homoInEq1" (formula "28") (term "0"))
                              (rule "polySimp_addComm1" (formula "28") (term "0,0"))
                              (rule "applyEq" (formula "28") (term "0,0,1,1") (ifseqformula "25"))
                              (rule "eqSymm" (formula "28") (term "0,1,1"))
                              (builtin "One Step Simplification" (formula "28"))
                              (rule "notLeft" (formula "28"))
                              (rule "inEqSimp_leqRight" (formula "31"))
                              (rule "times_zero_1" (formula "1") (term "1,0,0"))
                              (rule "add_zero_right" (formula "1") (term "0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0"))
                              (rule "add_zero_left" (formula "1") (term "0,0"))
                              (rule "applyEq" (formula "28") (term "0") (ifseqformula "26"))
                              (rule "applyEq" (formula "30") (term "0,0") (ifseqformula "26"))
                              (rule "inEqSimp_commuteGeq" (formula "30") (term "0"))
                              (rule "applyEq" (formula "25") (term "0") (ifseqformula "26"))
                              (rule "inEqSimp_commuteLeq" (formula "25"))
                              (rule "applyEq" (formula "31") (term "0,0") (ifseqformula "26"))
                              (rule "inEqSimp_homoInEq0" (formula "31") (term "0"))
                              (rule "polySimp_addComm1" (formula "31") (term "0,0"))
                              (rule "applyEq" (formula "31") (term "0,0,1") (ifseqformula "26"))
                              (rule "eqSymm" (formula "31") (term "0,1"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                              (rule "polySimp_elimOne" (formula "1") (term "1"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "0"))
                              (rule "polySimp_mulComm0" (formula "30") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "30") (term "1,0"))
                              (rule "mul_literals" (formula "30") (term "0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0"))
                              (rule "polySimp_elimOne" (formula "30") (term "1,1,0"))
                              (rule "equiv_left" (formula "30"))
                              (branch "Case 1"
                                 (rule "notLeft" (formula "31"))
                                 (rule "replace_known_right" (formula "29") (term "1") (ifseqformula "31"))
                                 (builtin "One Step Simplification" (formula "29"))
                                 (rule "notLeft" (formula "29"))
                                 (rule "inEqSimp_leqRight" (formula "30"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1"))
                                 (rule "mul_literals" (formula "1") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                 (rule "inEqSimp_contradEq7" (formula "30") (ifseqformula "29"))
                                 (rule "polySimp_mulComm0" (formula "30") (term "1,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "30") (term "0,0"))
                                 (rule "add_literals" (formula "30") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "30") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "30") (term "0,0"))
                                 (rule "leq_literals" (formula "30") (term "0"))
                                 (builtin "One Step Simplification" (formula "30"))
                                 (rule "false_right" (formula "30"))
                                 (rule "inEqSimp_subsumption1" (formula "24") (ifseqformula "29"))
                                 (rule "inEqSimp_homoInEq0" (formula "24") (term "0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,0"))
                                 (rule "add_literals" (formula "24") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "24") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "24") (term "0,0"))
                                 (rule "qeq_literals" (formula "24") (term "0"))
                                 (builtin "One Step Simplification" (formula "24"))
                                 (rule "true_left" (formula "24"))
                                 (rule "ex_pull_out3" (formula "2") (term "1,0"))
                                 (rule "cnf_rightDist" (formula "2") (term "0,1,0"))
                                 (rule "commute_or" (formula "2") (term "1,0,1,0"))
                                 (rule "cnf_rightDist" (formula "2") (term "0,0,1,0"))
                                 (rule "commute_or" (formula "2") (term "1,0,0,1,0"))
                                 (rule "ex_pull_out3" (formula "1") (term "1,0"))
                                 (rule "cnf_rightDist" (formula "1") (term "0,1,0"))
                                 (rule "commute_or" (formula "1") (term "1,0,1,0"))
                                 (rule "cnf_rightDist" (formula "1") (term "0,0,1,0"))
                                 (rule "commute_or" (formula "1") (term "1,0,0,1,0"))
                                 (rule "ex_pull_out3" (formula "2") (term "0"))
                                 (rule "cnf_rightDist" (formula "2") (term "0,0"))
                                 (rule "commute_or_2" (formula "2") (term "1,0,0"))
                                 (rule "commute_or" (formula "2") (term "0,1,0,0"))
                                 (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                                 (rule "commute_or_2" (formula "2") (term "1,0,0,0"))
                                 (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
                                 (rule "commute_or" (formula "2") (term "0,1,0,0,0"))
                                 (rule "ex_pull_out3" (formula "1") (term "0"))
                                 (rule "cnf_rightDist" (formula "1") (term "0,0"))
                                 (rule "commute_or_2" (formula "1") (term "1,0,0"))
                                 (rule "commute_or" (formula "1") (term "0,1,0,0"))
                                 (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                                 (rule "commute_or_2" (formula "1") (term "1,0,0,0"))
                                 (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
                                 (rule "commute_or" (formula "1") (term "0,1,0,0,0"))
                                 (rule "commute_and_2" (formula "2") (term "0,0"))
                                 (rule "allLeft" (formula "9") (inst "t=j_126"))
                                 (rule "replace_known_right" (formula "9") (term "1") (ifseqformula "31"))
                                 (builtin "One Step Simplification" (formula "9"))
                                 (rule "inEqSimp_contradInEq1" (formula "9") (term "0") (ifseqformula "5"))
                                 (rule "qeq_literals" (formula "9") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "9"))
                                 (rule "commute_and_2" (formula "1") (term "0,0"))
                                 (rule "commute_and" (formula "2") (term "0,0,0"))
                                 (rule "commute_and" (formula "1") (term "0,0,0"))
                                 (rule "allLeft" (formula "2") (inst "t=j_126"))
                                 (rule "exLeft" (formula "2") (inst "sk=j_137"))
                                 (rule "andLeft" (formula "2"))
                                 (rule "andLeft" (formula "2"))
                                 (rule "inEqSimp_commuteGeq" (formula "4") (term "1,0,0"))
                                 (rule "inEqSimp_commuteGeq" (formula "2") (term "1,0,0"))
                                 (rule "inEqSimp_commuteGeq" (formula "3") (term "1,0,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "2") (term "0,0,0") (ifseqformula "8"))
                                 (rule "qeq_literals" (formula "2") (term "0,0,0,0"))
                                 (builtin "One Step Simplification" (formula "2"))
                                 (rule "inEqSimp_contradInEq1" (formula "4") (term "1,0,0") (ifseqformula "9"))
                                 (rule "inEqSimp_homoInEq1" (formula "4") (term "0,1,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "4") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "4") (term "1,1,0,0,1,0,0"))
                                 (rule "times_zero_1" (formula "4") (term "1,0,0,1,0,0"))
                                 (rule "add_zero_right" (formula "4") (term "0,0,1,0,0"))
                                 (rule "leq_literals" (formula "4") (term "0,1,0,0"))
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "inEqSimp_contradInEq1" (formula "3") (term "1,0,0") (ifseqformula "9"))
                                 (rule "inEqSimp_homoInEq1" (formula "3") (term "0,1,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "3") (term "1,1,0,0,1,0,0"))
                                 (rule "times_zero_1" (formula "3") (term "1,0,0,1,0,0"))
                                 (rule "add_zero_right" (formula "3") (term "0,0,1,0,0"))
                                 (rule "leq_literals" (formula "3") (term "0,1,0,0"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "inEqSimp_contradInEq1" (formula "2") (term "0,0") (ifseqformula "9"))
                                 (rule "inEqSimp_homoInEq1" (formula "2") (term "0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0,0,0"))
                                 (rule "add_literals" (formula "2") (term "1,1,0,0,0,0"))
                                 (rule "times_zero_1" (formula "2") (term "1,0,0,0,0"))
                                 (rule "add_zero_right" (formula "2") (term "0,0,0,0"))
                                 (rule "leq_literals" (formula "2") (term "0,0,0"))
                                 (builtin "One Step Simplification" (formula "2"))
                                 (rule "inEqSimp_contradInEq1" (formula "3") (term "0,0") (ifseqformula "8"))
                                 (rule "qeq_literals" (formula "3") (term "0,0,0"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "inEqSimp_contradInEq1" (formula "4") (term "0,0") (ifseqformula "8"))
                                 (rule "qeq_literals" (formula "4") (term "0,0,0"))
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "commute_or" (formula "3"))
                                 (rule "commute_or" (formula "4"))
                                 (rule "cut_direct" (formula "2") (term "0"))
                                 (branch "CUT: b[j_126] ≥ a[j_126] TRUE"
                                    (builtin "One Step Simplification" (formula "3"))
                                    (rule "true_left" (formula "3"))
                                    (rule "replace_known_left" (formula "4") (term "1") (ifseqformula "2"))
                                    (builtin "One Step Simplification" (formula "4"))
                                    (rule "true_left" (formula "4"))
                                    (rule "replace_known_left" (formula "3") (term "1") (ifseqformula "2"))
                                    (builtin "One Step Simplification" (formula "3"))
                                    (rule "true_left" (formula "3"))
                                    (rule "inEqSimp_strengthen1" (formula "2") (ifseqformula "32"))
                                    (rule "inEqSimp_contradEq7" (formula "32") (ifseqformula "2"))
                                    (rule "polySimp_mulComm0" (formula "32") (term "1,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0"))
                                    (rule "add_literals" (formula "32") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "32") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "32") (term "0,0"))
                                    (rule "leq_literals" (formula "32") (term "0"))
                                    (builtin "One Step Simplification" (formula "32"))
                                    (rule "false_right" (formula "32"))
                                    (rule "allLeft" (formula "1") (inst "t=j_126"))
                                    (rule "exLeft" (formula "1") (inst "sk=j_140"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "inEqSimp_commuteGeq" (formula "3") (term "1,0,0"))
                                    (rule "inEqSimp_commuteGeq" (formula "2") (term "1,0,0"))
                                    (rule "inEqSimp_commuteGeq" (formula "1") (term "1,0,0"))
                                    (rule "inEqSimp_contradInEq1" (formula "3") (term "0,0,0") (ifseqformula "9"))
                                    (rule "qeq_literals" (formula "3") (term "0,0,0,0"))
                                    (builtin "One Step Simplification" (formula "3"))
                                    (rule "inEqSimp_contradInEq1" (formula "1") (term "1,0") (ifseqformula "5"))
                                    (rule "inEqSimp_homoInEq1" (formula "1") (term "0,1,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,1,0"))
                                    (rule "add_literals" (formula "1") (term "1,1,0,0,1,0"))
                                    (rule "times_zero_1" (formula "1") (term "1,0,0,1,0"))
                                    (rule "add_zero_right" (formula "1") (term "0,0,1,0"))
                                    (rule "leq_literals" (formula "1") (term "0,1,0"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "2") (term "1,0,0") (ifseqformula "10"))
                                    (rule "inEqSimp_homoInEq1" (formula "2") (term "0,1,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "2") (term "1,1,0,0,1,0,0"))
                                    (rule "times_zero_1" (formula "2") (term "1,0,0,1,0,0"))
                                    (rule "add_zero_right" (formula "2") (term "0,0,1,0,0"))
                                    (rule "leq_literals" (formula "2") (term "0,1,0,0"))
                                    (builtin "One Step Simplification" (formula "2"))
                                    (rule "inEqSimp_contradInEq1" (formula "3") (term "0,0") (ifseqformula "10"))
                                    (rule "inEqSimp_homoInEq1" (formula "3") (term "0,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0,0,0"))
                                    (rule "add_literals" (formula "3") (term "1,1,0,0,0,0"))
                                    (rule "times_zero_1" (formula "3") (term "1,0,0,0,0"))
                                    (rule "add_zero_right" (formula "3") (term "0,0,0,0"))
                                    (rule "leq_literals" (formula "3") (term "0,0,0"))
                                    (builtin "One Step Simplification" (formula "3"))
                                    (rule "inEqSimp_contradInEq1" (formula "1") (term "0,0") (ifseqformula "9"))
                                    (rule "qeq_literals" (formula "1") (term "0,0,0"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "2") (term "0,0") (ifseqformula "9"))
                                    (rule "qeq_literals" (formula "2") (term "0,0,0"))
                                    (builtin "One Step Simplification" (formula "2"))
                                    (rule "inEqSimp_contradInEq1" (formula "2") (term "0") (ifseqformula "5"))
                                    (rule "inEqSimp_homoInEq1" (formula "2") (term "0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0,0"))
                                    (rule "add_literals" (formula "2") (term "1,1,0,0,0"))
                                    (rule "times_zero_1" (formula "2") (term "1,0,0,0"))
                                    (rule "add_zero_right" (formula "2") (term "0,0,0"))
                                    (rule "leq_literals" (formula "2") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "2"))
                                    (rule "inEqSimp_contradInEq1" (formula "3") (term "0") (ifseqformula "5"))
                                    (rule "inEqSimp_homoInEq1" (formula "3") (term "0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0,0"))
                                    (rule "add_literals" (formula "3") (term "1,1,0,0,0"))
                                    (rule "times_zero_1" (formula "3") (term "1,0,0,0"))
                                    (rule "add_zero_right" (formula "3") (term "0,0,0"))
                                    (rule "leq_literals" (formula "3") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "3"))
                                    (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "10"))
                                    (rule "inEqSimp_homoInEq1" (formula "1") (term "0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
                                    (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                                    (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                                    (rule "add_zero_right" (formula "1") (term "0,0,0"))
                                    (rule "leq_literals" (formula "1") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "2"))
                                    (rule "times_zero_1" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                    (rule "mul_literals" (formula "1") (term "1"))
                                    (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "1"))
                                    (rule "leq_literals" (formula "9") (term "0"))
                                    (builtin "One Step Simplification" (formula "9"))
                                    (rule "true_left" (formula "9"))
                                    (rule "allLeft" (formula "13") (inst "t=j_140"))
                                    (rule "replace_known_right" (formula "13") (term "1") (ifseqformula "34"))
                                    (builtin "One Step Simplification" (formula "13"))
                                    (rule "inEqSimp_contradInEq1" (formula "13") (term "0") (ifseqformula "2"))
                                    (rule "qeq_literals" (formula "13") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "13"))
                                    (rule "inEqSimp_exactShadow3" (formula "13") (ifseqformula "3"))
                                    (rule "polySimp_mulComm0" (formula "13") (term "0,0"))
                                    (rule "polySimp_addAssoc" (formula "13") (term "0"))
                                    (rule "polySimp_addComm0" (formula "13") (term "0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "13"))
                                    (rule "polySimp_mulComm0" (formula "13") (term "1"))
                                    (rule "polySimp_rightDist" (formula "13") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "13") (term "1,1"))
                                    (rule "mul_literals" (formula "13") (term "0,1"))
                                    (rule "polySimp_elimOne" (formula "13") (term "1,1"))
                                    (rule "inEqSimp_subsumption1" (formula "12") (ifseqformula "13"))
                                    (rule "inEqSimp_homoInEq0" (formula "12") (term "0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0"))
                                    (rule "add_literals" (formula "12") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "12") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "12") (term "0,0"))
                                    (rule "qeq_literals" (formula "12") (term "0"))
                                    (builtin "One Step Simplification" (formula "12"))
                                    (rule "true_left" (formula "12"))
                                    (rule "allLeft" (formula "6") (inst "t=i_0"))
                                    (rule "exLeft" (formula "6") (inst "sk=j_141"))
                                    (rule "andLeft" (formula "6"))
                                    (rule "andLeft" (formula "6"))
                                    (rule "inEqSimp_commuteGeq" (formula "8") (term "1,0,0"))
                                    (rule "inEqSimp_commuteGeq" (formula "6") (term "1,0,0"))
                                    (rule "inEqSimp_commuteGeq" (formula "7") (term "1,0,0"))
                                    (rule "inEqSimp_contradInEq1" (formula "8") (term "0,0,0") (ifseqformula "13"))
                                    (rule "qeq_literals" (formula "8") (term "0,0,0,0"))
                                    (builtin "One Step Simplification" (formula "8"))
                                    (rule "inEqSimp_contradInEq1" (formula "7") (term "0,0,0") (ifseqformula "13"))
                                    (rule "qeq_literals" (formula "7") (term "0,0,0,0"))
                                    (builtin "One Step Simplification" (formula "7"))
                                    (rule "inEqSimp_contradInEq1" (formula "6") (term "0,0,0") (ifseqformula "13"))
                                    (rule "qeq_literals" (formula "6") (term "0,0,0,0"))
                                    (builtin "One Step Simplification" (formula "6"))
                                    (rule "inEqSimp_contradInEq1" (formula "8") (term "0,0") (ifseqformula "14"))
                                    (rule "inEqSimp_homoInEq1" (formula "8") (term "0,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0,0,0"))
                                    (rule "add_literals" (formula "8") (term "1,1,0,0,0,0"))
                                    (rule "times_zero_1" (formula "8") (term "1,0,0,0,0"))
                                    (rule "add_zero_right" (formula "8") (term "0,0,0,0"))
                                    (rule "leq_literals" (formula "8") (term "0,0,0"))
                                    (builtin "One Step Simplification" (formula "8"))
                                    (rule "inEqSimp_contradInEq1" (formula "7") (term "0,0") (ifseqformula "14"))
                                    (rule "inEqSimp_homoInEq1" (formula "7") (term "0,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0,0,0"))
                                    (rule "add_literals" (formula "7") (term "1,1,0,0,0,0"))
                                    (rule "times_zero_1" (formula "7") (term "1,0,0,0,0"))
                                    (rule "add_zero_right" (formula "7") (term "0,0,0,0"))
                                    (rule "leq_literals" (formula "7") (term "0,0,0"))
                                    (builtin "One Step Simplification" (formula "7"))
                                    (rule "inEqSimp_contradInEq1" (formula "6") (term "0,0") (ifseqformula "14"))
                                    (rule "inEqSimp_homoInEq1" (formula "6") (term "0,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0,0,0"))
                                    (rule "add_literals" (formula "6") (term "1,1,0,0,0,0"))
                                    (rule "times_zero_1" (formula "6") (term "1,0,0,0,0"))
                                    (rule "add_zero_right" (formula "6") (term "0,0,0,0"))
                                    (rule "leq_literals" (formula "6") (term "0,0,0"))
                                    (builtin "One Step Simplification" (formula "6"))
                                    (rule "commute_or" (formula "8"))
                                    (rule "commute_or" (formula "7"))
                                    (rule "allLeft" (formula "4") (inst "t=i_0"))
                                    (rule "exLeft" (formula "4") (inst "sk=j_142"))
                                    (rule "andLeft" (formula "4"))
                                    (rule "andLeft" (formula "4"))
                                    (rule "inEqSimp_commuteGeq" (formula "6") (term "1,0,0"))
                                    (rule "inEqSimp_commuteGeq" (formula "5") (term "1,0,0"))
                                    (rule "inEqSimp_commuteGeq" (formula "4") (term "1,0,0"))
                                    (rule "inEqSimp_contradInEq1" (formula "4") (term "0,0,0") (ifseqformula "16"))
                                    (rule "qeq_literals" (formula "4") (term "0,0,0,0"))
                                    (builtin "One Step Simplification" (formula "4"))
                                    (rule "inEqSimp_contradInEq1" (formula "6") (term "0,0,0") (ifseqformula "16"))
                                    (rule "qeq_literals" (formula "6") (term "0,0,0,0"))
                                    (builtin "One Step Simplification" (formula "6"))
                                    (rule "inEqSimp_contradInEq1" (formula "5") (term "0,0,0") (ifseqformula "16"))
                                    (rule "qeq_literals" (formula "5") (term "0,0,0,0"))
                                    (builtin "One Step Simplification" (formula "5"))
                                    (rule "inEqSimp_contradInEq1" (formula "4") (term "0,0") (ifseqformula "17"))
                                    (rule "inEqSimp_homoInEq1" (formula "4") (term "0,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "4") (term "0,0,0,0"))
                                    (rule "add_literals" (formula "4") (term "1,1,0,0,0,0"))
                                    (rule "times_zero_1" (formula "4") (term "1,0,0,0,0"))
                                    (rule "add_zero_right" (formula "4") (term "0,0,0,0"))
                                    (rule "leq_literals" (formula "4") (term "0,0,0"))
                                    (builtin "One Step Simplification" (formula "4"))
                                    (rule "inEqSimp_contradInEq1" (formula "5") (term "0,0") (ifseqformula "17"))
                                    (rule "inEqSimp_homoInEq1" (formula "5") (term "0,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "5") (term "0,0,0,0"))
                                    (rule "add_literals" (formula "5") (term "1,1,0,0,0,0"))
                                    (rule "times_zero_1" (formula "5") (term "1,0,0,0,0"))
                                    (rule "add_zero_right" (formula "5") (term "0,0,0,0"))
                                    (rule "leq_literals" (formula "5") (term "0,0,0"))
                                    (builtin "One Step Simplification" (formula "5"))
                                    (rule "inEqSimp_contradInEq1" (formula "6") (term "0,0") (ifseqformula "17"))
                                    (rule "inEqSimp_homoInEq1" (formula "6") (term "0,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0,0,0"))
                                    (rule "add_literals" (formula "6") (term "1,1,0,0,0,0"))
                                    (rule "times_zero_1" (formula "6") (term "1,0,0,0,0"))
                                    (rule "add_zero_right" (formula "6") (term "0,0,0,0"))
                                    (rule "leq_literals" (formula "6") (term "0,0,0"))
                                    (builtin "One Step Simplification" (formula "6"))
                                    (rule "commute_or" (formula "5"))
                                    (rule "commute_or" (formula "6"))
                                    (rule "allLeft" (formula "12") (inst "t=Z(0(#))"))
                                    (rule "leq_literals" (formula "12") (term "0,0,0,1,0,0"))
                                    (builtin "One Step Simplification" (formula "12"))
                                    (rule "leq_literals" (formula "12") (term "0,0,0,1,0"))
                                    (builtin "One Step Simplification" (formula "12"))
                                    (rule "add_zero_right" (formula "12") (term "1,1,1,0"))
                                    (rule "leq_literals" (formula "12") (term "0,0,0,0,0,0"))
                                    (builtin "One Step Simplification" (formula "12"))
                                    (rule "exLeft" (formula "12") (inst "sk=j_143"))
                                    (rule "andLeft" (formula "12"))
                                    (rule "andLeft" (formula "12"))
                                    (rule "inEqSimp_commuteGeq" (formula "14") (term "0,0"))
                                    (rule "inEqSimp_commuteGeq" (formula "13") (term "0,0"))
                                    (rule "inEqSimp_commuteGeq" (formula "12") (term "0,0"))
                                    (rule "applyEq" (formula "13") (term "0,1,0") (ifseqformula "24"))
                                    (rule "inEqSimp_homoInEq1" (formula "13") (term "1,0"))
                                    (rule "polySimp_pullOutFactor1" (formula "13") (term "0,1,0"))
                                    (rule "add_literals" (formula "13") (term "1,0,1,0"))
                                    (rule "times_zero_1" (formula "13") (term "0,1,0"))
                                    (rule "leq_literals" (formula "13") (term "1,0"))
                                    (builtin "One Step Simplification" (formula "13"))
                                    (rule "true_left" (formula "13"))
                                    (rule "applyEq" (formula "12") (term "0,1,0") (ifseqformula "23"))
                                    (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0"))
                                    (rule "polySimp_pullOutFactor1" (formula "12") (term "0,1,0"))
                                    (rule "add_literals" (formula "12") (term "1,0,1,0"))
                                    (rule "times_zero_1" (formula "12") (term "0,1,0"))
                                    (rule "leq_literals" (formula "12") (term "1,0"))
                                    (builtin "One Step Simplification" (formula "12"))
                                    (rule "true_left" (formula "12"))
                                    (rule "applyEq" (formula "12") (term "0,1,0") (ifseqformula "22"))
                                    (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0"))
                                    (rule "polySimp_pullOutFactor1" (formula "12") (term "0,1,0"))
                                    (rule "add_literals" (formula "12") (term "1,0,1,0"))
                                    (rule "times_zero_1" (formula "12") (term "0,1,0"))
                                    (rule "leq_literals" (formula "12") (term "1,0"))
                                    (builtin "One Step Simplification" (formula "12"))
                                    (rule "true_left" (formula "12"))
                                    (rule "allLeft" (formula "7") (inst "t=Z(0(#))"))
                                    (rule "leq_literals" (formula "7") (term "0,0,0,1,0,0"))
                                    (builtin "One Step Simplification" (formula "7"))
                                    (rule "leq_literals" (formula "7") (term "0,0,0,1,0"))
                                    (builtin "One Step Simplification" (formula "7"))
                                    (rule "leq_literals" (formula "7") (term "0,0,0,0,0,0"))
                                    (builtin "One Step Simplification" (formula "7"))
                                    (rule "add_zero_right" (formula "7") (term "1,1,1,0"))
                                    (rule "exLeft" (formula "7") (inst "sk=j_144"))
                                    (rule "andLeft" (formula "7"))
                                    (rule "andLeft" (formula "7"))
                                    (rule "inEqSimp_commuteGeq" (formula "9") (term "0,0"))
                                    (rule "inEqSimp_commuteGeq" (formula "8") (term "0,0"))
                                    (rule "inEqSimp_commuteGeq" (formula "7") (term "0,0"))
                                    (rule "applyEq" (formula "9") (term "0,1,0") (ifseqformula "24"))
                                    (rule "inEqSimp_homoInEq0" (formula "9") (term "1,0"))
                                    (rule "polySimp_pullOutFactor1" (formula "9") (term "0,1,0"))
                                    (rule "add_literals" (formula "9") (term "1,0,1,0"))
                                    (rule "times_zero_1" (formula "9") (term "0,1,0"))
                                    (rule "qeq_literals" (formula "9") (term "1,0"))
                                    (builtin "One Step Simplification" (formula "9"))
                                    (rule "true_left" (formula "9"))
                                    (rule "applyEq" (formula "7") (term "0,1,0") (ifseqformula "23"))
                                    (rule "inEqSimp_homoInEq0" (formula "7") (term "1,0"))
                                    (rule "polySimp_pullOutFactor1" (formula "7") (term "0,1,0"))
                                    (rule "add_literals" (formula "7") (term "1,0,1,0"))
                                    (rule "times_zero_1" (formula "7") (term "0,1,0"))
                                    (rule "qeq_literals" (formula "7") (term "1,0"))
                                    (builtin "One Step Simplification" (formula "7"))
                                    (rule "true_left" (formula "7"))
                                    (rule "applyEq" (formula "7") (term "0,1,0") (ifseqformula "22"))
                                    (rule "inEqSimp_homoInEq0" (formula "7") (term "1,0"))
                                    (rule "polySimp_pullOutFactor1" (formula "7") (term "0,1,0"))
                                    (rule "add_literals" (formula "7") (term "1,0,1,0"))
                                    (rule "times_zero_1" (formula "7") (term "0,1,0"))
                                    (rule "qeq_literals" (formula "7") (term "1,0"))
                                    (builtin "One Step Simplification" (formula "7"))
                                    (rule "true_left" (formula "7"))
                                    (rule "cut_direct" (formula "9") (term "0"))
                                    (branch "CUT: b[i_0] ≥ a[i_0] TRUE"
                                       (builtin "One Step Simplification" (formula "10"))
                                       (rule "true_left" (formula "10"))
                                       (rule "replace_known_left" (formula "11") (term "1") (ifseqformula "9"))
                                       (builtin "One Step Simplification" (formula "11"))
                                       (rule "true_left" (formula "11"))
                                       (rule "replace_known_left" (formula "10") (term "1") (ifseqformula "9"))
                                       (builtin "One Step Simplification" (formula "10"))
                                       (rule "true_left" (formula "10"))
                                       (rule "inEqSimp_strengthen1" (formula "9") (ifseqformula "39"))
                                       (rule "inEqSimp_contradEq7" (formula "39") (ifseqformula "9"))
                                       (rule "polySimp_mulComm0" (formula "39") (term "1,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "39") (term "0,0"))
                                       (rule "add_literals" (formula "39") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "39") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "39") (term "0,0"))
                                       (rule "leq_literals" (formula "39") (term "0"))
                                       (builtin "One Step Simplification" (formula "39"))
                                       (rule "false_right" (formula "39"))
                                       (rule "inEqSimp_contradInEq1" (formula "6") (term "1") (ifseqformula "9"))
                                       (rule "inEqSimp_homoInEq1" (formula "6") (term "0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0,1"))
                                       (rule "add_literals" (formula "6") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "6") (term "1,0,0,1"))
                                       (rule "add_zero_right" (formula "6") (term "0,0,1"))
                                       (rule "leq_literals" (formula "6") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "6"))
                                       (rule "inEqSimp_contradInEq1" (formula "4") (term "0") (ifseqformula "9"))
                                       (rule "inEqSimp_homoInEq1" (formula "4") (term "0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "4") (term "0,0,0"))
                                       (rule "add_literals" (formula "4") (term "1,1,0,0,0"))
                                       (rule "times_zero_1" (formula "4") (term "1,0,0,0"))
                                       (rule "add_zero_right" (formula "4") (term "0,0,0"))
                                       (rule "leq_literals" (formula "4") (term "0,0"))
                                       (builtin "One Step Simplification" (formula "4"))
                                       (rule "notLeft" (formula "4"))
                                       (rule "inEqSimp_contradInEq1" (formula "4") (term "1") (ifseqformula "8"))
                                       (rule "inEqSimp_homoInEq1" (formula "4") (term "0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "4") (term "0,0,1"))
                                       (rule "add_literals" (formula "4") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "4") (term "1,0,0,1"))
                                       (rule "add_zero_right" (formula "4") (term "0,0,1"))
                                       (rule "leq_literals" (formula "4") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "4"))
                                       (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "5"))
                                       (rule "times_zero_1" (formula "4") (term "0,0"))
                                       (rule "add_zero_left" (formula "4") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                                       (rule "mul_literals" (formula "4") (term "1"))
                                       (rule "inEqSimp_subsumption1" (formula "14") (ifseqformula "4"))
                                       (rule "leq_literals" (formula "14") (term "0"))
                                       (builtin "One Step Simplification" (formula "14"))
                                       (rule "true_left" (formula "14"))
                                       (rule "allLeft" (formula "17") (inst "t=j_142"))
                                       (rule "replace_known_right" (formula "17") (term "1") (ifseqformula "38"))
                                       (builtin "One Step Simplification" (formula "17"))
                                       (rule "inEqSimp_contradInEq1" (formula "17") (term "0") (ifseqformula "5"))
                                       (rule "qeq_literals" (formula "17") (term "0,0"))
                                       (builtin "One Step Simplification" (formula "17"))
                                       (rule "inEqSimp_contradInEq0" (formula "17") (ifseqformula "6"))
                                       (rule "andLeft" (formula "17"))
                                       (rule "inEqSimp_homoInEq1" (formula "17"))
                                       (rule "polySimp_mulComm0" (formula "17") (term "1,0"))
                                       (rule "polySimp_rightDist" (formula "17") (term "1,0"))
                                       (rule "mul_literals" (formula "17") (term "0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "17") (term "0"))
                                       (rule "polySimp_addComm0" (formula "17") (term "0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "17") (term "0"))
                                       (rule "add_literals" (formula "17") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "17") (term "1,0"))
                                       (rule "add_zero_right" (formula "17") (term "0"))
                                       (rule "leq_literals" (formula "17"))
                                       (rule "closeFalse" (formula "17"))
                                    )
                                    (branch "CUT: b[i_0] ≥ a[i_0] FALSE"
                                       (builtin "One Step Simplification" (formula "9"))
                                       (rule "notLeft" (formula "9"))
                                       (rule "replace_known_right" (formula "9") (term "1") (ifseqformula "40"))
                                       (builtin "One Step Simplification" (formula "9"))
                                       (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "40"))
                                       (builtin "One Step Simplification" (formula "10"))
                                       (rule "inEqSimp_geqRight" (formula "40"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                       (rule "mul_literals" (formula "1") (term "0,1"))
                                       (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                       (rule "inEqSimp_contradEq3" (formula "42") (ifseqformula "1"))
                                       (rule "polySimp_mulComm0" (formula "42") (term "1,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "42") (term "0,0"))
                                       (rule "add_literals" (formula "42") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "42") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "42") (term "0,0"))
                                       (rule "qeq_literals" (formula "42") (term "0"))
                                       (builtin "One Step Simplification" (formula "42"))
                                       (rule "false_right" (formula "42"))
                                       (rule "inEqSimp_subsumption0" (formula "6") (term "1") (ifseqformula "1"))
                                       (rule "inEqSimp_homoInEq0" (formula "6") (term "0,1"))
                                       (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1"))
                                       (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1"))
                                       (rule "mul_literals" (formula "6") (term "0,1,0,0,1"))
                                       (rule "polySimp_addAssoc" (formula "6") (term "0,0,1"))
                                       (rule "polySimp_addComm0" (formula "6") (term "0,0,0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0,1"))
                                       (rule "add_literals" (formula "6") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "6") (term "1,0,0,1"))
                                       (rule "add_zero_right" (formula "6") (term "0,0,1"))
                                       (rule "qeq_literals" (formula "6") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "6"))
                                       (rule "true_left" (formula "6"))
                                       (rule "inEqSimp_subsumption0" (formula "6") (term "1") (ifseqformula "1"))
                                       (rule "inEqSimp_homoInEq0" (formula "6") (term "0,1"))
                                       (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1"))
                                       (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1"))
                                       (rule "mul_literals" (formula "6") (term "0,1,0,0,1"))
                                       (rule "polySimp_addAssoc" (formula "6") (term "0,0,1"))
                                       (rule "polySimp_addComm0" (formula "6") (term "0,0,0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0,1"))
                                       (rule "add_literals" (formula "6") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "6") (term "1,0,0,1"))
                                       (rule "add_zero_right" (formula "6") (term "0,0,1"))
                                       (rule "qeq_literals" (formula "6") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "6"))
                                       (rule "true_left" (formula "6"))
                                       (rule "inEqSimp_subsumption0" (formula "5") (term "0") (ifseqformula "1"))
                                       (rule "inEqSimp_homoInEq0" (formula "5") (term "0,0"))
                                       (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "5") (term "1,0,0,0"))
                                       (rule "mul_literals" (formula "5") (term "0,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "5") (term "0,0,0"))
                                       (rule "polySimp_addComm0" (formula "5") (term "0,0,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "5") (term "0,0,0"))
                                       (rule "add_literals" (formula "5") (term "1,1,0,0,0"))
                                       (rule "times_zero_1" (formula "5") (term "1,0,0,0"))
                                       (rule "add_zero_right" (formula "5") (term "0,0,0"))
                                       (rule "qeq_literals" (formula "5") (term "0,0"))
                                       (builtin "One Step Simplification" (formula "5"))
                                       (rule "true_left" (formula "5"))
                                       (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "8"))
                                       (rule "times_zero_1" (formula "7") (term "0,0"))
                                       (rule "add_zero_left" (formula "7") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                                       (rule "mul_literals" (formula "7") (term "1"))
                                       (rule "inEqSimp_subsumption1" (formula "14") (ifseqformula "7"))
                                       (rule "leq_literals" (formula "14") (term "0"))
                                       (builtin "One Step Simplification" (formula "14"))
                                       (rule "true_left" (formula "14"))
                                       (rule "allLeft" (formula "17") (inst "t=j_141"))
                                       (rule "replace_known_right" (formula "17") (term "1") (ifseqformula "38"))
                                       (builtin "One Step Simplification" (formula "17"))
                                       (rule "inEqSimp_contradInEq1" (formula "17") (term "0") (ifseqformula "8"))
                                       (rule "qeq_literals" (formula "17") (term "0,0"))
                                       (builtin "One Step Simplification" (formula "17"))
                                       (rule "inEqSimp_contradInEq1" (formula "9") (ifseqformula "17"))
                                       (rule "andLeft" (formula "9"))
                                       (rule "inEqSimp_homoInEq1" (formula "9"))
                                       (rule "polySimp_mulComm0" (formula "9") (term "1,0"))
                                       (rule "polySimp_rightDist" (formula "9") (term "1,0"))
                                       (rule "mul_literals" (formula "9") (term "0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "9") (term "0"))
                                       (rule "polySimp_addComm0" (formula "9") (term "0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "9") (term "0"))
                                       (rule "add_literals" (formula "9") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "9") (term "1,0"))
                                       (rule "add_zero_right" (formula "9") (term "0"))
                                       (rule "leq_literals" (formula "9"))
                                       (rule "closeFalse" (formula "9"))
                                    )
                                 )
                                 (branch "CUT: b[j_126] ≥ a[j_126] FALSE"
                                    (builtin "One Step Simplification" (formula "2"))
                                    (rule "notLeft" (formula "2"))
                                    (rule "replace_known_right" (formula "2") (term "1") (ifseqformula "33"))
                                    (builtin "One Step Simplification" (formula "2"))
                                    (rule "replace_known_right" (formula "3") (term "1") (ifseqformula "33"))
                                    (builtin "One Step Simplification" (formula "3"))
                                    (rule "inEqSimp_geqRight" (formula "33"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                    (rule "mul_literals" (formula "1") (term "0,1"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                    (rule "inEqSimp_contradEq3" (formula "35") (ifseqformula "1"))
                                    (rule "polySimp_mulComm0" (formula "35") (term "1,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,0"))
                                    (rule "add_literals" (formula "35") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "35") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "35") (term "0,0"))
                                    (rule "qeq_literals" (formula "35") (term "0"))
                                    (builtin "One Step Simplification" (formula "35"))
                                    (rule "false_right" (formula "35"))
                                    (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "4"))
                                    (rule "times_zero_1" (formula "3") (term "0,0"))
                                    (rule "add_zero_left" (formula "3") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                                    (rule "mul_literals" (formula "3") (term "1"))
                                    (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "3"))
                                    (rule "leq_literals" (formula "9") (term "0"))
                                    (builtin "One Step Simplification" (formula "9"))
                                    (rule "true_left" (formula "9"))
                                    (rule "allLeft" (formula "13") (inst "t=j_137"))
                                    (rule "replace_known_right" (formula "13") (term "1") (ifseqformula "34"))
                                    (builtin "One Step Simplification" (formula "13"))
                                    (rule "inEqSimp_contradInEq1" (formula "13") (term "0") (ifseqformula "4"))
                                    (rule "qeq_literals" (formula "13") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "13"))
                                    (rule "inEqSimp_exactShadow3" (formula "13") (ifseqformula "5"))
                                    (rule "polySimp_mulComm0" (formula "13") (term "0,0"))
                                    (rule "polySimp_addAssoc" (formula "13") (term "0"))
                                    (rule "polySimp_addComm0" (formula "13") (term "0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "13"))
                                    (rule "polySimp_mulComm0" (formula "13") (term "1"))
                                    (rule "polySimp_rightDist" (formula "13") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "13") (term "1,1"))
                                    (rule "mul_literals" (formula "13") (term "0,1"))
                                    (rule "polySimp_elimOne" (formula "13") (term "1,1"))
                                    (rule "inEqSimp_subsumption1" (formula "12") (ifseqformula "13"))
                                    (rule "inEqSimp_homoInEq0" (formula "12") (term "0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0"))
                                    (rule "add_literals" (formula "12") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "12") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "12") (term "0,0"))
                                    (rule "qeq_literals" (formula "12") (term "0"))
                                    (builtin "One Step Simplification" (formula "12"))
                                    (rule "true_left" (formula "12"))
                                    (rule "allLeft" (formula "6") (inst "t=i_0"))
                                    (rule "exLeft" (formula "6") (inst "sk=j_138"))
                                    (rule "andLeft" (formula "6"))
                                    (rule "andLeft" (formula "6"))
                                    (rule "inEqSimp_commuteGeq" (formula "8") (term "1,0,0"))
                                    (rule "inEqSimp_commuteGeq" (formula "7") (term "1,0,0"))
                                    (rule "inEqSimp_commuteGeq" (formula "6") (term "1,0,0"))
                                    (rule "inEqSimp_contradInEq1" (formula "8") (term "0,0,0") (ifseqformula "13"))
                                    (rule "qeq_literals" (formula "8") (term "0,0,0,0"))
                                    (builtin "One Step Simplification" (formula "8"))
                                    (rule "inEqSimp_contradInEq1" (formula "6") (term "0,0,0") (ifseqformula "13"))
                                    (rule "qeq_literals" (formula "6") (term "0,0,0,0"))
                                    (builtin "One Step Simplification" (formula "6"))
                                    (rule "inEqSimp_contradInEq1" (formula "7") (term "0,0,0") (ifseqformula "13"))
                                    (rule "qeq_literals" (formula "7") (term "0,0,0,0"))
                                    (builtin "One Step Simplification" (formula "7"))
                                    (rule "inEqSimp_contradInEq1" (formula "8") (term "0,0") (ifseqformula "14"))
                                    (rule "inEqSimp_homoInEq1" (formula "8") (term "0,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0,0,0"))
                                    (rule "add_literals" (formula "8") (term "1,1,0,0,0,0"))
                                    (rule "times_zero_1" (formula "8") (term "1,0,0,0,0"))
                                    (rule "add_zero_right" (formula "8") (term "0,0,0,0"))
                                    (rule "leq_literals" (formula "8") (term "0,0,0"))
                                    (builtin "One Step Simplification" (formula "8"))
                                    (rule "inEqSimp_contradInEq1" (formula "7") (term "0,0") (ifseqformula "14"))
                                    (rule "inEqSimp_homoInEq1" (formula "7") (term "0,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0,0,0"))
                                    (rule "add_literals" (formula "7") (term "1,1,0,0,0,0"))
                                    (rule "times_zero_1" (formula "7") (term "1,0,0,0,0"))
                                    (rule "add_zero_right" (formula "7") (term "0,0,0,0"))
                                    (rule "leq_literals" (formula "7") (term "0,0,0"))
                                    (builtin "One Step Simplification" (formula "7"))
                                    (rule "inEqSimp_contradInEq1" (formula "6") (term "0,0") (ifseqformula "14"))
                                    (rule "inEqSimp_homoInEq1" (formula "6") (term "0,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0,0,0"))
                                    (rule "add_literals" (formula "6") (term "1,1,0,0,0,0"))
                                    (rule "times_zero_1" (formula "6") (term "1,0,0,0,0"))
                                    (rule "add_zero_right" (formula "6") (term "0,0,0,0"))
                                    (rule "leq_literals" (formula "6") (term "0,0,0"))
                                    (builtin "One Step Simplification" (formula "6"))
                                    (rule "commute_or" (formula "8"))
                                    (rule "commute_or" (formula "7"))
                                    (rule "allLeft" (formula "2") (inst "t=i_0"))
                                    (rule "exLeft" (formula "2") (inst "sk=j_139"))
                                    (rule "andLeft" (formula "2"))
                                    (rule "andLeft" (formula "2"))
                                    (rule "inEqSimp_commuteGeq" (formula "4") (term "1,0,0"))
                                    (rule "inEqSimp_commuteGeq" (formula "3") (term "1,0,0"))
                                    (rule "inEqSimp_commuteGeq" (formula "2") (term "1,0,0"))
                                    (rule "inEqSimp_contradInEq1" (formula "4") (term "0,0,0") (ifseqformula "16"))
                                    (rule "qeq_literals" (formula "4") (term "0,0,0,0"))
                                    (builtin "One Step Simplification" (formula "4"))
                                    (rule "inEqSimp_contradInEq1" (formula "2") (term "0,0,0") (ifseqformula "16"))
                                    (rule "qeq_literals" (formula "2") (term "0,0,0,0"))
                                    (builtin "One Step Simplification" (formula "2"))
                                    (rule "inEqSimp_contradInEq1" (formula "3") (term "1,0,0") (ifseqformula "17"))
                                    (rule "inEqSimp_homoInEq1" (formula "3") (term "0,1,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "3") (term "1,1,0,0,1,0,0"))
                                    (rule "times_zero_1" (formula "3") (term "1,0,0,1,0,0"))
                                    (rule "add_zero_right" (formula "3") (term "0,0,1,0,0"))
                                    (rule "leq_literals" (formula "3") (term "0,1,0,0"))
                                    (builtin "One Step Simplification" (formula "3"))
                                    (rule "inEqSimp_contradInEq1" (formula "4") (term "0,0") (ifseqformula "17"))
                                    (rule "inEqSimp_homoInEq1" (formula "4") (term "0,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "4") (term "0,0,0,0"))
                                    (rule "add_literals" (formula "4") (term "1,1,0,0,0,0"))
                                    (rule "times_zero_1" (formula "4") (term "1,0,0,0,0"))
                                    (rule "add_zero_right" (formula "4") (term "0,0,0,0"))
                                    (rule "leq_literals" (formula "4") (term "0,0,0"))
                                    (builtin "One Step Simplification" (formula "4"))
                                    (rule "inEqSimp_contradInEq1" (formula "2") (term "0,0") (ifseqformula "17"))
                                    (rule "inEqSimp_homoInEq1" (formula "2") (term "0,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0,0,0"))
                                    (rule "add_literals" (formula "2") (term "1,1,0,0,0,0"))
                                    (rule "times_zero_1" (formula "2") (term "1,0,0,0,0"))
                                    (rule "add_zero_right" (formula "2") (term "0,0,0,0"))
                                    (rule "leq_literals" (formula "2") (term "0,0,0"))
                                    (builtin "One Step Simplification" (formula "2"))
                                    (rule "inEqSimp_contradInEq1" (formula "3") (term "0,0") (ifseqformula "16"))
                                    (rule "qeq_literals" (formula "3") (term "0,0,0"))
                                    (builtin "One Step Simplification" (formula "3"))
                                    (rule "commute_or" (formula "4"))
                                    (rule "commute_or" (formula "3"))
                                    (rule "cut_direct" (formula "9") (term "0"))
                                    (branch "CUT: b[i_0] ≥ a[i_0] TRUE"
                                       (builtin "One Step Simplification" (formula "10"))
                                       (rule "true_left" (formula "10"))
                                       (rule "replace_known_left" (formula "11") (term "1") (ifseqformula "9"))
                                       (builtin "One Step Simplification" (formula "11"))
                                       (rule "true_left" (formula "11"))
                                       (rule "replace_known_left" (formula "10") (term "1") (ifseqformula "9"))
                                       (builtin "One Step Simplification" (formula "10"))
                                       (rule "true_left" (formula "10"))
                                       (rule "inEqSimp_strengthen1" (formula "9") (ifseqformula "39"))
                                       (rule "inEqSimp_contradEq7" (formula "39") (ifseqformula "9"))
                                       (rule "polySimp_mulComm0" (formula "39") (term "1,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "39") (term "0,0"))
                                       (rule "add_literals" (formula "39") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "39") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "39") (term "0,0"))
                                       (rule "leq_literals" (formula "39") (term "0"))
                                       (builtin "One Step Simplification" (formula "39"))
                                       (rule "false_right" (formula "39"))
                                       (rule "inEqSimp_contradInEq1" (formula "3") (term "1") (ifseqformula "9"))
                                       (rule "inEqSimp_homoInEq1" (formula "3") (term "0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0,1"))
                                       (rule "add_literals" (formula "3") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "3") (term "1,0,0,1"))
                                       (rule "add_zero_right" (formula "3") (term "0,0,1"))
                                       (rule "leq_literals" (formula "3") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "3"))
                                       (rule "inEqSimp_contradInEq1" (formula "2") (term "0") (ifseqformula "9"))
                                       (rule "inEqSimp_homoInEq1" (formula "2") (term "0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0,0"))
                                       (rule "add_literals" (formula "2") (term "1,1,0,0,0"))
                                       (rule "times_zero_1" (formula "2") (term "1,0,0,0"))
                                       (rule "add_zero_right" (formula "2") (term "0,0,0"))
                                       (rule "leq_literals" (formula "2") (term "0,0"))
                                       (builtin "One Step Simplification" (formula "2"))
                                       (rule "notLeft" (formula "2"))
                                       (rule "inEqSimp_contradInEq1" (formula "3") (term "1") (ifseqformula "8"))
                                       (rule "inEqSimp_homoInEq1" (formula "3") (term "0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0,1"))
                                       (rule "add_literals" (formula "3") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "3") (term "1,0,0,1"))
                                       (rule "add_zero_right" (formula "3") (term "0,0,1"))
                                       (rule "leq_literals" (formula "3") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "3"))
                                       (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "3"))
                                       (rule "times_zero_1" (formula "2") (term "0,0"))
                                       (rule "add_zero_left" (formula "2") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                       (rule "mul_literals" (formula "2") (term "1"))
                                       (rule "inEqSimp_subsumption1" (formula "14") (ifseqformula "2"))
                                       (rule "leq_literals" (formula "14") (term "0"))
                                       (builtin "One Step Simplification" (formula "14"))
                                       (rule "true_left" (formula "14"))
                                       (rule "allLeft" (formula "17") (inst "t=j_139"))
                                       (rule "replace_known_right" (formula "17") (term "1") (ifseqformula "38"))
                                       (builtin "One Step Simplification" (formula "17"))
                                       (rule "inEqSimp_contradInEq0" (formula "17") (term "1") (ifseqformula "4"))
                                       (rule "inEqSimp_homoInEq1" (formula "17") (term "0,1"))
                                       (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1"))
                                       (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1"))
                                       (rule "mul_literals" (formula "17") (term "0,1,0,0,1"))
                                       (rule "polySimp_addAssoc" (formula "17") (term "0,0,1"))
                                       (rule "polySimp_addComm0" (formula "17") (term "0,0,0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,0,1"))
                                       (rule "add_literals" (formula "17") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "17") (term "1,0,0,1"))
                                       (rule "add_zero_right" (formula "17") (term "0,0,1"))
                                       (rule "leq_literals" (formula "17") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "17"))
                                       (rule "inEqSimp_contradInEq1" (formula "17") (ifseqformula "3"))
                                       (rule "qeq_literals" (formula "17") (term "0"))
                                       (builtin "One Step Simplification" (formula "17"))
                                       (rule "closeFalse" (formula "17"))
                                    )
                                    (branch "CUT: b[i_0] ≥ a[i_0] FALSE"
                                       (builtin "One Step Simplification" (formula "9"))
                                       (rule "notLeft" (formula "9"))
                                       (rule "replace_known_right" (formula "9") (term "1") (ifseqformula "40"))
                                       (builtin "One Step Simplification" (formula "9"))
                                       (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "40"))
                                       (builtin "One Step Simplification" (formula "10"))
                                       (rule "inEqSimp_geqRight" (formula "40"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                       (rule "mul_literals" (formula "1") (term "0,1"))
                                       (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                       (rule "inEqSimp_contradEq3" (formula "42") (ifseqformula "1"))
                                       (rule "polySimp_mulComm0" (formula "42") (term "1,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "42") (term "0,0"))
                                       (rule "add_literals" (formula "42") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "42") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "42") (term "0,0"))
                                       (rule "qeq_literals" (formula "42") (term "0"))
                                       (builtin "One Step Simplification" (formula "42"))
                                       (rule "false_right" (formula "42"))
                                       (rule "inEqSimp_subsumption0" (formula "5") (term "1") (ifseqformula "1"))
                                       (rule "inEqSimp_homoInEq0" (formula "5") (term "0,1"))
                                       (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1"))
                                       (rule "polySimp_rightDist" (formula "5") (term "1,0,0,1"))
                                       (rule "mul_literals" (formula "5") (term "0,1,0,0,1"))
                                       (rule "polySimp_addAssoc" (formula "5") (term "0,0,1"))
                                       (rule "polySimp_addComm0" (formula "5") (term "0,0,0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "5") (term "0,0,1"))
                                       (rule "add_literals" (formula "5") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "5") (term "1,0,0,1"))
                                       (rule "add_zero_right" (formula "5") (term "0,0,1"))
                                       (rule "qeq_literals" (formula "5") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "5"))
                                       (rule "true_left" (formula "5"))
                                       (rule "inEqSimp_subsumption0" (formula "3") (term "0") (ifseqformula "1"))
                                       (rule "inEqSimp_homoInEq0" (formula "3") (term "0,0"))
                                       (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "3") (term "1,0,0,0"))
                                       (rule "mul_literals" (formula "3") (term "0,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "3") (term "0,0,0"))
                                       (rule "polySimp_addComm0" (formula "3") (term "0,0,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0,0"))
                                       (rule "add_literals" (formula "3") (term "1,1,0,0,0"))
                                       (rule "times_zero_1" (formula "3") (term "1,0,0,0"))
                                       (rule "add_zero_right" (formula "3") (term "0,0,0"))
                                       (rule "qeq_literals" (formula "3") (term "0,0"))
                                       (builtin "One Step Simplification" (formula "3"))
                                       (rule "true_left" (formula "3"))
                                       (rule "inEqSimp_subsumption0" (formula "3") (term "1") (ifseqformula "1"))
                                       (rule "inEqSimp_homoInEq0" (formula "3") (term "0,1"))
                                       (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1"))
                                       (rule "polySimp_rightDist" (formula "3") (term "1,0,0,1"))
                                       (rule "mul_literals" (formula "3") (term "0,1,0,0,1"))
                                       (rule "polySimp_addAssoc" (formula "3") (term "0,0,1"))
                                       (rule "polySimp_addComm0" (formula "3") (term "0,0,0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0,1"))
                                       (rule "add_literals" (formula "3") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "3") (term "1,0,0,1"))
                                       (rule "add_zero_right" (formula "3") (term "0,0,1"))
                                       (rule "qeq_literals" (formula "3") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "3"))
                                       (rule "true_left" (formula "3"))
                                       (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "8"))
                                       (rule "times_zero_1" (formula "7") (term "0,0"))
                                       (rule "add_zero_left" (formula "7") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                                       (rule "mul_literals" (formula "7") (term "1"))
                                       (rule "inEqSimp_subsumption1" (formula "14") (ifseqformula "7"))
                                       (rule "leq_literals" (formula "14") (term "0"))
                                       (builtin "One Step Simplification" (formula "14"))
                                       (rule "true_left" (formula "14"))
                                       (rule "allLeft" (formula "17") (inst "t=j_138"))
                                       (rule "replace_known_right" (formula "17") (term "1") (ifseqformula "38"))
                                       (builtin "One Step Simplification" (formula "17"))
                                       (rule "inEqSimp_contradInEq1" (formula "17") (term "0") (ifseqformula "8"))
                                       (rule "qeq_literals" (formula "17") (term "0,0"))
                                       (builtin "One Step Simplification" (formula "17"))
                                       (rule "inEqSimp_contradInEq0" (formula "17") (ifseqformula "9"))
                                       (rule "andLeft" (formula "17"))
                                       (rule "inEqSimp_homoInEq1" (formula "17"))
                                       (rule "polySimp_mulComm0" (formula "17") (term "1,0"))
                                       (rule "polySimp_rightDist" (formula "17") (term "1,0"))
                                       (rule "mul_literals" (formula "17") (term "0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "17") (term "0"))
                                       (rule "polySimp_addComm0" (formula "17") (term "0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "17") (term "0"))
                                       (rule "add_literals" (formula "17") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "17") (term "1,0"))
                                       (rule "add_zero_right" (formula "17") (term "0"))
                                       (rule "leq_literals" (formula "17"))
                                       (rule "closeFalse" (formula "17"))
                                    )
                                 )
                              )
                              (branch "Case 2"
                                 (rule "notRight" (formula "31"))
                                 (rule "replace_known_left" (formula "30") (term "1") (ifseqformula "1"))
                                 (builtin "One Step Simplification" (formula "30"))
                                 (rule "inEqSimp_geqRight" (formula "31"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0,0"))
                                 (rule "applyEq" (formula "28") (term "0") (ifseqformula "2"))
                                 (rule "applyEq" (formula "26") (term "0") (ifseqformula "2"))
                                 (rule "inEqSimp_homoInEq1" (formula "26"))
                                 (rule "polySimp_pullOutFactor1" (formula "26") (term "0"))
                                 (rule "add_literals" (formula "26") (term "1,0"))
                                 (rule "times_zero_1" (formula "26") (term "0"))
                                 (rule "leq_literals" (formula "26"))
                                 (rule "true_left" (formula "26"))
                                 (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "2"))
                                 (rule "polySimp_pullOutFactor2" (formula "1") (term "0"))
                                 (rule "add_literals" (formula "1") (term "1,0"))
                                 (rule "times_zero_1" (formula "1") (term "0"))
                                 (rule "leq_literals" (formula "1"))
                                 (rule "true_left" (formula "1"))
                                 (rule "applyEq" (formula "28") (term "0") (ifseqformula "1"))
                                 (rule "inEqSimp_homoInEq0" (formula "28"))
                                 (rule "polySimp_pullOutFactor1" (formula "28") (term "0"))
                                 (rule "add_literals" (formula "28") (term "1,0"))
                                 (rule "times_zero_1" (formula "28") (term "0"))
                                 (rule "qeq_literals" (formula "28"))
                                 (rule "true_left" (formula "28"))
                                 (rule "ex_pull_out3" (formula "3") (term "1,0"))
                                 (rule "cnf_rightDist" (formula "3") (term "0,1,0"))
                                 (rule "commute_or" (formula "3") (term "1,0,1,0"))
                                 (rule "cnf_rightDist" (formula "3") (term "0,0,1,0"))
                                 (rule "commute_or" (formula "3") (term "1,0,0,1,0"))
                                 (rule "ex_pull_out3" (formula "2") (term "1,0"))
                                 (rule "cnf_rightDist" (formula "2") (term "0,1,0"))
                                 (rule "commute_or" (formula "2") (term "1,0,1,0"))
                                 (rule "cnf_rightDist" (formula "2") (term "0,0,1,0"))
                                 (rule "commute_or" (formula "2") (term "1,0,0,1,0"))
                                 (rule "ex_pull_out3" (formula "3") (term "0"))
                                 (rule "cnf_rightDist" (formula "3") (term "0,0"))
                                 (rule "commute_or_2" (formula "3") (term "1,0,0"))
                                 (rule "commute_or" (formula "3") (term "0,1,0,0"))
                                 (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                                 (rule "commute_or_2" (formula "3") (term "1,0,0,0"))
                                 (rule "shift_paren_or" (formula "3") (term "0,0,0,0"))
                                 (rule "commute_or" (formula "3") (term "0,1,0,0,0"))
                                 (rule "ex_pull_out3" (formula "2") (term "0"))
                                 (rule "cnf_rightDist" (formula "2") (term "0,0"))
                                 (rule "commute_or_2" (formula "2") (term "1,0,0"))
                                 (rule "commute_or" (formula "2") (term "0,1,0,0"))
                                 (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                                 (rule "commute_or_2" (formula "2") (term "1,0,0,0"))
                                 (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
                                 (rule "commute_or" (formula "2") (term "0,1,0,0,0"))
                                 (rule "commute_and_2" (formula "3") (term "0,0"))
                                 (rule "allLeft" (formula "10") (inst "t=j_126"))
                                 (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "30"))
                                 (builtin "One Step Simplification" (formula "10"))
                                 (rule "inEqSimp_contradInEq1" (formula "10") (term "0") (ifseqformula "6"))
                                 (rule "qeq_literals" (formula "10") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "10"))
                                 (rule "commute_and_2" (formula "2") (term "0,0"))
                                 (rule "commute_and" (formula "3") (term "0,0,0"))
                                 (rule "commute_and" (formula "2") (term "0,0,0"))
                                 (rule "allLeft" (formula "3") (inst "t=i_0"))
                                 (rule "exLeft" (formula "3") (inst "sk=j_135"))
                                 (rule "andLeft" (formula "3"))
                                 (rule "andLeft" (formula "3"))
                                 (rule "inEqSimp_commuteGeq" (formula "5") (term "1,0,0"))
                                 (rule "inEqSimp_commuteGeq" (formula "4") (term "1,0,0"))
                                 (rule "inEqSimp_commuteGeq" (formula "3") (term "1,0,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "3") (term "0,0,0") (ifseqformula "11"))
                                 (rule "qeq_literals" (formula "3") (term "0,0,0,0"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "inEqSimp_contradInEq1" (formula "5") (term "0,0,0") (ifseqformula "11"))
                                 (rule "qeq_literals" (formula "5") (term "0,0,0,0"))
                                 (builtin "One Step Simplification" (formula "5"))
                                 (rule "inEqSimp_contradInEq1" (formula "4") (term "0,0,0") (ifseqformula "11"))
                                 (rule "qeq_literals" (formula "4") (term "0,0,0,0"))
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "inEqSimp_contradInEq1" (formula "5") (term "0,0") (ifseqformula "12"))
                                 (rule "inEqSimp_homoInEq1" (formula "5") (term "0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "5") (term "0,0,0,0"))
                                 (rule "add_literals" (formula "5") (term "1,1,0,0,0,0"))
                                 (rule "times_zero_1" (formula "5") (term "1,0,0,0,0"))
                                 (rule "add_zero_right" (formula "5") (term "0,0,0,0"))
                                 (rule "leq_literals" (formula "5") (term "0,0,0"))
                                 (builtin "One Step Simplification" (formula "5"))
                                 (rule "inEqSimp_contradInEq1" (formula "3") (term "0,0") (ifseqformula "12"))
                                 (rule "inEqSimp_homoInEq1" (formula "3") (term "0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0,0,0"))
                                 (rule "add_literals" (formula "3") (term "1,1,0,0,0,0"))
                                 (rule "times_zero_1" (formula "3") (term "1,0,0,0,0"))
                                 (rule "add_zero_right" (formula "3") (term "0,0,0,0"))
                                 (rule "leq_literals" (formula "3") (term "0,0,0"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "inEqSimp_contradInEq1" (formula "4") (term "0,0") (ifseqformula "12"))
                                 (rule "inEqSimp_homoInEq1" (formula "4") (term "0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "4") (term "0,0,0,0"))
                                 (rule "add_literals" (formula "4") (term "1,1,0,0,0,0"))
                                 (rule "times_zero_1" (formula "4") (term "1,0,0,0,0"))
                                 (rule "add_zero_right" (formula "4") (term "0,0,0,0"))
                                 (rule "leq_literals" (formula "4") (term "0,0,0"))
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "commute_or" (formula "5"))
                                 (rule "commute_or" (formula "4"))
                                 (rule "cut_direct" (formula "3") (term "0"))
                                 (branch "CUT: b[i_0] ≥ a[i_0] TRUE"
                                    (builtin "One Step Simplification" (formula "4"))
                                    (rule "true_left" (formula "4"))
                                    (rule "replace_known_left" (formula "5") (term "1") (ifseqformula "3"))
                                    (builtin "One Step Simplification" (formula "5"))
                                    (rule "true_left" (formula "5"))
                                    (rule "replace_known_left" (formula "4") (term "1") (ifseqformula "3"))
                                    (builtin "One Step Simplification" (formula "4"))
                                    (rule "true_left" (formula "4"))
                                    (rule "inEqSimp_strengthen1" (formula "3") (ifseqformula "30"))
                                    (rule "inEqSimp_contradEq7" (formula "30") (ifseqformula "3"))
                                    (rule "polySimp_mulComm0" (formula "30") (term "1,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "30") (term "0,0"))
                                    (rule "add_literals" (formula "30") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "30") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "30") (term "0,0"))
                                    (rule "leq_literals" (formula "30") (term "0"))
                                    (builtin "One Step Simplification" (formula "30"))
                                    (rule "false_right" (formula "30"))
                                    (rule "allLeft" (formula "2") (inst "t=i_0"))
                                    (rule "exLeft" (formula "2") (inst "sk=j_136"))
                                    (rule "andLeft" (formula "2"))
                                    (rule "andLeft" (formula "2"))
                                    (rule "inEqSimp_commuteGeq" (formula "4") (term "1,0,0"))
                                    (rule "inEqSimp_commuteGeq" (formula "3") (term "1,0,0"))
                                    (rule "inEqSimp_commuteGeq" (formula "2") (term "1,0,0"))
                                    (rule "inEqSimp_contradInEq1" (formula "2") (term "0,0,0") (ifseqformula "12"))
                                    (rule "qeq_literals" (formula "2") (term "0,0,0,0"))
                                    (builtin "One Step Simplification" (formula "2"))
                                    (rule "inEqSimp_contradInEq1" (formula "4") (term "1,0,0") (ifseqformula "13"))
                                    (rule "inEqSimp_homoInEq1" (formula "4") (term "0,1,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "4") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "4") (term "1,1,0,0,1,0,0"))
                                    (rule "times_zero_1" (formula "4") (term "1,0,0,1,0,0"))
                                    (rule "add_zero_right" (formula "4") (term "0,0,1,0,0"))
                                    (rule "leq_literals" (formula "4") (term "0,1,0,0"))
                                    (builtin "One Step Simplification" (formula "4"))
                                    (rule "inEqSimp_contradInEq1" (formula "3") (term "0,0,0") (ifseqformula "12"))
                                    (rule "qeq_literals" (formula "3") (term "0,0,0,0"))
                                    (builtin "One Step Simplification" (formula "3"))
                                    (rule "inEqSimp_contradInEq1" (formula "2") (term "0,0") (ifseqformula "13"))
                                    (rule "inEqSimp_homoInEq1" (formula "2") (term "0,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0,0,0"))
                                    (rule "add_literals" (formula "2") (term "1,1,0,0,0,0"))
                                    (rule "times_zero_1" (formula "2") (term "1,0,0,0,0"))
                                    (rule "add_zero_right" (formula "2") (term "0,0,0,0"))
                                    (rule "leq_literals" (formula "2") (term "0,0,0"))
                                    (builtin "One Step Simplification" (formula "2"))
                                    (rule "inEqSimp_contradInEq1" (formula "4") (term "0,0") (ifseqformula "12"))
                                    (rule "qeq_literals" (formula "4") (term "0,0,0"))
                                    (builtin "One Step Simplification" (formula "4"))
                                    (rule "inEqSimp_contradInEq1" (formula "3") (term "0,0") (ifseqformula "13"))
                                    (rule "inEqSimp_homoInEq1" (formula "3") (term "0,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0,0,0"))
                                    (rule "add_literals" (formula "3") (term "1,1,0,0,0,0"))
                                    (rule "times_zero_1" (formula "3") (term "1,0,0,0,0"))
                                    (rule "add_zero_right" (formula "3") (term "0,0,0,0"))
                                    (rule "leq_literals" (formula "3") (term "0,0,0"))
                                    (builtin "One Step Simplification" (formula "3"))
                                    (rule "inEqSimp_contradInEq1" (formula "2") (term "0") (ifseqformula "6"))
                                    (rule "inEqSimp_homoInEq1" (formula "2") (term "0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0,0"))
                                    (rule "add_literals" (formula "2") (term "1,1,0,0,0"))
                                    (rule "times_zero_1" (formula "2") (term "1,0,0,0"))
                                    (rule "add_zero_right" (formula "2") (term "0,0,0"))
                                    (rule "leq_literals" (formula "2") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "2"))
                                    (rule "notLeft" (formula "2"))
                                    (rule "inEqSimp_contradInEq1" (formula "2") (term "0") (ifseqformula "5"))
                                    (rule "inEqSimp_homoInEq1" (formula "2") (term "0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0,0"))
                                    (rule "add_literals" (formula "2") (term "1,1,0,0,0"))
                                    (rule "times_zero_1" (formula "2") (term "1,0,0,0"))
                                    (rule "add_zero_right" (formula "2") (term "0,0,0"))
                                    (rule "leq_literals" (formula "2") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "2"))
                                    (rule "inEqSimp_contradInEq1" (formula "3") (term "0") (ifseqformula "5"))
                                    (rule "inEqSimp_homoInEq1" (formula "3") (term "0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0,0"))
                                    (rule "add_literals" (formula "3") (term "1,1,0,0,0"))
                                    (rule "times_zero_1" (formula "3") (term "1,0,0,0"))
                                    (rule "add_zero_right" (formula "3") (term "0,0,0"))
                                    (rule "leq_literals" (formula "3") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "3"))
                                    (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "3"))
                                    (rule "times_zero_1" (formula "2") (term "0,0"))
                                    (rule "add_zero_left" (formula "2") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                    (rule "mul_literals" (formula "2") (term "1"))
                                    (rule "inEqSimp_subsumption1" (formula "12") (ifseqformula "2"))
                                    (rule "leq_literals" (formula "12") (term "0"))
                                    (builtin "One Step Simplification" (formula "12"))
                                    (rule "true_left" (formula "12"))
                                    (rule "allLeft" (formula "14") (inst "t=j_136"))
                                    (rule "replace_known_right" (formula "14") (term "1") (ifseqformula "33"))
                                    (builtin "One Step Simplification" (formula "14"))
                                    (rule "inEqSimp_contradInEq1" (formula "14") (term "0") (ifseqformula "3"))
                                    (rule "qeq_literals" (formula "14") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "14"))
                                    (rule "inEqSimp_contradInEq1" (formula "4") (ifseqformula "14"))
                                    (rule "andLeft" (formula "4"))
                                    (rule "inEqSimp_homoInEq1" (formula "4"))
                                    (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
                                    (rule "polySimp_rightDist" (formula "4") (term "1,0"))
                                    (rule "mul_literals" (formula "4") (term "0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "4") (term "0"))
                                    (rule "polySimp_addComm0" (formula "4") (term "0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "4") (term "0"))
                                    (rule "add_literals" (formula "4") (term "1,1,0"))
                                    (rule "times_zero_1" (formula "4") (term "1,0"))
                                    (rule "add_zero_right" (formula "4") (term "0"))
                                    (rule "leq_literals" (formula "4"))
                                    (rule "closeFalse" (formula "4"))
                                 )
                                 (branch "CUT: b[i_0] ≥ a[i_0] FALSE"
                                    (builtin "One Step Simplification" (formula "3"))
                                    (rule "notLeft" (formula "3"))
                                    (rule "replace_known_right" (formula "4") (term "1") (ifseqformula "32"))
                                    (builtin "One Step Simplification" (formula "4"))
                                    (rule "replace_known_right" (formula "3") (term "1") (ifseqformula "32"))
                                    (builtin "One Step Simplification" (formula "3"))
                                    (rule "inEqSimp_geqRight" (formula "32"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                    (rule "mul_literals" (formula "1") (term "0,1"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                    (rule "inEqSimp_contradEq3" (formula "33") (ifseqformula "1"))
                                    (rule "polySimp_mulComm0" (formula "33") (term "1,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "33") (term "0,0"))
                                    (rule "add_literals" (formula "33") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "33") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "33") (term "0,0"))
                                    (rule "qeq_literals" (formula "33") (term "0"))
                                    (builtin "One Step Simplification" (formula "33"))
                                    (rule "false_right" (formula "33"))
                                    (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "5"))
                                    (rule "times_zero_1" (formula "4") (term "0,0"))
                                    (rule "add_zero_left" (formula "4") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                                    (rule "mul_literals" (formula "4") (term "1"))
                                    (rule "inEqSimp_subsumption1" (formula "12") (ifseqformula "4"))
                                    (rule "leq_literals" (formula "12") (term "0"))
                                    (builtin "One Step Simplification" (formula "12"))
                                    (rule "true_left" (formula "12"))
                                    (rule "allLeft" (formula "14") (inst "t=j_135"))
                                    (rule "replace_known_right" (formula "14") (term "1") (ifseqformula "33"))
                                    (builtin "One Step Simplification" (formula "14"))
                                    (rule "inEqSimp_contradInEq1" (formula "14") (term "0") (ifseqformula "5"))
                                    (rule "qeq_literals" (formula "14") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "14"))
                                    (rule "inEqSimp_contradInEq1" (formula "6") (ifseqformula "14"))
                                    (rule "andLeft" (formula "6"))
                                    (rule "inEqSimp_homoInEq1" (formula "6"))
                                    (rule "polySimp_mulComm0" (formula "6") (term "1,0"))
                                    (rule "polySimp_rightDist" (formula "6") (term "1,0"))
                                    (rule "mul_literals" (formula "6") (term "0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "6") (term "0"))
                                    (rule "polySimp_addComm0" (formula "6") (term "0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "6") (term "0"))
                                    (rule "add_literals" (formula "6") (term "1,1,0"))
                                    (rule "times_zero_1" (formula "6") (term "1,0"))
                                    (rule "add_zero_right" (formula "6") (term "0"))
                                    (rule "leq_literals" (formula "6"))
                                    (rule "closeFalse" (formula "6"))
                                 )
                              )
                           )
                           (branch "Case 2"
                              (rule "replace_known_right" (formula "29") (term "0,1") (ifseqformula "31"))
                              (builtin "One Step Simplification" (formula "29"))
                              (rule "notLeft" (formula "29"))
                              (rule "inEqSimp_leqRight" (formula "30"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                              (rule "inEqSimp_leqRight" (formula "30"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0"))
                              (rule "add_zero_left" (formula "1") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                              (rule "polySimp_mulComm0" (formula "2") (term "1"))
                              (rule "polySimp_rightDist" (formula "2") (term "1"))
                              (rule "mul_literals" (formula "2") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                              (rule "replace_known_left" (formula "28") (term "0") (ifseqformula "2"))
                              (builtin "One Step Simplification" (formula "28"))
                              (rule "andLeft" (formula "28"))
                              (rule "notLeft" (formula "29"))
                              (rule "replace_known_left" (formula "30") (term "1") (ifseqformula "28"))
                              (builtin "One Step Simplification" (formula "30"))
                              (rule "applyEq" (formula "2") (term "1,1") (ifseqformula "28"))
                              (rule "applyEq" (formula "30") (term "1") (ifseqformula "28"))
                              (rule "applyEq" (formula "26") (term "0") (ifseqformula "28"))
                              (rule "applyEq" (formula "1") (term "0,0,0") (ifseqformula "28"))
                              (rule "applyEq" (formula "31") (term "1") (ifseqformula "28"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                              (rule "polySimp_elimOne" (formula "1") (term "1"))
                              (rule "inEqSimp_contradEq7" (formula "30") (ifseqformula "1"))
                              (rule "polySimp_mulComm0" (formula "30") (term "1,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "30") (term "0,0"))
                              (rule "add_literals" (formula "30") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "30") (term "1,0,0"))
                              (rule "add_zero_right" (formula "30") (term "0,0"))
                              (rule "leq_literals" (formula "30") (term "0"))
                              (builtin "One Step Simplification" (formula "30"))
                              (rule "false_right" (formula "30"))
                              (rule "inEqSimp_subsumption1" (formula "29") (ifseqformula "1"))
                              (rule "inEqSimp_homoInEq0" (formula "29") (term "0"))
                              (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0"))
                              (rule "add_literals" (formula "29") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "29") (term "1,0,0"))
                              (rule "add_zero_right" (formula "29") (term "0,0"))
                              (rule "qeq_literals" (formula "29") (term "0"))
                              (builtin "One Step Simplification" (formula "29"))
                              (rule "true_left" (formula "29"))
                              (rule "ex_pull_out3" (formula "3") (term "1,0"))
                              (rule "cnf_rightDist" (formula "3") (term "0,1,0"))
                              (rule "commute_or" (formula "3") (term "1,0,1,0"))
                              (rule "cnf_rightDist" (formula "3") (term "0,0,1,0"))
                              (rule "commute_or" (formula "3") (term "1,0,0,1,0"))
                              (rule "ex_pull_out3" (formula "2") (term "1,0"))
                              (rule "cnf_rightDist" (formula "2") (term "0,1,0"))
                              (rule "commute_or" (formula "2") (term "1,0,1,0"))
                              (rule "cnf_rightDist" (formula "2") (term "0,0,1,0"))
                              (rule "commute_or" (formula "2") (term "1,0,0,1,0"))
                              (rule "ex_pull_out3" (formula "3") (term "0"))
                              (rule "cnf_rightDist" (formula "3") (term "0,0"))
                              (rule "commute_or_2" (formula "3") (term "1,0,0"))
                              (rule "commute_or" (formula "3") (term "0,1,0,0"))
                              (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                              (rule "commute_or_2" (formula "3") (term "1,0,0,0"))
                              (rule "shift_paren_or" (formula "3") (term "0,0,0,0"))
                              (rule "commute_or" (formula "3") (term "0,1,0,0,0"))
                              (rule "ex_pull_out3" (formula "2") (term "0"))
                              (rule "cnf_rightDist" (formula "2") (term "0,0"))
                              (rule "commute_or_2" (formula "2") (term "1,0,0"))
                              (rule "commute_or" (formula "2") (term "0,1,0,0"))
                              (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                              (rule "commute_or_2" (formula "2") (term "1,0,0,0"))
                              (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
                              (rule "commute_or" (formula "2") (term "0,1,0,0,0"))
                              (rule "commute_and_2" (formula "3") (term "0,0"))
                              (rule "allLeft" (formula "10") (inst "t=j_126"))
                              (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "31"))
                              (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (term "0") (ifseqformula "6"))
                              (rule "qeq_literals" (formula "10") (term "0,0"))
                              (builtin "One Step Simplification" (formula "10"))
                              (rule "commute_and_2" (formula "2") (term "0,0"))
                              (rule "commute_and" (formula "3") (term "0,0,0"))
                              (rule "commute_and" (formula "2") (term "0,0,0"))
                              (rule "allLeft" (formula "3") (inst "t=j_126"))
                              (rule "exLeft" (formula "3") (inst "sk=j_127"))
                              (rule "andLeft" (formula "3"))
                              (rule "andLeft" (formula "3"))
                              (rule "inEqSimp_commuteGeq" (formula "5") (term "1,0,0"))
                              (rule "inEqSimp_commuteGeq" (formula "3") (term "1,0,0"))
                              (rule "inEqSimp_commuteGeq" (formula "4") (term "1,0,0"))
                              (rule "inEqSimp_contradInEq1" (formula "3") (term "0,0,0") (ifseqformula "9"))
                              (rule "qeq_literals" (formula "3") (term "0,0,0,0"))
                              (builtin "One Step Simplification" (formula "3"))
                              (rule "inEqSimp_contradInEq1" (formula "5") (term "1,0,0") (ifseqformula "10"))
                              (rule "inEqSimp_homoInEq1" (formula "5") (term "0,1,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "5") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "5") (term "1,1,0,0,1,0,0"))
                              (rule "times_zero_1" (formula "5") (term "1,0,0,1,0,0"))
                              (rule "add_zero_right" (formula "5") (term "0,0,1,0,0"))
                              (rule "leq_literals" (formula "5") (term "0,1,0,0"))
                              (builtin "One Step Simplification" (formula "5"))
                              (rule "inEqSimp_contradInEq1" (formula "4") (term "1,0,0") (ifseqformula "10"))
                              (rule "inEqSimp_homoInEq1" (formula "4") (term "0,1,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "4") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "4") (term "1,1,0,0,1,0,0"))
                              (rule "times_zero_1" (formula "4") (term "1,0,0,1,0,0"))
                              (rule "add_zero_right" (formula "4") (term "0,0,1,0,0"))
                              (rule "leq_literals" (formula "4") (term "0,1,0,0"))
                              (builtin "One Step Simplification" (formula "4"))
                              (rule "inEqSimp_contradInEq1" (formula "3") (term "0,0") (ifseqformula "10"))
                              (rule "inEqSimp_homoInEq1" (formula "3") (term "0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0,0,0"))
                              (rule "add_literals" (formula "3") (term "1,1,0,0,0,0"))
                              (rule "times_zero_1" (formula "3") (term "1,0,0,0,0"))
                              (rule "add_zero_right" (formula "3") (term "0,0,0,0"))
                              (rule "leq_literals" (formula "3") (term "0,0,0"))
                              (builtin "One Step Simplification" (formula "3"))
                              (rule "inEqSimp_contradInEq1" (formula "4") (term "0,0") (ifseqformula "9"))
                              (rule "qeq_literals" (formula "4") (term "0,0,0"))
                              (builtin "One Step Simplification" (formula "4"))
                              (rule "inEqSimp_contradInEq1" (formula "5") (term "0,0") (ifseqformula "9"))
                              (rule "qeq_literals" (formula "5") (term "0,0,0"))
                              (builtin "One Step Simplification" (formula "5"))
                              (rule "commute_or" (formula "4"))
                              (rule "commute_or" (formula "5"))
                              (rule "cut_direct" (formula "3") (term "0"))
                              (branch "CUT: b[j_126] ≥ a[j_126] TRUE"
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "true_left" (formula "4"))
                                 (rule "replace_known_left" (formula "5") (term "1") (ifseqformula "3"))
                                 (builtin "One Step Simplification" (formula "5"))
                                 (rule "true_left" (formula "5"))
                                 (rule "replace_known_left" (formula "4") (term "1") (ifseqformula "3"))
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "true_left" (formula "4"))
                                 (rule "inEqSimp_strengthen1" (formula "3") (ifseqformula "32"))
                                 (rule "inEqSimp_contradEq7" (formula "32") (ifseqformula "3"))
                                 (rule "polySimp_mulComm0" (formula "32") (term "1,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0"))
                                 (rule "add_literals" (formula "32") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "32") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "32") (term "0,0"))
                                 (rule "leq_literals" (formula "32") (term "0"))
                                 (builtin "One Step Simplification" (formula "32"))
                                 (rule "false_right" (formula "32"))
                                 (rule "allLeft" (formula "2") (inst "t=j_126"))
                                 (rule "exLeft" (formula "2") (inst "sk=j_130"))
                                 (rule "andLeft" (formula "2"))
                                 (rule "andLeft" (formula "2"))
                                 (rule "inEqSimp_commuteGeq" (formula "4") (term "1,0,0"))
                                 (rule "inEqSimp_commuteGeq" (formula "3") (term "1,0,0"))
                                 (rule "inEqSimp_commuteGeq" (formula "2") (term "1,0,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "4") (term "0,0,0") (ifseqformula "10"))
                                 (rule "qeq_literals" (formula "4") (term "0,0,0,0"))
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "inEqSimp_contradInEq1" (formula "2") (term "1,0") (ifseqformula "6"))
                                 (rule "inEqSimp_homoInEq1" (formula "2") (term "0,1,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0,1,0"))
                                 (rule "add_literals" (formula "2") (term "1,1,0,0,1,0"))
                                 (rule "times_zero_1" (formula "2") (term "1,0,0,1,0"))
                                 (rule "add_zero_right" (formula "2") (term "0,0,1,0"))
                                 (rule "leq_literals" (formula "2") (term "0,1,0"))
                                 (builtin "One Step Simplification" (formula "2"))
                                 (rule "inEqSimp_contradInEq1" (formula "3") (term "1,0,0") (ifseqformula "11"))
                                 (rule "inEqSimp_homoInEq1" (formula "3") (term "0,1,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "3") (term "1,1,0,0,1,0,0"))
                                 (rule "times_zero_1" (formula "3") (term "1,0,0,1,0,0"))
                                 (rule "add_zero_right" (formula "3") (term "0,0,1,0,0"))
                                 (rule "leq_literals" (formula "3") (term "0,1,0,0"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "inEqSimp_contradInEq1" (formula "4") (term "0,0") (ifseqformula "11"))
                                 (rule "inEqSimp_homoInEq1" (formula "4") (term "0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "4") (term "0,0,0,0"))
                                 (rule "add_literals" (formula "4") (term "1,1,0,0,0,0"))
                                 (rule "times_zero_1" (formula "4") (term "1,0,0,0,0"))
                                 (rule "add_zero_right" (formula "4") (term "0,0,0,0"))
                                 (rule "leq_literals" (formula "4") (term "0,0,0"))
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "inEqSimp_contradInEq1" (formula "2") (term "0,0") (ifseqformula "10"))
                                 (rule "qeq_literals" (formula "2") (term "0,0,0"))
                                 (builtin "One Step Simplification" (formula "2"))
                                 (rule "inEqSimp_contradInEq1" (formula "3") (term "0,0") (ifseqformula "10"))
                                 (rule "qeq_literals" (formula "3") (term "0,0,0"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "inEqSimp_contradInEq1" (formula "3") (term "0") (ifseqformula "6"))
                                 (rule "inEqSimp_homoInEq1" (formula "3") (term "0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0,0"))
                                 (rule "add_literals" (formula "3") (term "1,1,0,0,0"))
                                 (rule "times_zero_1" (formula "3") (term "1,0,0,0"))
                                 (rule "add_zero_right" (formula "3") (term "0,0,0"))
                                 (rule "leq_literals" (formula "3") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "inEqSimp_contradInEq1" (formula "4") (term "0") (ifseqformula "6"))
                                 (rule "inEqSimp_homoInEq1" (formula "4") (term "0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "4") (term "0,0,0"))
                                 (rule "add_literals" (formula "4") (term "1,1,0,0,0"))
                                 (rule "times_zero_1" (formula "4") (term "1,0,0,0"))
                                 (rule "add_zero_right" (formula "4") (term "0,0,0"))
                                 (rule "leq_literals" (formula "4") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "inEqSimp_contradInEq1" (formula "2") (term "0") (ifseqformula "11"))
                                 (rule "inEqSimp_homoInEq1" (formula "2") (term "0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0,0"))
                                 (rule "add_literals" (formula "2") (term "1,1,0,0,0"))
                                 (rule "times_zero_1" (formula "2") (term "1,0,0,0"))
                                 (rule "add_zero_right" (formula "2") (term "0,0,0"))
                                 (rule "leq_literals" (formula "2") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "2"))
                                 (rule "notLeft" (formula "2"))
                                 (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "3"))
                                 (rule "times_zero_1" (formula "2") (term "0,0"))
                                 (rule "add_zero_left" (formula "2") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                 (rule "mul_literals" (formula "2") (term "1"))
                                 (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "2"))
                                 (rule "leq_literals" (formula "10") (term "0"))
                                 (builtin "One Step Simplification" (formula "10"))
                                 (rule "true_left" (formula "10"))
                                 (rule "allLeft" (formula "14") (inst "t=j_130"))
                                 (rule "replace_known_right" (formula "14") (term "1") (ifseqformula "34"))
                                 (builtin "One Step Simplification" (formula "14"))
                                 (rule "inEqSimp_contradInEq1" (formula "14") (term "0") (ifseqformula "3"))
                                 (rule "qeq_literals" (formula "14") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "14"))
                                 (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "4"))
                                 (rule "polySimp_mulComm0" (formula "14") (term "0,0"))
                                 (rule "polySimp_addAssoc" (formula "14") (term "0"))
                                 (rule "polySimp_addComm0" (formula "14") (term "0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "14"))
                                 (rule "polySimp_mulComm0" (formula "14") (term "1"))
                                 (rule "polySimp_rightDist" (formula "14") (term "1"))
                                 (rule "polySimp_mulLiterals" (formula "14") (term "1,1"))
                                 (rule "mul_literals" (formula "14") (term "0,1"))
                                 (rule "polySimp_elimOne" (formula "14") (term "1,1"))
                                 (rule "inEqSimp_subsumption1" (formula "13") (ifseqformula "14"))
                                 (rule "inEqSimp_homoInEq0" (formula "13") (term "0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0"))
                                 (rule "add_literals" (formula "13") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "13") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "13") (term "0,0"))
                                 (rule "qeq_literals" (formula "13") (term "0"))
                                 (builtin "One Step Simplification" (formula "13"))
                                 (rule "true_left" (formula "13"))
                                 (rule "allLeft" (formula "7") (inst "t=i_0"))
                                 (rule "exLeft" (formula "7") (inst "sk=j_131"))
                                 (rule "andLeft" (formula "7"))
                                 (rule "andLeft" (formula "7"))
                                 (rule "inEqSimp_commuteGeq" (formula "9") (term "1,0,0"))
                                 (rule "inEqSimp_commuteGeq" (formula "7") (term "1,0,0"))
                                 (rule "inEqSimp_commuteGeq" (formula "8") (term "1,0,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "9") (term "0,0,0") (ifseqformula "14"))
                                 (rule "qeq_literals" (formula "9") (term "0,0,0,0"))
                                 (builtin "One Step Simplification" (formula "9"))
                                 (rule "inEqSimp_contradInEq1" (formula "8") (term "0,0,0") (ifseqformula "14"))
                                 (rule "qeq_literals" (formula "8") (term "0,0,0,0"))
                                 (builtin "One Step Simplification" (formula "8"))
                                 (rule "inEqSimp_contradInEq1" (formula "7") (term "0,0,0") (ifseqformula "14"))
                                 (rule "qeq_literals" (formula "7") (term "0,0,0,0"))
                                 (builtin "One Step Simplification" (formula "7"))
                                 (rule "inEqSimp_contradInEq1" (formula "9") (term "0,0") (ifseqformula "15"))
                                 (rule "inEqSimp_homoInEq1" (formula "9") (term "0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0,0,0"))
                                 (rule "add_literals" (formula "9") (term "1,1,0,0,0,0"))
                                 (rule "times_zero_1" (formula "9") (term "1,0,0,0,0"))
                                 (rule "add_zero_right" (formula "9") (term "0,0,0,0"))
                                 (rule "leq_literals" (formula "9") (term "0,0,0"))
                                 (builtin "One Step Simplification" (formula "9"))
                                 (rule "inEqSimp_contradInEq1" (formula "8") (term "0,0") (ifseqformula "15"))
                                 (rule "inEqSimp_homoInEq1" (formula "8") (term "0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0,0,0"))
                                 (rule "add_literals" (formula "8") (term "1,1,0,0,0,0"))
                                 (rule "times_zero_1" (formula "8") (term "1,0,0,0,0"))
                                 (rule "add_zero_right" (formula "8") (term "0,0,0,0"))
                                 (rule "leq_literals" (formula "8") (term "0,0,0"))
                                 (builtin "One Step Simplification" (formula "8"))
                                 (rule "inEqSimp_contradInEq1" (formula "7") (term "0,0") (ifseqformula "15"))
                                 (rule "inEqSimp_homoInEq1" (formula "7") (term "0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0,0,0"))
                                 (rule "add_literals" (formula "7") (term "1,1,0,0,0,0"))
                                 (rule "times_zero_1" (formula "7") (term "1,0,0,0,0"))
                                 (rule "add_zero_right" (formula "7") (term "0,0,0,0"))
                                 (rule "leq_literals" (formula "7") (term "0,0,0"))
                                 (builtin "One Step Simplification" (formula "7"))
                                 (rule "commute_or" (formula "9"))
                                 (rule "commute_or" (formula "8"))
                                 (rule "allLeft" (formula "5") (inst "t=i_0"))
                                 (rule "exLeft" (formula "5") (inst "sk=j_132"))
                                 (rule "andLeft" (formula "5"))
                                 (rule "andLeft" (formula "5"))
                                 (rule "inEqSimp_commuteGeq" (formula "7") (term "1,0,0"))
                                 (rule "inEqSimp_commuteGeq" (formula "6") (term "1,0,0"))
                                 (rule "inEqSimp_commuteGeq" (formula "5") (term "1,0,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "5") (term "0,0,0") (ifseqformula "17"))
                                 (rule "qeq_literals" (formula "5") (term "0,0,0,0"))
                                 (builtin "One Step Simplification" (formula "5"))
                                 (rule "inEqSimp_contradInEq1" (formula "7") (term "0,0,0") (ifseqformula "17"))
                                 (rule "qeq_literals" (formula "7") (term "0,0,0,0"))
                                 (builtin "One Step Simplification" (formula "7"))
                                 (rule "inEqSimp_contradInEq1" (formula "6") (term "0,0,0") (ifseqformula "17"))
                                 (rule "qeq_literals" (formula "6") (term "0,0,0,0"))
                                 (builtin "One Step Simplification" (formula "6"))
                                 (rule "inEqSimp_contradInEq1" (formula "5") (term "0,0") (ifseqformula "18"))
                                 (rule "inEqSimp_homoInEq1" (formula "5") (term "0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "5") (term "0,0,0,0"))
                                 (rule "add_literals" (formula "5") (term "1,1,0,0,0,0"))
                                 (rule "times_zero_1" (formula "5") (term "1,0,0,0,0"))
                                 (rule "add_zero_right" (formula "5") (term "0,0,0,0"))
                                 (rule "leq_literals" (formula "5") (term "0,0,0"))
                                 (builtin "One Step Simplification" (formula "5"))
                                 (rule "inEqSimp_contradInEq1" (formula "6") (term "0,0") (ifseqformula "18"))
                                 (rule "inEqSimp_homoInEq1" (formula "6") (term "0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0,0,0"))
                                 (rule "add_literals" (formula "6") (term "1,1,0,0,0,0"))
                                 (rule "times_zero_1" (formula "6") (term "1,0,0,0,0"))
                                 (rule "add_zero_right" (formula "6") (term "0,0,0,0"))
                                 (rule "leq_literals" (formula "6") (term "0,0,0"))
                                 (builtin "One Step Simplification" (formula "6"))
                                 (rule "inEqSimp_contradInEq1" (formula "7") (term "0,0") (ifseqformula "18"))
                                 (rule "inEqSimp_homoInEq1" (formula "7") (term "0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0,0,0"))
                                 (rule "add_literals" (formula "7") (term "1,1,0,0,0,0"))
                                 (rule "times_zero_1" (formula "7") (term "1,0,0,0,0"))
                                 (rule "add_zero_right" (formula "7") (term "0,0,0,0"))
                                 (rule "leq_literals" (formula "7") (term "0,0,0"))
                                 (builtin "One Step Simplification" (formula "7"))
                                 (rule "commute_or" (formula "6"))
                                 (rule "commute_or" (formula "7"))
                                 (rule "allLeft" (formula "13") (inst "t=Z(0(#))"))
                                 (rule "leq_literals" (formula "13") (term "0,0,0,1,0,0"))
                                 (builtin "One Step Simplification" (formula "13"))
                                 (rule "leq_literals" (formula "13") (term "0,0,0,1,0"))
                                 (builtin "One Step Simplification" (formula "13"))
                                 (rule "add_zero_right" (formula "13") (term "1,1,1,0"))
                                 (rule "leq_literals" (formula "13") (term "0,0,0,0,0,0"))
                                 (builtin "One Step Simplification" (formula "13"))
                                 (rule "exLeft" (formula "13") (inst "sk=j_133"))
                                 (rule "andLeft" (formula "13"))
                                 (rule "andLeft" (formula "13"))
                                 (rule "inEqSimp_commuteGeq" (formula "15") (term "0,0"))
                                 (rule "inEqSimp_commuteGeq" (formula "14") (term "0,0"))
                                 (rule "inEqSimp_commuteGeq" (formula "13") (term "0,0"))
                                 (rule "applyEq" (formula "14") (term "0,1,0") (ifseqformula "25"))
                                 (rule "inEqSimp_homoInEq1" (formula "14") (term "1,0"))
                                 (rule "polySimp_pullOutFactor1" (formula "14") (term "0,1,0"))
                                 (rule "add_literals" (formula "14") (term "1,0,1,0"))
                                 (rule "times_zero_1" (formula "14") (term "0,1,0"))
                                 (rule "leq_literals" (formula "14") (term "1,0"))
                                 (builtin "One Step Simplification" (formula "14"))
                                 (rule "true_left" (formula "14"))
                                 (rule "applyEq" (formula "13") (term "0,1,0") (ifseqformula "24"))
                                 (rule "inEqSimp_homoInEq1" (formula "13") (term "1,0"))
                                 (rule "polySimp_pullOutFactor1" (formula "13") (term "0,1,0"))
                                 (rule "add_literals" (formula "13") (term "1,0,1,0"))
                                 (rule "times_zero_1" (formula "13") (term "0,1,0"))
                                 (rule "leq_literals" (formula "13") (term "1,0"))
                                 (builtin "One Step Simplification" (formula "13"))
                                 (rule "true_left" (formula "13"))
                                 (rule "applyEq" (formula "13") (term "0,1,0") (ifseqformula "23"))
                                 (rule "inEqSimp_homoInEq1" (formula "13") (term "1,0"))
                                 (rule "polySimp_pullOutFactor1" (formula "13") (term "0,1,0"))
                                 (rule "add_literals" (formula "13") (term "1,0,1,0"))
                                 (rule "times_zero_1" (formula "13") (term "0,1,0"))
                                 (rule "leq_literals" (formula "13") (term "1,0"))
                                 (builtin "One Step Simplification" (formula "13"))
                                 (rule "true_left" (formula "13"))
                                 (rule "allLeft" (formula "8") (inst "t=Z(0(#))"))
                                 (rule "leq_literals" (formula "8") (term "0,0,0,1,0,0"))
                                 (builtin "One Step Simplification" (formula "8"))
                                 (rule "leq_literals" (formula "8") (term "0,0,0,1,0"))
                                 (builtin "One Step Simplification" (formula "8"))
                                 (rule "leq_literals" (formula "8") (term "0,0,0,0,0,0"))
                                 (builtin "One Step Simplification" (formula "8"))
                                 (rule "add_zero_right" (formula "8") (term "1,1,1,0"))
                                 (rule "exLeft" (formula "8") (inst "sk=j_134"))
                                 (rule "andLeft" (formula "8"))
                                 (rule "andLeft" (formula "8"))
                                 (rule "inEqSimp_commuteGeq" (formula "10") (term "0,0"))
                                 (rule "inEqSimp_commuteGeq" (formula "9") (term "0,0"))
                                 (rule "inEqSimp_commuteGeq" (formula "8") (term "0,0"))
                                 (rule "applyEq" (formula "10") (term "0,1,0") (ifseqformula "25"))
                                 (rule "inEqSimp_homoInEq0" (formula "10") (term "1,0"))
                                 (rule "polySimp_pullOutFactor1" (formula "10") (term "0,1,0"))
                                 (rule "add_literals" (formula "10") (term "1,0,1,0"))
                                 (rule "times_zero_1" (formula "10") (term "0,1,0"))
                                 (rule "qeq_literals" (formula "10") (term "1,0"))
                                 (builtin "One Step Simplification" (formula "10"))
                                 (rule "true_left" (formula "10"))
                                 (rule "applyEq" (formula "8") (term "0,1,0") (ifseqformula "24"))
                                 (rule "inEqSimp_homoInEq0" (formula "8") (term "1,0"))
                                 (rule "polySimp_pullOutFactor1" (formula "8") (term "0,1,0"))
                                 (rule "add_literals" (formula "8") (term "1,0,1,0"))
                                 (rule "times_zero_1" (formula "8") (term "0,1,0"))
                                 (rule "qeq_literals" (formula "8") (term "1,0"))
                                 (builtin "One Step Simplification" (formula "8"))
                                 (rule "true_left" (formula "8"))
                                 (rule "applyEq" (formula "8") (term "0,1,0") (ifseqformula "23"))
                                 (rule "inEqSimp_homoInEq0" (formula "8") (term "1,0"))
                                 (rule "polySimp_pullOutFactor1" (formula "8") (term "0,1,0"))
                                 (rule "add_literals" (formula "8") (term "1,0,1,0"))
                                 (rule "times_zero_1" (formula "8") (term "0,1,0"))
                                 (rule "qeq_literals" (formula "8") (term "1,0"))
                                 (builtin "One Step Simplification" (formula "8"))
                                 (rule "true_left" (formula "8"))
                                 (rule "cut_direct" (formula "10") (term "0"))
                                 (branch "CUT: b[i_0] ≥ a[i_0] TRUE"
                                    (builtin "One Step Simplification" (formula "11"))
                                    (rule "true_left" (formula "11"))
                                    (rule "replace_known_left" (formula "12") (term "1") (ifseqformula "10"))
                                    (builtin "One Step Simplification" (formula "12"))
                                    (rule "true_left" (formula "12"))
                                    (rule "replace_known_left" (formula "11") (term "1") (ifseqformula "10"))
                                    (builtin "One Step Simplification" (formula "11"))
                                    (rule "true_left" (formula "11"))
                                    (rule "inEqSimp_strengthen1" (formula "10") (ifseqformula "39"))
                                    (rule "inEqSimp_contradEq7" (formula "39") (ifseqformula "10"))
                                    (rule "polySimp_mulComm0" (formula "39") (term "1,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "39") (term "0,0"))
                                    (rule "add_literals" (formula "39") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "39") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "39") (term "0,0"))
                                    (rule "leq_literals" (formula "39") (term "0"))
                                    (builtin "One Step Simplification" (formula "39"))
                                    (rule "false_right" (formula "39"))
                                    (rule "inEqSimp_contradInEq1" (formula "7") (term "1") (ifseqformula "10"))
                                    (rule "inEqSimp_homoInEq1" (formula "7") (term "0,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0,1"))
                                    (rule "add_literals" (formula "7") (term "1,1,0,0,1"))
                                    (rule "times_zero_1" (formula "7") (term "1,0,0,1"))
                                    (rule "add_zero_right" (formula "7") (term "0,0,1"))
                                    (rule "leq_literals" (formula "7") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "7"))
                                    (rule "inEqSimp_contradInEq1" (formula "5") (term "0") (ifseqformula "10"))
                                    (rule "inEqSimp_homoInEq1" (formula "5") (term "0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "5") (term "0,0,0"))
                                    (rule "add_literals" (formula "5") (term "1,1,0,0,0"))
                                    (rule "times_zero_1" (formula "5") (term "1,0,0,0"))
                                    (rule "add_zero_right" (formula "5") (term "0,0,0"))
                                    (rule "leq_literals" (formula "5") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "5"))
                                    (rule "notLeft" (formula "5"))
                                    (rule "inEqSimp_contradInEq1" (formula "5") (term "1") (ifseqformula "9"))
                                    (rule "inEqSimp_homoInEq1" (formula "5") (term "0,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "5") (term "0,0,1"))
                                    (rule "add_literals" (formula "5") (term "1,1,0,0,1"))
                                    (rule "times_zero_1" (formula "5") (term "1,0,0,1"))
                                    (rule "add_zero_right" (formula "5") (term "0,0,1"))
                                    (rule "leq_literals" (formula "5") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "5"))
                                    (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "6"))
                                    (rule "times_zero_1" (formula "5") (term "0,0"))
                                    (rule "add_zero_left" (formula "5") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                                    (rule "mul_literals" (formula "5") (term "1"))
                                    (rule "inEqSimp_subsumption1" (formula "15") (ifseqformula "5"))
                                    (rule "leq_literals" (formula "15") (term "0"))
                                    (builtin "One Step Simplification" (formula "15"))
                                    (rule "true_left" (formula "15"))
                                    (rule "allLeft" (formula "18") (inst "t=j_132"))
                                    (rule "replace_known_right" (formula "18") (term "1") (ifseqformula "38"))
                                    (builtin "One Step Simplification" (formula "18"))
                                    (rule "inEqSimp_contradInEq1" (formula "18") (term "0") (ifseqformula "6"))
                                    (rule "qeq_literals" (formula "18") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "18"))
                                    (rule "inEqSimp_contradInEq0" (formula "18") (ifseqformula "7"))
                                    (rule "andLeft" (formula "18"))
                                    (rule "inEqSimp_homoInEq1" (formula "18"))
                                    (rule "polySimp_mulComm0" (formula "18") (term "1,0"))
                                    (rule "polySimp_rightDist" (formula "18") (term "1,0"))
                                    (rule "mul_literals" (formula "18") (term "0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "18") (term "0"))
                                    (rule "polySimp_addComm0" (formula "18") (term "0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "18") (term "0"))
                                    (rule "add_literals" (formula "18") (term "1,1,0"))
                                    (rule "times_zero_1" (formula "18") (term "1,0"))
                                    (rule "add_zero_right" (formula "18") (term "0"))
                                    (rule "leq_literals" (formula "18"))
                                    (rule "closeFalse" (formula "18"))
                                 )
                                 (branch "CUT: b[i_0] ≥ a[i_0] FALSE"
                                    (builtin "One Step Simplification" (formula "10"))
                                    (rule "notLeft" (formula "10"))
                                    (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "40"))
                                    (builtin "One Step Simplification" (formula "10"))
                                    (rule "replace_known_right" (formula "11") (term "1") (ifseqformula "40"))
                                    (builtin "One Step Simplification" (formula "11"))
                                    (rule "inEqSimp_geqRight" (formula "40"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                    (rule "mul_literals" (formula "1") (term "0,1"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                    (rule "inEqSimp_contradEq3" (formula "42") (ifseqformula "1"))
                                    (rule "polySimp_mulComm0" (formula "42") (term "1,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "42") (term "0,0"))
                                    (rule "add_literals" (formula "42") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "42") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "42") (term "0,0"))
                                    (rule "qeq_literals" (formula "42") (term "0"))
                                    (builtin "One Step Simplification" (formula "42"))
                                    (rule "false_right" (formula "42"))
                                    (rule "inEqSimp_subsumption0" (formula "7") (term "1") (ifseqformula "1"))
                                    (rule "inEqSimp_homoInEq0" (formula "7") (term "0,1"))
                                    (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1"))
                                    (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1"))
                                    (rule "mul_literals" (formula "7") (term "0,1,0,0,1"))
                                    (rule "polySimp_addAssoc" (formula "7") (term "0,0,1"))
                                    (rule "polySimp_addComm0" (formula "7") (term "0,0,0,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0,1"))
                                    (rule "add_literals" (formula "7") (term "1,1,0,0,1"))
                                    (rule "times_zero_1" (formula "7") (term "1,0,0,1"))
                                    (rule "add_zero_right" (formula "7") (term "0,0,1"))
                                    (rule "qeq_literals" (formula "7") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "7"))
                                    (rule "true_left" (formula "7"))
                                    (rule "inEqSimp_subsumption0" (formula "7") (term "1") (ifseqformula "1"))
                                    (rule "inEqSimp_homoInEq0" (formula "7") (term "0,1"))
                                    (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1"))
                                    (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1"))
                                    (rule "mul_literals" (formula "7") (term "0,1,0,0,1"))
                                    (rule "polySimp_addAssoc" (formula "7") (term "0,0,1"))
                                    (rule "polySimp_addComm0" (formula "7") (term "0,0,0,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0,1"))
                                    (rule "add_literals" (formula "7") (term "1,1,0,0,1"))
                                    (rule "times_zero_1" (formula "7") (term "1,0,0,1"))
                                    (rule "add_zero_right" (formula "7") (term "0,0,1"))
                                    (rule "qeq_literals" (formula "7") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "7"))
                                    (rule "true_left" (formula "7"))
                                    (rule "inEqSimp_subsumption0" (formula "6") (term "0") (ifseqformula "1"))
                                    (rule "inEqSimp_homoInEq0" (formula "6") (term "0,0"))
                                    (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "6") (term "1,0,0,0"))
                                    (rule "mul_literals" (formula "6") (term "0,1,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "6") (term "0,0,0"))
                                    (rule "polySimp_addComm0" (formula "6") (term "0,0,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0,0"))
                                    (rule "add_literals" (formula "6") (term "1,1,0,0,0"))
                                    (rule "times_zero_1" (formula "6") (term "1,0,0,0"))
                                    (rule "add_zero_right" (formula "6") (term "0,0,0"))
                                    (rule "qeq_literals" (formula "6") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "6"))
                                    (rule "true_left" (formula "6"))
                                    (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "9"))
                                    (rule "times_zero_1" (formula "8") (term "0,0"))
                                    (rule "add_zero_left" (formula "8") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                                    (rule "mul_literals" (formula "8") (term "1"))
                                    (rule "inEqSimp_subsumption1" (formula "15") (ifseqformula "8"))
                                    (rule "leq_literals" (formula "15") (term "0"))
                                    (builtin "One Step Simplification" (formula "15"))
                                    (rule "true_left" (formula "15"))
                                    (rule "allLeft" (formula "18") (inst "t=j_131"))
                                    (rule "replace_known_right" (formula "18") (term "1") (ifseqformula "38"))
                                    (builtin "One Step Simplification" (formula "18"))
                                    (rule "inEqSimp_contradInEq1" (formula "18") (term "0") (ifseqformula "9"))
                                    (rule "qeq_literals" (formula "18") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "18"))
                                    (rule "inEqSimp_contradInEq1" (formula "10") (ifseqformula "18"))
                                    (rule "andLeft" (formula "10"))
                                    (rule "inEqSimp_homoInEq1" (formula "10"))
                                    (rule "polySimp_mulComm0" (formula "10") (term "1,0"))
                                    (rule "polySimp_rightDist" (formula "10") (term "1,0"))
                                    (rule "mul_literals" (formula "10") (term "0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "10") (term "0"))
                                    (rule "polySimp_addComm0" (formula "10") (term "0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "10") (term "0"))
                                    (rule "add_literals" (formula "10") (term "1,1,0"))
                                    (rule "times_zero_1" (formula "10") (term "1,0"))
                                    (rule "add_zero_right" (formula "10") (term "0"))
                                    (rule "leq_literals" (formula "10"))
                                    (rule "closeFalse" (formula "10"))
                                 )
                              )
                              (branch "CUT: b[j_126] ≥ a[j_126] FALSE"
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "notLeft" (formula "3"))
                                 (rule "replace_known_right" (formula "3") (term "1") (ifseqformula "33"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "replace_known_right" (formula "4") (term "1") (ifseqformula "33"))
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "inEqSimp_geqRight" (formula "33"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                 (rule "mul_literals" (formula "1") (term "0,1"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                 (rule "inEqSimp_contradEq3" (formula "35") (ifseqformula "1"))
                                 (rule "polySimp_mulComm0" (formula "35") (term "1,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,0"))
                                 (rule "add_literals" (formula "35") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "35") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "35") (term "0,0"))
                                 (rule "qeq_literals" (formula "35") (term "0"))
                                 (builtin "One Step Simplification" (formula "35"))
                                 (rule "false_right" (formula "35"))
                                 (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "5"))
                                 (rule "times_zero_1" (formula "4") (term "0,0"))
                                 (rule "add_zero_left" (formula "4") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                                 (rule "mul_literals" (formula "4") (term "1"))
                                 (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "4"))
                                 (rule "leq_literals" (formula "10") (term "0"))
                                 (builtin "One Step Simplification" (formula "10"))
                                 (rule "true_left" (formula "10"))
                                 (rule "allLeft" (formula "14") (inst "t=j_127"))
                                 (rule "replace_known_right" (formula "14") (term "1") (ifseqformula "34"))
                                 (builtin "One Step Simplification" (formula "14"))
                                 (rule "inEqSimp_contradInEq1" (formula "14") (term "0") (ifseqformula "5"))
                                 (rule "qeq_literals" (formula "14") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "14"))
                                 (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "6"))
                                 (rule "polySimp_mulComm0" (formula "14") (term "0,0"))
                                 (rule "polySimp_addAssoc" (formula "14") (term "0"))
                                 (rule "polySimp_addComm0" (formula "14") (term "0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "14"))
                                 (rule "polySimp_mulComm0" (formula "14") (term "1"))
                                 (rule "polySimp_rightDist" (formula "14") (term "1"))
                                 (rule "polySimp_mulLiterals" (formula "14") (term "1,1"))
                                 (rule "mul_literals" (formula "14") (term "0,1"))
                                 (rule "polySimp_elimOne" (formula "14") (term "1,1"))
                                 (rule "inEqSimp_subsumption1" (formula "13") (ifseqformula "14"))
                                 (rule "inEqSimp_homoInEq0" (formula "13") (term "0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0"))
                                 (rule "add_literals" (formula "13") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "13") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "13") (term "0,0"))
                                 (rule "qeq_literals" (formula "13") (term "0"))
                                 (builtin "One Step Simplification" (formula "13"))
                                 (rule "true_left" (formula "13"))
                                 (rule "allLeft" (formula "7") (inst "t=i_0"))
                                 (rule "exLeft" (formula "7") (inst "sk=j_128"))
                                 (rule "andLeft" (formula "7"))
                                 (rule "andLeft" (formula "7"))
                                 (rule "inEqSimp_commuteGeq" (formula "9") (term "1,0,0"))
                                 (rule "inEqSimp_commuteGeq" (formula "8") (term "1,0,0"))
                                 (rule "inEqSimp_commuteGeq" (formula "7") (term "1,0,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "9") (term "0,0,0") (ifseqformula "14"))
                                 (rule "qeq_literals" (formula "9") (term "0,0,0,0"))
                                 (builtin "One Step Simplification" (formula "9"))
                                 (rule "inEqSimp_contradInEq1" (formula "7") (term "0,0,0") (ifseqformula "14"))
                                 (rule "qeq_literals" (formula "7") (term "0,0,0,0"))
                                 (builtin "One Step Simplification" (formula "7"))
                                 (rule "inEqSimp_contradInEq1" (formula "8") (term "0,0,0") (ifseqformula "14"))
                                 (rule "qeq_literals" (formula "8") (term "0,0,0,0"))
                                 (builtin "One Step Simplification" (formula "8"))
                                 (rule "inEqSimp_contradInEq1" (formula "9") (term "0,0") (ifseqformula "15"))
                                 (rule "inEqSimp_homoInEq1" (formula "9") (term "0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0,0,0"))
                                 (rule "add_literals" (formula "9") (term "1,1,0,0,0,0"))
                                 (rule "times_zero_1" (formula "9") (term "1,0,0,0,0"))
                                 (rule "add_zero_right" (formula "9") (term "0,0,0,0"))
                                 (rule "leq_literals" (formula "9") (term "0,0,0"))
                                 (builtin "One Step Simplification" (formula "9"))
                                 (rule "inEqSimp_contradInEq1" (formula "8") (term "0,0") (ifseqformula "15"))
                                 (rule "inEqSimp_homoInEq1" (formula "8") (term "0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0,0,0"))
                                 (rule "add_literals" (formula "8") (term "1,1,0,0,0,0"))
                                 (rule "times_zero_1" (formula "8") (term "1,0,0,0,0"))
                                 (rule "add_zero_right" (formula "8") (term "0,0,0,0"))
                                 (rule "leq_literals" (formula "8") (term "0,0,0"))
                                 (builtin "One Step Simplification" (formula "8"))
                                 (rule "inEqSimp_contradInEq1" (formula "7") (term "0,0") (ifseqformula "15"))
                                 (rule "inEqSimp_homoInEq1" (formula "7") (term "0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0,0,0"))
                                 (rule "add_literals" (formula "7") (term "1,1,0,0,0,0"))
                                 (rule "times_zero_1" (formula "7") (term "1,0,0,0,0"))
                                 (rule "add_zero_right" (formula "7") (term "0,0,0,0"))
                                 (rule "leq_literals" (formula "7") (term "0,0,0"))
                                 (builtin "One Step Simplification" (formula "7"))
                                 (rule "commute_or" (formula "9"))
                                 (rule "commute_or" (formula "8"))
                                 (rule "allLeft" (formula "3") (inst "t=i_0"))
                                 (rule "exLeft" (formula "3") (inst "sk=j_129"))
                                 (rule "andLeft" (formula "3"))
                                 (rule "andLeft" (formula "3"))
                                 (rule "inEqSimp_commuteGeq" (formula "5") (term "1,0,0"))
                                 (rule "inEqSimp_commuteGeq" (formula "4") (term "1,0,0"))
                                 (rule "inEqSimp_commuteGeq" (formula "3") (term "1,0,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "5") (term "0,0,0") (ifseqformula "17"))
                                 (rule "qeq_literals" (formula "5") (term "0,0,0,0"))
                                 (builtin "One Step Simplification" (formula "5"))
                                 (rule "inEqSimp_contradInEq1" (formula "3") (term "0,0,0") (ifseqformula "17"))
                                 (rule "qeq_literals" (formula "3") (term "0,0,0,0"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "inEqSimp_contradInEq1" (formula "4") (term "1,0,0") (ifseqformula "18"))
                                 (rule "inEqSimp_homoInEq1" (formula "4") (term "0,1,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "4") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "4") (term "1,1,0,0,1,0,0"))
                                 (rule "times_zero_1" (formula "4") (term "1,0,0,1,0,0"))
                                 (rule "add_zero_right" (formula "4") (term "0,0,1,0,0"))
                                 (rule "leq_literals" (formula "4") (term "0,1,0,0"))
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "inEqSimp_contradInEq1" (formula "5") (term "0,0") (ifseqformula "18"))
                                 (rule "inEqSimp_homoInEq1" (formula "5") (term "0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "5") (term "0,0,0,0"))
                                 (rule "add_literals" (formula "5") (term "1,1,0,0,0,0"))
                                 (rule "times_zero_1" (formula "5") (term "1,0,0,0,0"))
                                 (rule "add_zero_right" (formula "5") (term "0,0,0,0"))
                                 (rule "leq_literals" (formula "5") (term "0,0,0"))
                                 (builtin "One Step Simplification" (formula "5"))
                                 (rule "inEqSimp_contradInEq1" (formula "3") (term "0,0") (ifseqformula "18"))
                                 (rule "inEqSimp_homoInEq1" (formula "3") (term "0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0,0,0"))
                                 (rule "add_literals" (formula "3") (term "1,1,0,0,0,0"))
                                 (rule "times_zero_1" (formula "3") (term "1,0,0,0,0"))
                                 (rule "add_zero_right" (formula "3") (term "0,0,0,0"))
                                 (rule "leq_literals" (formula "3") (term "0,0,0"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "inEqSimp_contradInEq1" (formula "4") (term "0,0") (ifseqformula "17"))
                                 (rule "qeq_literals" (formula "4") (term "0,0,0"))
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "commute_or" (formula "5"))
                                 (rule "commute_or" (formula "4"))
                                 (rule "cut_direct" (formula "10") (term "0"))
                                 (branch "CUT: b[i_0] ≥ a[i_0] TRUE"
                                    (builtin "One Step Simplification" (formula "11"))
                                    (rule "true_left" (formula "11"))
                                    (rule "replace_known_left" (formula "12") (term "1") (ifseqformula "10"))
                                    (builtin "One Step Simplification" (formula "12"))
                                    (rule "true_left" (formula "12"))
                                    (rule "replace_known_left" (formula "11") (term "1") (ifseqformula "10"))
                                    (builtin "One Step Simplification" (formula "11"))
                                    (rule "true_left" (formula "11"))
                                    (rule "inEqSimp_strengthen1" (formula "10") (ifseqformula "39"))
                                    (rule "inEqSimp_contradEq7" (formula "39") (ifseqformula "10"))
                                    (rule "polySimp_mulComm0" (formula "39") (term "1,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "39") (term "0,0"))
                                    (rule "add_literals" (formula "39") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "39") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "39") (term "0,0"))
                                    (rule "leq_literals" (formula "39") (term "0"))
                                    (builtin "One Step Simplification" (formula "39"))
                                    (rule "false_right" (formula "39"))
                                    (rule "inEqSimp_contradInEq1" (formula "4") (term "1") (ifseqformula "10"))
                                    (rule "inEqSimp_homoInEq1" (formula "4") (term "0,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "4") (term "0,0,1"))
                                    (rule "add_literals" (formula "4") (term "1,1,0,0,1"))
                                    (rule "times_zero_1" (formula "4") (term "1,0,0,1"))
                                    (rule "add_zero_right" (formula "4") (term "0,0,1"))
                                    (rule "leq_literals" (formula "4") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "4"))
                                    (rule "inEqSimp_contradInEq1" (formula "3") (term "0") (ifseqformula "10"))
                                    (rule "inEqSimp_homoInEq1" (formula "3") (term "0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0,0"))
                                    (rule "add_literals" (formula "3") (term "1,1,0,0,0"))
                                    (rule "times_zero_1" (formula "3") (term "1,0,0,0"))
                                    (rule "add_zero_right" (formula "3") (term "0,0,0"))
                                    (rule "leq_literals" (formula "3") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "3"))
                                    (rule "notLeft" (formula "3"))
                                    (rule "inEqSimp_contradInEq1" (formula "4") (term "1") (ifseqformula "9"))
                                    (rule "inEqSimp_homoInEq1" (formula "4") (term "0,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "4") (term "0,0,1"))
                                    (rule "add_literals" (formula "4") (term "1,1,0,0,1"))
                                    (rule "times_zero_1" (formula "4") (term "1,0,0,1"))
                                    (rule "add_zero_right" (formula "4") (term "0,0,1"))
                                    (rule "leq_literals" (formula "4") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "4"))
                                    (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "4"))
                                    (rule "times_zero_1" (formula "3") (term "0,0"))
                                    (rule "add_zero_left" (formula "3") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                                    (rule "mul_literals" (formula "3") (term "1"))
                                    (rule "inEqSimp_subsumption1" (formula "15") (ifseqformula "3"))
                                    (rule "leq_literals" (formula "15") (term "0"))
                                    (builtin "One Step Simplification" (formula "15"))
                                    (rule "true_left" (formula "15"))
                                    (rule "allLeft" (formula "18") (inst "t=j_129"))
                                    (rule "replace_known_right" (formula "18") (term "1") (ifseqformula "38"))
                                    (builtin "One Step Simplification" (formula "18"))
                                    (rule "inEqSimp_contradInEq0" (formula "18") (term "1") (ifseqformula "5"))
                                    (rule "inEqSimp_homoInEq1" (formula "18") (term "0,1"))
                                    (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1"))
                                    (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1"))
                                    (rule "mul_literals" (formula "18") (term "0,1,0,0,1"))
                                    (rule "polySimp_addAssoc" (formula "18") (term "0,0,1"))
                                    (rule "polySimp_addComm0" (formula "18") (term "0,0,0,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0,1"))
                                    (rule "add_literals" (formula "18") (term "1,1,0,0,1"))
                                    (rule "times_zero_1" (formula "18") (term "1,0,0,1"))
                                    (rule "add_zero_right" (formula "18") (term "0,0,1"))
                                    (rule "leq_literals" (formula "18") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "18"))
                                    (rule "inEqSimp_contradInEq1" (formula "18") (ifseqformula "4"))
                                    (rule "qeq_literals" (formula "18") (term "0"))
                                    (builtin "One Step Simplification" (formula "18"))
                                    (rule "closeFalse" (formula "18"))
                                 )
                                 (branch "CUT: b[i_0] ≥ a[i_0] FALSE"
                                    (builtin "One Step Simplification" (formula "10"))
                                    (rule "notLeft" (formula "10"))
                                    (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "40"))
                                    (builtin "One Step Simplification" (formula "10"))
                                    (rule "replace_known_right" (formula "11") (term "1") (ifseqformula "40"))
                                    (builtin "One Step Simplification" (formula "11"))
                                    (rule "inEqSimp_geqRight" (formula "40"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                    (rule "mul_literals" (formula "1") (term "0,1"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                    (rule "inEqSimp_contradEq3" (formula "42") (ifseqformula "1"))
                                    (rule "polySimp_mulComm0" (formula "42") (term "1,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "42") (term "0,0"))
                                    (rule "add_literals" (formula "42") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "42") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "42") (term "0,0"))
                                    (rule "qeq_literals" (formula "42") (term "0"))
                                    (builtin "One Step Simplification" (formula "42"))
                                    (rule "false_right" (formula "42"))
                                    (rule "inEqSimp_subsumption0" (formula "6") (term "1") (ifseqformula "1"))
                                    (rule "inEqSimp_homoInEq0" (formula "6") (term "0,1"))
                                    (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1"))
                                    (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1"))
                                    (rule "mul_literals" (formula "6") (term "0,1,0,0,1"))
                                    (rule "polySimp_addAssoc" (formula "6") (term "0,0,1"))
                                    (rule "polySimp_addComm0" (formula "6") (term "0,0,0,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0,1"))
                                    (rule "add_literals" (formula "6") (term "1,1,0,0,1"))
                                    (rule "times_zero_1" (formula "6") (term "1,0,0,1"))
                                    (rule "add_zero_right" (formula "6") (term "0,0,1"))
                                    (rule "qeq_literals" (formula "6") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "6"))
                                    (rule "true_left" (formula "6"))
                                    (rule "inEqSimp_subsumption0" (formula "4") (term "0") (ifseqformula "1"))
                                    (rule "inEqSimp_homoInEq0" (formula "4") (term "0,0"))
                                    (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0"))
                                    (rule "mul_literals" (formula "4") (term "0,1,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "4") (term "0,0,0"))
                                    (rule "polySimp_addComm0" (formula "4") (term "0,0,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "4") (term "0,0,0"))
                                    (rule "add_literals" (formula "4") (term "1,1,0,0,0"))
                                    (rule "times_zero_1" (formula "4") (term "1,0,0,0"))
                                    (rule "add_zero_right" (formula "4") (term "0,0,0"))
                                    (rule "qeq_literals" (formula "4") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "4"))
                                    (rule "true_left" (formula "4"))
                                    (rule "inEqSimp_subsumption0" (formula "4") (term "1") (ifseqformula "1"))
                                    (rule "inEqSimp_homoInEq0" (formula "4") (term "0,1"))
                                    (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1"))
                                    (rule "polySimp_rightDist" (formula "4") (term "1,0,0,1"))
                                    (rule "mul_literals" (formula "4") (term "0,1,0,0,1"))
                                    (rule "polySimp_addAssoc" (formula "4") (term "0,0,1"))
                                    (rule "polySimp_addComm0" (formula "4") (term "0,0,0,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "4") (term "0,0,1"))
                                    (rule "add_literals" (formula "4") (term "1,1,0,0,1"))
                                    (rule "times_zero_1" (formula "4") (term "1,0,0,1"))
                                    (rule "add_zero_right" (formula "4") (term "0,0,1"))
                                    (rule "qeq_literals" (formula "4") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "4"))
                                    (rule "true_left" (formula "4"))
                                    (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "9"))
                                    (rule "times_zero_1" (formula "8") (term "0,0"))
                                    (rule "add_zero_left" (formula "8") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                                    (rule "mul_literals" (formula "8") (term "1"))
                                    (rule "inEqSimp_subsumption1" (formula "15") (ifseqformula "8"))
                                    (rule "leq_literals" (formula "15") (term "0"))
                                    (builtin "One Step Simplification" (formula "15"))
                                    (rule "true_left" (formula "15"))
                                    (rule "allLeft" (formula "18") (inst "t=j_128"))
                                    (rule "replace_known_right" (formula "18") (term "1") (ifseqformula "38"))
                                    (builtin "One Step Simplification" (formula "18"))
                                    (rule "inEqSimp_contradInEq1" (formula "18") (term "0") (ifseqformula "9"))
                                    (rule "qeq_literals" (formula "18") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "18"))
                                    (rule "inEqSimp_contradInEq0" (formula "18") (ifseqformula "10"))
                                    (rule "andLeft" (formula "18"))
                                    (rule "inEqSimp_homoInEq1" (formula "18"))
                                    (rule "polySimp_mulComm0" (formula "18") (term "1,0"))
                                    (rule "polySimp_rightDist" (formula "18") (term "1,0"))
                                    (rule "mul_literals" (formula "18") (term "0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "18") (term "0"))
                                    (rule "polySimp_addComm0" (formula "18") (term "0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "18") (term "0"))
                                    (rule "add_literals" (formula "18") (term "1,1,0"))
                                    (rule "times_zero_1" (formula "18") (term "1,0"))
                                    (rule "add_zero_right" (formula "18") (term "0"))
                                    (rule "leq_literals" (formula "18"))
                                    (rule "closeFalse" (formula "18"))
                                 )
                              )
                           )
                        )
                        (branch "CUT: ∃ int i; ( 0 ≤ i ∧ i < res_min ∧ ¬a[i] = b[i] ∧ ∀ int j; (0 ≤ j ∧ j < i → a[j] = b[j])) FALSE"
                           (rule "int_induction" (inst "b=   lt(i, res_min)
->     int::select(heap, a, arr(i))
     = int::select(heap, b, arr(i))
   & \\forall int j;
       (   leq(Z(0(#)), j) & lt(j, i)
        ->   int::select(heap, a, arr(j))
           = int::select(heap, b, arr(j)))") (inst "nv=i") (userinteraction))
                           (branch "Base Case"
                              (rule "impRight" (formula "21"))
                              (rule "allRight" (formula "26") (inst "sk=j_145"))
                              (rule "impRight" (formula "26"))
                              (rule "andLeft" (formula "1"))
                              (rule "eqSymm" (formula "27") (term "1,0,1,1,0"))
                              (rule "eqSymm" (formula "25") (term "0,1,0,0"))
                              (rule "eqSymm" (formula "25") (term "1,0,1,0"))
                              (rule "eqSymm" (formula "23") (term "0,1"))
                              (rule "eqSymm" (formula "22") (term "1"))
                              (rule "eqSymm" (formula "20") (term "0,1"))
                              (rule "eqSymm" (formula "5"))
                              (rule "eqSymm" (formula "23") (term "0,1,1"))
                              (rule "eqSymm" (formula "19") (term "1"))
                              (rule "eqSymm" (formula "4"))
                              (rule "eqSymm" (formula "24") (term "0"))
                              (rule "eqSymm" (formula "24") (term "1,0,1"))
                              (rule "eqSymm" (formula "28"))
                              (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "30"))
                              (builtin "One Step Simplification" (formula "12"))
                              (rule "replace_known_right" (formula "13") (term "0") (ifseqformula "31"))
                              (builtin "One Step Simplification" (formula "13"))
                              (rule "replace_known_left" (formula "24") (term "0") (ifseqformula "4"))
                              (builtin "One Step Simplification" (formula "24"))
                              (rule "allRight" (formula "24") (inst "sk=j_146"))
                              (rule "impRight" (formula "24"))
                              (rule "andLeft" (formula "1"))
                              (rule "inEqSimp_leqRight" (formula "31"))
                              (rule "times_zero_1" (formula "1") (term "1,0,0"))
                              (rule "add_zero_right" (formula "1") (term "0,0"))
                              (rule "inEqSimp_leqRight" (formula "34"))
                              (rule "times_zero_1" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "31") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_gtToGeq" (formula "27") (term "0"))
                              (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0"))
                              (rule "polySimp_addComm1" (formula "27") (term "0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "29") (term "1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "30") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "30") (term "0,1,0"))
                              (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,0,1,0"))
                              (rule "inEqSimp_gtToGeq" (formula "24") (term "0"))
                              (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "29") (term "1,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,0,0"))
                              (rule "inEqSimp_gtToGeq" (formula "19"))
                              (rule "times_zero_1" (formula "19") (term "1,0,0"))
                              (rule "add_literals" (formula "19") (term "0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "30") (term "0,1,0"))
                              (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,0,1,0"))
                              (rule "polySimp_addComm1" (formula "30") (term "0,0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "30") (term "1,0,0,1,1,0"))
                              (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,1,0,0,1,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "29") (term "1,0,0,1,1,0"))
                              (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,0,1,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "7"))
                              (rule "add_zero_right" (formula "7") (term "0"))
                              (rule "polySimp_mulComm0" (formula "7") (term "1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "6"))
                              (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "6") (term "0"))
                              (rule "inEqSimp_ltToLeq" (formula "4"))
                              (rule "times_zero_1" (formula "4") (term "1,0,0"))
                              (rule "add_zero_right" (formula "4") (term "0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "28") (term "0,0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "30") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "25") (term "0"))
                              (rule "inEqSimp_commuteLeq" (formula "30") (term "0,0,0,1,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "29") (term "0,0,0,1,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "28") (term "0,0,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "29") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "5"))
                              (rule "inEqSimp_commuteLeq" (formula "3"))
                              (rule "applyEq" (formula "26") (term "1,0,1") (ifseqformula "10"))
                              (rule "applyEq" (formula "22") (term "1,1") (ifseqformula "11"))
                              (rule "applyEq" (formula "10") (term "1") (ifseqformula "9"))
                              (rule "applyEq" (formula "23") (term "1,0,1") (ifseqformula "11"))
                              (rule "applyEqRigid" (formula "26") (term "1,0,1") (ifseqformula "9"))
                              (rule "applyEq" (formula "25") (term "1,1") (ifseqformula "10"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                              (rule "mul_literals" (formula "2") (term "1"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                              (rule "mul_literals" (formula "1") (term "1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "30") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "30") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "30") (term "0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "30") (term "1,1,1,0,0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "26") (term "0"))
                              (rule "polySimp_mulLiterals" (formula "26") (term "0,0"))
                              (rule "polySimp_elimOne" (formula "26") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0,1,0"))
                              (rule "mul_literals" (formula "28") (term "0,1,1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "29") (term "0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,1,0"))
                              (rule "polySimp_mulComm0" (formula "29") (term "1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "29") (term "1,0,1,0"))
                              (rule "mul_literals" (formula "29") (term "0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,1,0"))
                              (rule "polySimp_elimOne" (formula "29") (term "1,1,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "0"))
                              (rule "polySimp_mulComm0" (formula "23") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "23") (term "1,0"))
                              (rule "mul_literals" (formula "23") (term "0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0"))
                              (rule "polySimp_elimOne" (formula "23") (term "1,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0,0"))
                              (rule "mul_literals" (formula "28") (term "0,1,1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "30") (term "0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "30") (term "0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "30") (term "0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,0,0,1,1,0"))
                              (rule "polySimp_mulComm0" (formula "30") (term "1,1,0,0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "30") (term "1,1,0,0,1,1,0"))
                              (rule "mul_literals" (formula "30") (term "0,1,1,0,0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,0,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "30") (term "1,1,1,0,0,1,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0,1,1,0"))
                              (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0,1,1,0"))
                              (rule "mul_literals" (formula "29") (term "0,1,1,0,0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0,1,1,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "7"))
                              (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                              (rule "polySimp_elimOne" (formula "7") (term "0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "6"))
                              (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                              (rule "polySimp_elimOne" (formula "6") (term "0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                              (rule "mul_literals" (formula "4") (term "1"))
                              (rule "inEqSimp_contradInEq1" (formula "4") (ifseqformula "3"))
                              (rule "qeq_literals" (formula "4") (term "0"))
                              (builtin "One Step Simplification" (formula "4"))
                              (rule "closeFalse" (formula "4"))
                           )
                           (branch "Step Case"
                              (rule "allRight" (formula "25") (inst "sk=j_148"))
                              (rule "impRight" (formula "25"))
                              (rule "andLeft" (formula "1"))
                              (rule "allRight" (formula "23") (inst "sk=i_1"))
                              (rule "impRight" (formula "23"))
                              (rule "impRight" (formula "24"))
                              (rule "andLeft" (formula "2"))
                              (rule "eqSymm" (formula "27") (term "0,1,0,0"))
                              (rule "eqSymm" (formula "27") (term "1,0,1,0"))
                              (rule "eqSymm" (formula "25") (term "0,1"))
                              (rule "eqSymm" (formula "24") (term "1"))
                              (rule "eqSymm" (formula "29") (term "1,0,1,1,0"))
                              (rule "eqSymm" (formula "22") (term "0,1"))
                              (rule "eqSymm" (formula "7"))
                              (rule "eqSymm" (formula "6"))
                              (rule "eqSymm" (formula "25") (term "0,1,1"))
                              (rule "eqSymm" (formula "21") (term "1"))
                              (rule "eqSymm" (formula "30"))
                              (rule "eqSymm" (formula "26") (term "0"))
                              (rule "eqSymm" (formula "26") (term "1,0,1"))
                              (rule "eqSymm" (formula "3") (term "0,1"))
                              (rule "eqSymm" (formula "3") (term "1,0,1,1"))
                              (rule "replace_known_right" (formula "14") (term "0") (ifseqformula "32"))
                              (builtin "One Step Simplification" (formula "14"))
                              (rule "replace_known_right" (formula "15") (term "0") (ifseqformula "33"))
                              (builtin "One Step Simplification" (formula "15"))
                              (rule "polySimp_addComm0" (formula "1") (term "0"))
                              (rule "polySimp_addComm0" (formula "26") (term "1,1,0,0,1"))
                              (rule "polySimp_addComm0" (formula "26") (term "0,2,0,0"))
                              (rule "eqSymm" (formula "26") (term "0"))
                              (rule "polySimp_addComm0" (formula "26") (term "0,2,0,0"))
                              (rule "eqSymm" (formula "26") (term "0"))
                              (rule "inEqSimp_leqRight" (formula "31"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_zero_right" (formula "1") (term "0,0"))
                              (rule "inEqSimp_leqRight" (formula "34"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "30") (term "1,0,0,1,1,0"))
                              (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,1,0,0,1,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "29") (term "1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,0,1,0"))
                              (rule "inEqSimp_gtToGeq" (formula "24") (term "0"))
                              (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "30") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_gtToGeq" (formula "19"))
                              (rule "times_zero_1" (formula "19") (term "1,0,0"))
                              (rule "add_zero_right" (formula "19") (term "0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "29") (term "0,1,0"))
                              (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,0,1,0"))
                              (rule "inEqSimp_gtToGeq" (formula "26") (term "0"))
                              (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,0"))
                              (rule "polySimp_addComm1" (formula "26") (term "0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "30") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "28") (term "1,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "30") (term "1,0,0,1,1,0"))
                              (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,1,0,0,1,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "30") (term "0,1,0"))
                              (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,0,1,0"))
                              (rule "polySimp_addComm1" (formula "30") (term "0,0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "7"))
                              (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "7") (term "0"))
                              (rule "inEqSimp_ltToLeq" (formula "5") (term "0"))
                              (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0"))
                              (rule "polySimp_addComm1" (formula "5") (term "0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,0,1,1"))
                              (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,0,1,1"))
                              (rule "inEqSimp_ltToLeq" (formula "3"))
                              (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "3") (term "0"))
                              (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0,1"))
                              (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0,1"))
                              (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0,1"))
                              (rule "inEqSimp_commuteLeq" (formula "30") (term "0,0,0,1,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "30") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "29") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "28") (term "0,0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "28") (term "0,0,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "25") (term "0"))
                              (rule "inEqSimp_commuteLeq" (formula "29") (term "0,0,0,1,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "6"))
                              (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                              (rule "add_literals" (formula "3") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0,1"))
                              (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0,1"))
                              (rule "add_literals" (formula "27") (term "0,0,0,1,0,0,1"))
                              (rule "add_zero_left" (formula "27") (term "0,0,1,0,0,1"))
                              (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0,1,1"))
                              (rule "applyEqRigid" (formula "10") (term "1") (ifseqformula "9"))
                              (rule "applyEq" (formula "22") (term "1,1") (ifseqformula "11"))
                              (rule "applyEq" (formula "23") (term "1,0,1") (ifseqformula "11"))
                              (rule "applyEq" (formula "26") (term "1,0,1") (ifseqformula "10"))
                              (rule "applyEq" (formula "25") (term "1,1") (ifseqformula "10"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                              (rule "mul_literals" (formula "2") (term "1"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                              (rule "mul_literals" (formula "1") (term "1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0,1,1,0"))
                              (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0,1,1,0"))
                              (rule "mul_literals" (formula "29") (term "0,1,1,0,0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0,1,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0,1,0"))
                              (rule "mul_literals" (formula "28") (term "0,1,1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "0"))
                              (rule "polySimp_mulComm0" (formula "23") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "23") (term "1,0"))
                              (rule "mul_literals" (formula "23") (term "0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0"))
                              (rule "polySimp_elimOne" (formula "23") (term "1,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "29") (term "0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,1,0"))
                              (rule "polySimp_mulComm0" (formula "29") (term "1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "29") (term "1,0,1,0"))
                              (rule "mul_literals" (formula "29") (term "0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,1,0"))
                              (rule "polySimp_elimOne" (formula "29") (term "1,1,0,1,0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "26") (term "0"))
                              (rule "polySimp_mulLiterals" (formula "26") (term "0,0"))
                              (rule "polySimp_elimOne" (formula "26") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "30") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "30") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "30") (term "0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "30") (term "1,1,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0,0"))
                              (rule "mul_literals" (formula "28") (term "0,1,1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,0,0,1,1,0"))
                              (rule "polySimp_mulComm0" (formula "30") (term "1,1,0,0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "30") (term "1,1,0,0,1,1,0"))
                              (rule "mul_literals" (formula "30") (term "0,1,1,0,0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,0,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "30") (term "1,1,1,0,0,1,1,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "30") (term "0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "30") (term "0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "30") (term "0,0,1,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "7"))
                              (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                              (rule "polySimp_elimOne" (formula "7") (term "0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "5") (term "0"))
                              (rule "polySimp_mulLiterals" (formula "5") (term "0,0"))
                              (rule "polySimp_elimOne" (formula "5") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0,1,1"))
                              (rule "polySimp_mulComm0" (formula "5") (term "1,1,0,0,1,1"))
                              (rule "polySimp_rightDist" (formula "5") (term "1,1,0,0,1,1"))
                              (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,0,1,1"))
                              (rule "mul_literals" (formula "5") (term "0,1,1,0,0,1,1"))
                              (rule "polySimp_elimOne" (formula "5") (term "1,1,1,0,0,1,1"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                              (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                              (rule "polySimp_elimOne" (formula "3") (term "0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0,1"))
                              (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0,1"))
                              (rule "inEqSimp_subsumption1" (formula "5") (term "0") (ifseqformula "3"))
                              (rule "inEqSimp_homoInEq0" (formula "5") (term "0,0"))
                              (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "5") (term "1,0,0,0"))
                              (rule "mul_literals" (formula "5") (term "0,1,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "5") (term "0,0,0"))
                              (rule "polySimp_addComm1" (formula "5") (term "0,0,0,0"))
                              (rule "add_literals" (formula "5") (term "0,0,0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "5") (term "0,0,0"))
                              (rule "add_literals" (formula "5") (term "1,1,0,0,0"))
                              (rule "times_zero_1" (formula "5") (term "1,0,0,0"))
                              (rule "add_zero_right" (formula "5") (term "0,0,0"))
                              (rule "qeq_literals" (formula "5") (term "0,0"))
                              (builtin "One Step Simplification" (formula "5"))
                              (rule "andLeft" (formula "5"))
                              (rule "nnf_ex2all" (formula "30"))
                              (rule "nnf_ex2all" (formula "30"))
                              (rule "nnf_ex2all" (formula "31"))
                              (rule "nnf_imp2or" (formula "31") (term "0,1"))
                              (rule "nnf_imp2or" (formula "9") (term "0"))
                              (rule "nnf_notAnd" (formula "3") (term "0"))
                              (rule "nnf_notAnd" (formula "2") (term "0"))
                              (rule "nnf_notAnd" (formula "1") (term "0"))
                              (rule "nnf_notAnd" (formula "9") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "9") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "9") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0"))
                              (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "9") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
                              (rule "mul_literals" (formula "9") (term "1,0,0,0"))
                              (rule "nnf_notAnd" (formula "3") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "3") (term "0,0,0"))
                              (rule "times_zero_1" (formula "3") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "3") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "0,0,0"))
                              (rule "mul_literals" (formula "3") (term "1,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "3") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "3") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "3") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "3") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "3") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "3") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "3") (term "1,1,0,0"))
                              (rule "nnf_notAnd" (formula "3") (term "1,0"))
                              (rule "inEqSimp_notLeq" (formula "3") (term "0,1,0"))
                              (rule "polySimp_rightDist" (formula "3") (term "1,0,0,0,1,0"))
                              (rule "mul_literals" (formula "3") (term "0,1,0,0,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "3") (term "0,0,0,1,0"))
                              (rule "add_literals" (formula "3") (term "0,0,0,0,1,0"))
                              (rule "add_zero_left" (formula "3") (term "0,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "3") (term "1,0,1,0"))
                              (rule "polySimp_elimOne" (formula "3") (term "1,0,1,0"))
                              (rule "nnf_notAll" (formula "2") (term "1,0"))
                              (rule "nnf_notAnd" (formula "2") (term "0,0"))
                              (builtin "One Step Simplification" (formula "2"))
                              (rule "nnf_notAnd" (formula "1") (term "1,0"))
                              (rule "inEqSimp_notGeq" (formula "1") (term "0,1,0"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0,1,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,0,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,1,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0,0,1,0"))
                              (rule "add_zero_left" (formula "1") (term "0,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0"))
                              (rule "polySimp_elimOne" (formula "1") (term "1,0,1,0"))
                              (rule "nnf_notAnd" (formula "1") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                              (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                              (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
                              (rule "nnf_notAnd" (formula "31") (term "0,0,1"))
                              (rule "inEqSimp_notLeq" (formula "31") (term "1,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0,0,1"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "1,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0,1"))
                              (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0,1"))
                              (rule "mul_literals" (formula "31") (term "0,1,1,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0,1"))
                              (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0,1"))
                              (rule "inEqSimp_notGeq" (formula "31") (term "0,0,0,1"))
                              (rule "times_zero_1" (formula "31") (term "1,0,0,0,0,0,1"))
                              (rule "add_zero_right" (formula "31") (term "0,0,0,0,0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "0,0,0,1"))
                              (rule "mul_literals" (formula "31") (term "1,0,0,0,1"))
                              (rule "nnf_notAll" (formula "3") (term "1,1,0"))
                              (rule "nnf_notAnd" (formula "2") (term "0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "2") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0,0,0"))
                              (rule "mul_literals" (formula "2") (term "0,1,0,0,1,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0,0,0"))
                              (rule "add_literals" (formula "2") (term "0,0,0,1,0,0,0"))
                              (rule "add_zero_left" (formula "2") (term "0,0,1,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "2") (term "1,1,0,0,0"))
                              (rule "inEqSimp_notGeq" (formula "2") (term "0,0,0,0"))
                              (rule "times_zero_1" (formula "2") (term "1,0,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "2") (term "0,0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "0,0,0,0"))
                              (rule "mul_literals" (formula "2") (term "1,0,0,0,0"))
                              (rule "nnf_notAll" (formula "1") (term "1,1,0"))
                              (rule "nnf_imp2or" (formula "2") (term "0,0,1,0"))
                              (rule "nnf_notOr" (formula "2") (term "0,1,0"))
                              (builtin "One Step Simplification" (formula "2"))
                              (rule "nnf_imp2or" (formula "3") (term "0,0,1,1,0"))
                              (rule "nnf_notOr" (formula "3") (term "0,1,1,0"))
                              (builtin "One Step Simplification" (formula "3"))
                              (rule "nnf_imp2or" (formula "1") (term "0,0,1,1,0"))
                              (rule "nnf_notOr" (formula "1") (term "0,1,1,0"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "arrayLengthIsAShort" (formula "27") (term "0,0,1,1"))
                              (builtin "One Step Simplification" (formula "27"))
                              (rule "true_left" (formula "27"))
                              (rule "arrayLengthIsAShort" (formula "26") (term "1,0"))
                              (builtin "One Step Simplification" (formula "26"))
                              (rule "true_left" (formula "26"))
                              (rule "arrayLengthNotNegative" (formula "26") (term "0,0"))
                              (rule "arrayLengthNotNegative" (formula "27") (term "1,0"))
                              (rule "equiv_left" (formula "28"))
                              (branch "Case 1"
                                 (rule "replace_known_left" (formula "33") (term "0,1") (ifseqformula "29"))
                                 (builtin "One Step Simplification" (formula "33"))
                                 (rule "applyEq" (formula "26") (term "0") (ifseqformula "29"))
                                 (rule "applyEq" (formula "28") (term "0") (ifseqformula "29"))
                                 (rule "inEqSimp_commuteLeq" (formula "28"))
                                 (rule "applyEq" (formula "33") (term "0,0") (ifseqformula "29"))
                                 (rule "inEqSimp_homoInEq0" (formula "33") (term "0"))
                                 (rule "polySimp_addComm1" (formula "33") (term "0,0"))
                                 (rule "applyEq" (formula "33") (term "0,0,1") (ifseqformula "29"))
                                 (rule "eqSymm" (formula "33") (term "0,1"))
                                 (rule "applyEq" (formula "32") (term "0,0") (ifseqformula "29"))
                                 (rule "inEqSimp_commuteGeq" (formula "32") (term "0"))
                                 (rule "applyEq" (formula "30") (term "0,0") (ifseqformula "29"))
                                 (rule "inEqSimp_homoInEq1" (formula "30") (term "0"))
                                 (rule "polySimp_addComm1" (formula "30") (term "0,0"))
                                 (rule "applyEq" (formula "30") (term "0,0,1,1") (ifseqformula "29"))
                                 (rule "eqSymm" (formula "30") (term "0,1,1"))
                                 (builtin "One Step Simplification" (formula "30"))
                                 (rule "notLeft" (formula "30"))
                                 (rule "inEqSimp_leqRight" (formula "33"))
                                 (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "1") (term "0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "33") (term "0"))
                                 (rule "polySimp_mulComm0" (formula "33") (term "1,0"))
                                 (rule "polySimp_rightDist" (formula "33") (term "1,0"))
                                 (rule "mul_literals" (formula "33") (term "0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0"))
                                 (rule "polySimp_elimOne" (formula "33") (term "1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1"))
                                 (rule "cut_direct" (formula "33") (term "0"))
                                 (branch "CUT: b[1 + i_1] = a[1 + i_1] TRUE"
                                    (builtin "One Step Simplification" (formula "34"))
                                    (rule "allRight" (formula "34") (inst "sk=j_156"))
                                    (rule "cutUpperBound" (formula "34") (ifseqformula "3"))
                                    (branch "Case 1"
                                       (rule "crossInst" (formula "4") (inst "sk=i_5") (ifseqformula "35"))
                                       (rule "orRight" (formula "36"))
                                       (rule "andLeft" (formula "4"))
                                       (rule "orRight" (formula "37"))
                                       (rule "eqSymm" (formula "4"))
                                       (rule "inEqSimp_leqRight" (formula "37"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "inEqSimp_geqRight" (formula "38"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                       (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0,0"))
                                       (rule "inEqSimp_commuteGeq" (formula "7") (term "1,0,0"))
                                       (rule "applyEq" (formula "2") (term "0") (ifseqformula "3"))
                                       (rule "applyEqRigid" (formula "1") (term "1,0") (ifseqformula "3"))
                                       (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                       (rule "polySimp_addComm0" (formula "1") (term "0,0"))
                                       (rule "polySimp_pullOutFactor2b" (formula "1") (term "0"))
                                       (rule "add_literals" (formula "1") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "1") (term "1,0"))
                                       (rule "add_zero_right" (formula "1") (term "0"))
                                       (rule "leq_literals" (formula "1"))
                                       (rule "closeFalse" (formula "1"))
                                    )
                                    (branch "Case 2"
                                       (rule "crossInst" (formula "4") (inst "sk=i_4") (ifseqformula "35"))
                                       (rule "orRight" (formula "36"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "andLeft" (formula "3"))
                                       (rule "orRight" (formula "37"))
                                       (rule "eqSymm" (formula "3"))
                                       (rule "inEqSimp_leqRight" (formula "37"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "inEqSimp_geqRight" (formula "38"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                       (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0,0"))
                                       (rule "inEqSimp_commuteGeq" (formula "6") (term "1,0,0"))
                                       (rule "applyEq" (formula "2") (term "0") (ifseqformula "5"))
                                       (rule "applyEqRigid" (formula "39") (term "0,2,0") (ifseqformula "5"))
                                       (rule "eqSymm" (formula "39"))
                                       (rule "applyEq" (formula "38") (term "0") (ifseqformula "5"))
                                       (rule "applyEqRigid" (formula "1") (term "1,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "39") (term "0,2,0") (ifseqformula "5"))
                                       (rule "eqSymm" (formula "39"))
                                       (rule "replace_known_right" (formula "6") (term "1,0") (ifseqformula "39"))
                                       (builtin "One Step Simplification" (formula "6"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                       (rule "polySimp_elimOne" (formula "1") (term "1"))
                                       (rule "inEqSimp_contradEq3" (formula "38") (ifseqformula "1"))
                                       (rule "polySimp_rightDist" (formula "38") (term "1,0,0"))
                                       (rule "mul_literals" (formula "38") (term "0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "38") (term "0,0"))
                                       (rule "polySimp_addComm0" (formula "38") (term "0,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "38") (term "0,0"))
                                       (rule "add_literals" (formula "38") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "38") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "38") (term "0,0"))
                                       (rule "qeq_literals" (formula "38") (term "0"))
                                       (builtin "One Step Simplification" (formula "38"))
                                       (rule "false_right" (formula "38"))
                                       (rule "inEqSimp_contradInEq1" (formula "6") (term "0,0") (ifseqformula "2"))
                                       (rule "qeq_literals" (formula "6") (term "0,0,0"))
                                       (builtin "One Step Simplification" (formula "6"))
                                       (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "1"))
                                       (rule "times_zero_1" (formula "2") (term "0,0"))
                                       (rule "add_zero_left" (formula "2") (term "0"))
                                       (rule "equiv_left" (formula "37"))
                                       (branch "Case 1"
                                          (rule "notLeft" (formula "38"))
                                          (rule "replace_known_right" (formula "36") (term "1") (ifseqformula "38"))
                                          (builtin "One Step Simplification" (formula "36"))
                                          (rule "notLeft" (formula "36"))
                                          (rule "inEqSimp_leqRight" (formula "37"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                          (rule "polySimp_rightDist" (formula "1") (term "1"))
                                          (rule "mul_literals" (formula "1") (term "0,1"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                          (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                          (rule "inEqSimp_contradEq7" (formula "37") (ifseqformula "36"))
                                          (rule "polySimp_mulComm0" (formula "37") (term "1,0,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0"))
                                          (rule "add_literals" (formula "37") (term "1,1,0,0"))
                                          (rule "times_zero_1" (formula "37") (term "1,0,0"))
                                          (rule "add_zero_right" (formula "37") (term "0,0"))
                                          (rule "leq_literals" (formula "37") (term "0"))
                                          (builtin "One Step Simplification" (formula "37"))
                                          (rule "false_right" (formula "37"))
                                          (rule "inEqSimp_subsumption1" (formula "33") (ifseqformula "36"))
                                          (rule "inEqSimp_homoInEq0" (formula "33") (term "0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "33") (term "0,0"))
                                          (rule "add_literals" (formula "33") (term "1,1,0,0"))
                                          (rule "times_zero_1" (formula "33") (term "1,0,0"))
                                          (rule "add_literals" (formula "33") (term "0,0"))
                                          (rule "qeq_literals" (formula "33") (term "0"))
                                          (builtin "One Step Simplification" (formula "33"))
                                          (rule "true_left" (formula "33"))
                                          (rule "ex_pull_out3" (formula "7") (term "0"))
                                          (rule "ex_pull_out3" (formula "8") (term "1,0"))
                                          (rule "ex_pull_out3" (formula "4") (term "1,0"))
                                          (rule "cnf_rightDist" (formula "7") (term "0,0"))
                                          (rule "commute_or" (formula "7") (term "1,0,0"))
                                          (rule "cnf_rightDist" (formula "8") (term "0,1,0"))
                                          (rule "commute_or" (formula "8") (term "1,0,1,0"))
                                          (rule "cnf_rightDist" (formula "4") (term "0,1,0"))
                                          (rule "commute_or" (formula "4") (term "1,0,1,0"))
                                          (rule "cnf_rightDist" (formula "7") (term "0,0,0"))
                                          (rule "commute_or" (formula "7") (term "1,0,0,0"))
                                          (rule "cnf_rightDist" (formula "8") (term "0,0,1,0"))
                                          (rule "commute_or" (formula "8") (term "1,0,0,1,0"))
                                          (rule "cnf_rightDist" (formula "4") (term "0,0,1,0"))
                                          (rule "commute_or" (formula "4") (term "1,0,0,1,0"))
                                          (rule "ex_pull_out3" (formula "8") (term "0"))
                                          (rule "cnf_rightDist" (formula "8") (term "0,0"))
                                          (rule "commute_or_2" (formula "8") (term "1,0,0"))
                                          (rule "commute_or" (formula "8") (term "0,1,0,0"))
                                          (rule "cnf_rightDist" (formula "8") (term "0,0,0"))
                                          (rule "commute_or_2" (formula "8") (term "1,0,0,0"))
                                          (rule "shift_paren_or" (formula "8") (term "0,0,0,0"))
                                          (rule "commute_or" (formula "8") (term "0,1,0,0,0"))
                                          (rule "ex_pull_out3" (formula "4") (term "0"))
                                          (rule "cnf_rightDist" (formula "4") (term "0,0"))
                                          (rule "commute_or_2" (formula "4") (term "1,0,0"))
                                          (rule "commute_or" (formula "4") (term "0,1,0,0"))
                                          (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                                          (rule "commute_or_2" (formula "4") (term "1,0,0,0"))
                                          (rule "shift_paren_or" (formula "4") (term "0,0,0,0"))
                                          (rule "commute_or" (formula "4") (term "0,1,0,0,0"))
                                          (rule "commute_and_2" (formula "7") (term "0,0"))
                                          (rule "allLeft" (formula "14") (inst "t=j_148"))
                                          (rule "replace_known_right" (formula "14") (term "1") (ifseqformula "38"))
                                          (builtin "One Step Simplification" (formula "14"))
                                          (rule "inEqSimp_contradInEq1" (formula "14") (term "0") (ifseqformula "16"))
                                          (rule "qeq_literals" (formula "14") (term "0,0"))
                                          (builtin "One Step Simplification" (formula "14"))
                                          (rule "allLeft" (formula "15") (inst "t=i_4"))
                                          (rule "replace_known_right" (formula "15") (term "1") (ifseqformula "38"))
                                          (builtin "One Step Simplification" (formula "15"))
                                          (rule "inEqSimp_contradInEq1" (formula "15") (term "0") (ifseqformula "2"))
                                          (rule "qeq_literals" (formula "15") (term "0,0"))
                                          (builtin "One Step Simplification" (formula "15"))
                                          (rule "inEqSimp_antiSymm" (formula "15") (ifseqformula "1"))
                                          (rule "applyEqRigid" (formula "2") (term "0") (ifseqformula "15"))
                                          (rule "applyEqRigid" (formula "5") (term "1,0") (ifseqformula "14"))
                                          (rule "applyEqRigid" (formula "1") (term "0") (ifseqformula "14"))
                                          (rule "inEqSimp_homoInEq0" (formula "1"))
                                          (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
                                          (rule "add_literals" (formula "1") (term "1,0"))
                                          (rule "times_zero_1" (formula "1") (term "0"))
                                          (rule "qeq_literals" (formula "1"))
                                          (rule "true_left" (formula "1"))
                                          (rule "applyEqRigid" (formula "4") (term "1,1,1,0,0,1") (ifseqformula "13"))
                                          (rule "applyEqRigid" (formula "14") (term "0") (ifseqformula "13"))
                                          (rule "inEqSimp_homoInEq1" (formula "14"))
                                          (rule "polySimp_pullOutFactor1" (formula "14") (term "0"))
                                          (rule "add_literals" (formula "14") (term "1,0"))
                                          (rule "times_zero_1" (formula "14") (term "0"))
                                          (rule "leq_literals" (formula "14"))
                                          (rule "true_left" (formula "14"))
                                          (rule "applyEqRigid" (formula "36") (term "0,2,0") (ifseqformula "13"))
                                          (rule "eqSymm" (formula "36"))
                                          (rule "applyEq" (formula "36") (term "0,2,0") (ifseqformula "13"))
                                          (rule "eqSymm" (formula "36"))
                                          (rule "close" (formula "36") (ifseqformula "11"))
                                       )
                                       (branch "Case 2"
                                          (rule "notRight" (formula "38"))
                                          (rule "replace_known_left" (formula "37") (term "1") (ifseqformula "1"))
                                          (builtin "One Step Simplification" (formula "37"))
                                          (rule "inEqSimp_geqRight" (formula "38"))
                                          (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                          (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0,0"))
                                          (rule "applyEq" (formula "38") (term "0") (ifseqformula "2"))
                                          (rule "inEqSimp_homoInEq0" (formula "38"))
                                          (rule "polySimp_pullOutFactor1" (formula "38") (term "0"))
                                          (rule "add_literals" (formula "38") (term "1,0"))
                                          (rule "times_zero_1" (formula "38") (term "0"))
                                          (rule "qeq_literals" (formula "38"))
                                          (rule "true_left" (formula "38"))
                                          (rule "applyEq" (formula "34") (term "0") (ifseqformula "2"))
                                          (rule "applyEq" (formula "34") (term "0") (ifseqformula "2"))
                                          (rule "inEqSimp_homoInEq1" (formula "34"))
                                          (rule "polySimp_pullOutFactor1" (formula "34") (term "0"))
                                          (rule "add_literals" (formula "34") (term "1,0"))
                                          (rule "times_zero_1" (formula "34") (term "0"))
                                          (rule "leq_literals" (formula "34"))
                                          (rule "true_left" (formula "34"))
                                          (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "2"))
                                          (rule "polySimp_pullOutFactor2" (formula "1") (term "0"))
                                          (rule "add_literals" (formula "1") (term "1,0"))
                                          (rule "times_zero_1" (formula "1") (term "0"))
                                          (rule "leq_literals" (formula "1"))
                                          (rule "true_left" (formula "1"))
                                          (rule "ex_pull_out3" (formula "8") (term "0"))
                                          (rule "ex_pull_out3" (formula "9") (term "1,0"))
                                          (rule "ex_pull_out3" (formula "5") (term "1,0"))
                                          (rule "cnf_rightDist" (formula "8") (term "0,0"))
                                          (rule "commute_or" (formula "8") (term "1,0,0"))
                                          (rule "cnf_rightDist" (formula "9") (term "0,1,0"))
                                          (rule "commute_or" (formula "9") (term "1,0,1,0"))
                                          (rule "cnf_rightDist" (formula "5") (term "0,1,0"))
                                          (rule "commute_or" (formula "5") (term "1,0,1,0"))
                                          (rule "cnf_rightDist" (formula "8") (term "0,0,0"))
                                          (rule "commute_or" (formula "8") (term "1,0,0,0"))
                                          (rule "cnf_rightDist" (formula "9") (term "0,0,1,0"))
                                          (rule "commute_or" (formula "9") (term "1,0,0,1,0"))
                                          (rule "cnf_rightDist" (formula "5") (term "0,0,1,0"))
                                          (rule "commute_or" (formula "5") (term "1,0,0,1,0"))
                                          (rule "ex_pull_out3" (formula "9") (term "0"))
                                          (rule "cnf_rightDist" (formula "9") (term "0,0"))
                                          (rule "commute_or_2" (formula "9") (term "1,0,0"))
                                          (rule "commute_or" (formula "9") (term "0,1,0,0"))
                                          (rule "cnf_rightDist" (formula "9") (term "0,0,0"))
                                          (rule "commute_or_2" (formula "9") (term "1,0,0,0"))
                                          (rule "shift_paren_or" (formula "9") (term "0,0,0,0"))
                                          (rule "commute_or" (formula "9") (term "0,1,0,0,0"))
                                          (rule "ex_pull_out3" (formula "5") (term "0"))
                                          (rule "cnf_rightDist" (formula "5") (term "0,0"))
                                          (rule "commute_or_2" (formula "5") (term "1,0,0"))
                                          (rule "commute_or" (formula "5") (term "0,1,0,0"))
                                          (rule "cnf_rightDist" (formula "5") (term "0,0,0"))
                                          (rule "commute_or_2" (formula "5") (term "1,0,0,0"))
                                          (rule "shift_paren_or" (formula "5") (term "0,0,0,0"))
                                          (rule "commute_or" (formula "5") (term "0,1,0,0,0"))
                                          (rule "commute_and_2" (formula "8") (term "0,0"))
                                          (rule "allLeft" (formula "15") (inst "t=i_4"))
                                          (rule "replace_known_right" (formula "15") (term "1") (ifseqformula "36"))
                                          (builtin "One Step Simplification" (formula "15"))
                                          (rule "inEqSimp_contradInEq1" (formula "15") (term "0") (ifseqformula "3"))
                                          (rule "qeq_literals" (formula "15") (term "0,0"))
                                          (builtin "One Step Simplification" (formula "15"))
                                          (rule "inEqSimp_antiSymm" (formula "15") (ifseqformula "2"))
                                          (rule "applyEq" (formula "16") (term "0") (ifseqformula "15"))
                                          (rule "inEqSimp_homoInEq1" (formula "16"))
                                          (rule "polySimp_pullOutFactor1" (formula "16") (term "0"))
                                          (rule "add_literals" (formula "16") (term "1,0"))
                                          (rule "times_zero_1" (formula "16") (term "0"))
                                          (rule "leq_literals" (formula "16"))
                                          (rule "true_left" (formula "16"))
                                          (rule "applyEq" (formula "7") (term "1,1,1,0,0,1") (ifseqformula "15"))
                                          (rule "applyEq" (formula "3") (term "0") (ifseqformula "15"))
                                          (rule "applyEq" (formula "35") (term "0,2,0") (ifseqformula "14"))
                                          (rule "eqSymm" (formula "35"))
                                          (rule "applyEq" (formula "6") (term "1,0") (ifseqformula "14"))
                                          (rule "applyEq" (formula "2") (term "0") (ifseqformula "14"))
                                          (rule "inEqSimp_homoInEq0" (formula "2"))
                                          (rule "polySimp_pullOutFactor1" (formula "2") (term "0"))
                                          (rule "add_literals" (formula "2") (term "1,0"))
                                          (rule "times_zero_1" (formula "2") (term "0"))
                                          (rule "qeq_literals" (formula "2"))
                                          (rule "true_left" (formula "2"))
                                          (rule "applyEqRigid" (formula "34") (term "0,2,0") (ifseqformula "13"))
                                          (rule "eqSymm" (formula "34"))
                                          (rule "close" (formula "34") (ifseqformula "12"))
                                       )
                                    )
                                 )
                                 (branch "CUT: b[1 + i_1] = a[1 + i_1] FALSE"
                                    (builtin "One Step Simplification" (formula "34"))
                                    (rule "false_right" (formula "34"))
                                    (rule "equiv_left" (formula "32"))
                                    (branch "Case 1"
                                       (rule "notLeft" (formula "33"))
                                       (rule "replace_known_right" (formula "31") (term "1") (ifseqformula "33"))
                                       (builtin "One Step Simplification" (formula "31"))
                                       (rule "notLeft" (formula "31"))
                                       (rule "inEqSimp_leqRight" (formula "32"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                       (rule "mul_literals" (formula "1") (term "0,1"))
                                       (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                       (rule "inEqSimp_contradEq7" (formula "32") (ifseqformula "31"))
                                       (rule "polySimp_mulComm0" (formula "32") (term "1,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0"))
                                       (rule "add_literals" (formula "32") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "32") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "32") (term "0,0"))
                                       (rule "leq_literals" (formula "32") (term "0"))
                                       (builtin "One Step Simplification" (formula "32"))
                                       (rule "false_right" (formula "32"))
                                       (rule "inEqSimp_subsumption1" (formula "28") (ifseqformula "31"))
                                       (rule "inEqSimp_homoInEq0" (formula "28") (term "0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0"))
                                       (rule "add_literals" (formula "28") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "28") (term "1,0,0"))
                                       (rule "add_literals" (formula "28") (term "0,0"))
                                       (rule "qeq_literals" (formula "28") (term "0"))
                                       (builtin "One Step Simplification" (formula "28"))
                                       (rule "true_left" (formula "28"))
                                       (rule "ex_pull_out3" (formula "2") (term "0"))
                                       (rule "cnf_rightDist" (formula "2") (term "0,0"))
                                       (rule "commute_or" (formula "2") (term "1,0,0"))
                                       (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                                       (rule "commute_or" (formula "2") (term "1,0,0,0"))
                                       (rule "ex_pull_out3" (formula "3") (term "1,0"))
                                       (rule "cnf_rightDist" (formula "3") (term "0,1,0"))
                                       (rule "commute_or" (formula "3") (term "1,0,1,0"))
                                       (rule "ex_pull_out3" (formula "1") (term "1,0"))
                                       (rule "cnf_rightDist" (formula "1") (term "0,1,0"))
                                       (rule "commute_or" (formula "1") (term "1,0,1,0"))
                                       (rule "cnf_rightDist" (formula "3") (term "0,0,1,0"))
                                       (rule "commute_or" (formula "3") (term "1,0,0,1,0"))
                                       (rule "cnf_rightDist" (formula "1") (term "0,0,1,0"))
                                       (rule "commute_or" (formula "1") (term "1,0,0,1,0"))
                                       (rule "ex_pull_out3" (formula "3") (term "0"))
                                       (rule "cnf_rightDist" (formula "3") (term "0,0"))
                                       (rule "commute_or_2" (formula "3") (term "1,0,0"))
                                       (rule "commute_or" (formula "3") (term "0,1,0,0"))
                                       (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                                       (rule "commute_or_2" (formula "3") (term "1,0,0,0"))
                                       (rule "shift_paren_or" (formula "3") (term "0,0,0,0"))
                                       (rule "commute_or" (formula "3") (term "0,1,0,0,0"))
                                       (rule "ex_pull_out3" (formula "1") (term "0"))
                                       (rule "cnf_rightDist" (formula "1") (term "0,0"))
                                       (rule "commute_or_2" (formula "1") (term "1,0,0"))
                                       (rule "commute_or" (formula "1") (term "0,1,0,0"))
                                       (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                                       (rule "commute_or_2" (formula "1") (term "1,0,0,0"))
                                       (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
                                       (rule "commute_or" (formula "1") (term "0,1,0,0,0"))
                                       (rule "commute_and_2" (formula "2") (term "0,0"))
                                       (rule "allLeft" (formula "9") (inst "t=j_148"))
                                       (rule "replace_known_right" (formula "9") (term "1") (ifseqformula "33"))
                                       (builtin "One Step Simplification" (formula "9"))
                                       (rule "inEqSimp_contradInEq1" (formula "9") (term "0") (ifseqformula "11"))
                                       (rule "qeq_literals" (formula "9") (term "0,0"))
                                       (builtin "One Step Simplification" (formula "9"))
                                       (rule "commute_and_2" (formula "3") (term "0,0"))
                                       (rule "commute_and_2" (formula "1") (term "0,0"))
                                       (rule "commute_and" (formula "2") (term "0,0,0"))
                                       (rule "commute_and" (formula "3") (term "0,0,0"))
                                       (rule "commute_and" (formula "1") (term "0,0,0"))
                                       (rule "allLeft" (formula "2") (inst "t=j_148"))
                                       (rule "exLeft" (formula "2") (inst "sk=j_154"))
                                       (rule "andLeft" (formula "2"))
                                       (rule "andLeft" (formula "2"))
                                       (rule "replace_known_right" (formula "4") (term "1,0") (ifseqformula "36"))
                                       (builtin "One Step Simplification" (formula "4"))
                                       (rule "replace_known_right" (formula "3") (term "1,0") (ifseqformula "36"))
                                       (builtin "One Step Simplification" (formula "3"))
                                       (rule "replace_known_right" (formula "2") (term "1,0") (ifseqformula "36"))
                                       (builtin "One Step Simplification" (formula "2"))
                                       (rule "inEqSimp_commuteGeq" (formula "4") (term "1,0"))
                                       (rule "inEqSimp_commuteGeq" (formula "3") (term "1,0"))
                                       (rule "inEqSimp_commuteGeq" (formula "2") (term "1,0"))
                                       (rule "inEqSimp_contradInEq1" (formula "4") (term "0,0") (ifseqformula "14"))
                                       (rule "qeq_literals" (formula "4") (term "0,0,0"))
                                       (builtin "One Step Simplification" (formula "4"))
                                       (rule "inEqSimp_contradInEq1" (formula "3") (term "0,0") (ifseqformula "14"))
                                       (rule "qeq_literals" (formula "3") (term "0,0,0"))
                                       (builtin "One Step Simplification" (formula "3"))
                                       (rule "inEqSimp_contradInEq1" (formula "2") (term "0,0") (ifseqformula "14"))
                                       (rule "qeq_literals" (formula "2") (term "0,0,0"))
                                       (builtin "One Step Simplification" (formula "2"))
                                       (rule "inEqSimp_contradInEq1" (formula "4") (term "0") (ifseqformula "15"))
                                       (rule "inEqSimp_homoInEq1" (formula "4") (term "0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "4") (term "0,0,0"))
                                       (rule "add_literals" (formula "4") (term "1,1,0,0,0"))
                                       (rule "times_zero_1" (formula "4") (term "1,0,0,0"))
                                       (rule "add_zero_right" (formula "4") (term "0,0,0"))
                                       (rule "leq_literals" (formula "4") (term "0,0"))
                                       (builtin "One Step Simplification" (formula "4"))
                                       (rule "inEqSimp_contradInEq1" (formula "3") (term "0") (ifseqformula "15"))
                                       (rule "inEqSimp_homoInEq1" (formula "3") (term "0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0,0"))
                                       (rule "add_literals" (formula "3") (term "1,1,0,0,0"))
                                       (rule "times_zero_1" (formula "3") (term "1,0,0,0"))
                                       (rule "add_zero_right" (formula "3") (term "0,0,0"))
                                       (rule "leq_literals" (formula "3") (term "0,0"))
                                       (builtin "One Step Simplification" (formula "3"))
                                       (rule "inEqSimp_contradInEq1" (formula "2") (term "0") (ifseqformula "15"))
                                       (rule "inEqSimp_homoInEq1" (formula "2") (term "0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0,0"))
                                       (rule "add_literals" (formula "2") (term "1,1,0,0,0"))
                                       (rule "times_zero_1" (formula "2") (term "1,0,0,0"))
                                       (rule "add_zero_right" (formula "2") (term "0,0,0"))
                                       (rule "leq_literals" (formula "2") (term "0,0"))
                                       (builtin "One Step Simplification" (formula "2"))
                                       (rule "notLeft" (formula "2"))
                                       (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "3"))
                                       (rule "times_zero_1" (formula "2") (term "0,0"))
                                       (rule "add_zero_left" (formula "2") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                       (rule "mul_literals" (formula "2") (term "1"))
                                       (rule "inEqSimp_subsumption1" (formula "14") (ifseqformula "2"))
                                       (rule "leq_literals" (formula "14") (term "0"))
                                       (builtin "One Step Simplification" (formula "14"))
                                       (rule "true_left" (formula "14"))
                                       (rule "allLeft" (formula "5") (inst "t=add(Z(1(#)), i_1)"))
                                       (rule "exLeft" (formula "5") (inst "sk=j_155"))
                                       (rule "andLeft" (formula "5"))
                                       (rule "andLeft" (formula "5"))
                                       (rule "replace_known_right" (formula "6") (term "1,0") (ifseqformula "38"))
                                       (builtin "One Step Simplification" (formula "6"))
                                       (rule "replace_known_right" (formula "7") (term "1,0") (ifseqformula "38"))
                                       (builtin "One Step Simplification" (formula "7"))
                                       (rule "replace_known_right" (formula "5") (term "1,0") (ifseqformula "38"))
                                       (builtin "One Step Simplification" (formula "5"))
                                       (rule "polySimp_addAssoc" (formula "7") (term "1,1"))
                                       (rule "add_literals" (formula "7") (term "0,1,1"))
                                       (rule "add_zero_left" (formula "7") (term "1,1"))
                                       (rule "inEqSimp_commuteGeq" (formula "6") (term "1,0"))
                                       (rule "inEqSimp_commuteGeq" (formula "7") (term "1,0"))
                                       (rule "inEqSimp_commuteGeq" (formula "5") (term "1,0"))
                                       (rule "inEqSimp_homoInEq0" (formula "6") (term "0,0"))
                                       (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "6") (term "1,0,0,0"))
                                       (rule "mul_literals" (formula "6") (term "0,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "6") (term "0,0,0"))
                                       (rule "add_literals" (formula "6") (term "0,0,0,0"))
                                       (rule "inEqSimp_homoInEq0" (formula "7") (term "0,0"))
                                       (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "7") (term "1,0,0,0"))
                                       (rule "mul_literals" (formula "7") (term "0,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "7") (term "0,0,0"))
                                       (rule "add_literals" (formula "7") (term "0,0,0,0"))
                                       (rule "inEqSimp_homoInEq0" (formula "5") (term "0,0"))
                                       (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "5") (term "1,0,0,0"))
                                       (rule "mul_literals" (formula "5") (term "0,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "5") (term "0,0,0"))
                                       (rule "add_literals" (formula "5") (term "0,0,0,0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "6") (term "0,0"))
                                       (rule "polySimp_mulLiterals" (formula "6") (term "0,0,0"))
                                       (rule "polySimp_elimOne" (formula "6") (term "0,0,0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "7") (term "0,0"))
                                       (rule "polySimp_mulLiterals" (formula "7") (term "0,0,0"))
                                       (rule "polySimp_elimOne" (formula "7") (term "0,0,0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "5") (term "0,0"))
                                       (rule "polySimp_mulLiterals" (formula "5") (term "0,0,0"))
                                       (rule "polySimp_elimOne" (formula "5") (term "0,0,0"))
                                       (rule "inEqSimp_contradInEq1" (formula "7") (term "1,0") (ifseqformula "12"))
                                       (rule "inEqSimp_homoInEq1" (formula "7") (term "0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0"))
                                       (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0"))
                                       (rule "polySimp_addComm1" (formula "7") (term "0,0,0,1,0"))
                                       (rule "add_literals" (formula "7") (term "0,0,0,0,1,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0,1,0"))
                                       (rule "add_literals" (formula "7") (term "1,1,0,0,1,0"))
                                       (rule "times_zero_1" (formula "7") (term "1,0,0,1,0"))
                                       (rule "add_zero_right" (formula "7") (term "0,0,1,0"))
                                       (rule "leq_literals" (formula "7") (term "0,1,0"))
                                       (builtin "One Step Simplification" (formula "7"))
                                       (rule "inEqSimp_contradInEq1" (formula "6") (term "0,0") (ifseqformula "13"))
                                       (rule "qeq_literals" (formula "6") (term "0,0,0"))
                                       (builtin "One Step Simplification" (formula "6"))
                                       (rule "inEqSimp_contradInEq1" (formula "5") (term "0,0") (ifseqformula "13"))
                                       (rule "qeq_literals" (formula "5") (term "0,0,0"))
                                       (builtin "One Step Simplification" (formula "5"))
                                       (rule "inEqSimp_contradInEq1" (formula "6") (term "0") (ifseqformula "12"))
                                       (rule "inEqSimp_homoInEq1" (formula "6") (term "0,0"))
                                       (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "6") (term "1,0,0,0"))
                                       (rule "mul_literals" (formula "6") (term "0,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "6") (term "0,0,0"))
                                       (rule "polySimp_addComm1" (formula "6") (term "0,0,0,0"))
                                       (rule "add_literals" (formula "6") (term "0,0,0,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0,0"))
                                       (rule "add_literals" (formula "6") (term "1,1,0,0,0"))
                                       (rule "times_zero_1" (formula "6") (term "1,0,0,0"))
                                       (rule "add_zero_right" (formula "6") (term "0,0,0"))
                                       (rule "leq_literals" (formula "6") (term "0,0"))
                                       (builtin "One Step Simplification" (formula "6"))
                                       (rule "inEqSimp_contradInEq1" (formula "7") (term "0") (ifseqformula "13"))
                                       (rule "qeq_literals" (formula "7") (term "0,0"))
                                       (builtin "One Step Simplification" (formula "7"))
                                       (rule "inEqSimp_contradInEq1" (formula "5") (term "0") (ifseqformula "12"))
                                       (rule "inEqSimp_homoInEq1" (formula "5") (term "0,0"))
                                       (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "5") (term "1,0,0,0"))
                                       (rule "mul_literals" (formula "5") (term "0,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "5") (term "0,0,0"))
                                       (rule "polySimp_addComm1" (formula "5") (term "0,0,0,0"))
                                       (rule "add_literals" (formula "5") (term "0,0,0,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "5") (term "0,0,0"))
                                       (rule "add_literals" (formula "5") (term "1,1,0,0,0"))
                                       (rule "times_zero_1" (formula "5") (term "1,0,0,0"))
                                       (rule "add_zero_right" (formula "5") (term "0,0,0"))
                                       (rule "leq_literals" (formula "5") (term "0,0"))
                                       (builtin "One Step Simplification" (formula "5"))
                                       (rule "notLeft" (formula "5"))
                                       (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "6"))
                                       (rule "times_zero_1" (formula "5") (term "0,0"))
                                       (rule "add_zero_left" (formula "5") (term "0"))
                                       (rule "allLeft" (formula "15") (inst "t=j_154"))
                                       (rule "replace_known_right" (formula "15") (term "1") (ifseqformula "38"))
                                       (builtin "One Step Simplification" (formula "15"))
                                       (rule "inEqSimp_contradInEq1" (formula "15") (term "0") (ifseqformula "3"))
                                       (rule "qeq_literals" (formula "15") (term "0,0"))
                                       (builtin "One Step Simplification" (formula "15"))
                                       (rule "inEqSimp_exactShadow3" (formula "15") (ifseqformula "4"))
                                       (rule "polySimp_mulComm0" (formula "15") (term "0,0"))
                                       (rule "polySimp_addAssoc" (formula "15") (term "0"))
                                       (rule "polySimp_addComm0" (formula "15") (term "0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "15"))
                                       (rule "polySimp_mulComm0" (formula "15") (term "1"))
                                       (rule "polySimp_rightDist" (formula "15") (term "1"))
                                       (rule "mul_literals" (formula "15") (term "0,1"))
                                       (rule "polySimp_mulLiterals" (formula "15") (term "1,1"))
                                       (rule "polySimp_elimOne" (formula "15") (term "1,1"))
                                       (rule "inEqSimp_subsumption1" (formula "14") (ifseqformula "15"))
                                       (rule "inEqSimp_homoInEq0" (formula "14") (term "0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,0"))
                                       (rule "add_literals" (formula "14") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "14") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "14") (term "0,0"))
                                       (rule "qeq_literals" (formula "14") (term "0"))
                                       (builtin "One Step Simplification" (formula "14"))
                                       (rule "true_left" (formula "14"))
                                       (rule "allLeft" (formula "16") (inst "t=j_155"))
                                       (rule "replace_known_right" (formula "16") (term "1") (ifseqformula "38"))
                                       (builtin "One Step Simplification" (formula "16"))
                                       (rule "inEqSimp_contradInEq1" (formula "16") (term "0") (ifseqformula "5"))
                                       (rule "qeq_literals" (formula "16") (term "0,0"))
                                       (builtin "One Step Simplification" (formula "16"))
                                       (rule "inEqSimp_antiSymm" (formula "16") (ifseqformula "6"))
                                       (rule "applyEq" (formula "5") (term "0") (ifseqformula "16"))
                                       (rule "applyEq" (formula "16") (term "0") (ifseqformula "15"))
                                       (rule "inEqSimp_homoInEq1" (formula "16"))
                                       (rule "polySimp_pullOutFactor1" (formula "16") (term "0"))
                                       (rule "add_literals" (formula "16") (term "1,0"))
                                       (rule "times_zero_1" (formula "16") (term "0"))
                                       (rule "leq_literals" (formula "16"))
                                       (rule "true_left" (formula "16"))
                                       (rule "applyEq" (formula "5") (term "0") (ifseqformula "15"))
                                       (rule "inEqSimp_homoInEq0" (formula "5"))
                                       (rule "polySimp_pullOutFactor1" (formula "5") (term "0"))
                                       (rule "add_literals" (formula "5") (term "1,0"))
                                       (rule "times_zero_1" (formula "5") (term "0"))
                                       (rule "qeq_literals" (formula "5"))
                                       (rule "true_left" (formula "5"))
                                       (rule "applyEq" (formula "36") (term "0,2,0") (ifseqformula "14"))
                                       (rule "eqSymm" (formula "36"))
                                       (rule "applyEq" (formula "36") (term "0,2,0") (ifseqformula "14"))
                                       (rule "eqSymm" (formula "36"))
                                       (rule "close" (formula "36") (ifseqformula "11"))
                                    )
                                    (branch "Case 2"
                                       (rule "notRight" (formula "33"))
                                       (rule "replace_known_left" (formula "32") (term "1") (ifseqformula "1"))
                                       (builtin "One Step Simplification" (formula "32"))
                                       (rule "inEqSimp_geqRight" (formula "33"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                       (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0,0"))
                                       (rule "applyEq" (formula "29") (term "0") (ifseqformula "2"))
                                       (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "2"))
                                       (rule "polySimp_pullOutFactor2" (formula "1") (term "0"))
                                       (rule "add_literals" (formula "1") (term "1,0"))
                                       (rule "times_zero_1" (formula "1") (term "0"))
                                       (rule "leq_literals" (formula "1"))
                                       (rule "true_left" (formula "1"))
                                       (rule "applyEq" (formula "28") (term "0") (ifseqformula "1"))
                                       (rule "inEqSimp_homoInEq1" (formula "28"))
                                       (rule "polySimp_pullOutFactor1" (formula "28") (term "0"))
                                       (rule "add_literals" (formula "28") (term "1,0"))
                                       (rule "times_zero_1" (formula "28") (term "0"))
                                       (rule "leq_literals" (formula "28"))
                                       (rule "true_left" (formula "28"))
                                       (rule "applyEq" (formula "30") (term "0") (ifseqformula "1"))
                                       (rule "inEqSimp_homoInEq0" (formula "30"))
                                       (rule "polySimp_pullOutFactor1" (formula "30") (term "0"))
                                       (rule "add_literals" (formula "30") (term "1,0"))
                                       (rule "times_zero_1" (formula "30") (term "0"))
                                       (rule "qeq_literals" (formula "30"))
                                       (rule "true_left" (formula "30"))
                                       (rule "ex_pull_out3" (formula "3") (term "0"))
                                       (rule "cnf_rightDist" (formula "3") (term "0,0"))
                                       (rule "commute_or" (formula "3") (term "1,0,0"))
                                       (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                                       (rule "commute_or" (formula "3") (term "1,0,0,0"))
                                       (rule "ex_pull_out3" (formula "4") (term "1,0"))
                                       (rule "cnf_rightDist" (formula "4") (term "0,1,0"))
                                       (rule "commute_or" (formula "4") (term "1,0,1,0"))
                                       (rule "ex_pull_out3" (formula "2") (term "1,0"))
                                       (rule "cnf_rightDist" (formula "2") (term "0,1,0"))
                                       (rule "commute_or" (formula "2") (term "1,0,1,0"))
                                       (rule "cnf_rightDist" (formula "4") (term "0,0,1,0"))
                                       (rule "commute_or" (formula "4") (term "1,0,0,1,0"))
                                       (rule "cnf_rightDist" (formula "2") (term "0,0,1,0"))
                                       (rule "commute_or" (formula "2") (term "1,0,0,1,0"))
                                       (rule "ex_pull_out3" (formula "4") (term "0"))
                                       (rule "cnf_rightDist" (formula "4") (term "0,0"))
                                       (rule "commute_or_2" (formula "4") (term "1,0,0"))
                                       (rule "commute_or" (formula "4") (term "0,1,0,0"))
                                       (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                                       (rule "commute_or_2" (formula "4") (term "1,0,0,0"))
                                       (rule "shift_paren_or" (formula "4") (term "0,0,0,0"))
                                       (rule "commute_or" (formula "4") (term "0,1,0,0,0"))
                                       (rule "ex_pull_out3" (formula "2") (term "0"))
                                       (rule "cnf_rightDist" (formula "2") (term "0,0"))
                                       (rule "commute_or_2" (formula "2") (term "1,0,0"))
                                       (rule "commute_or" (formula "2") (term "0,1,0,0"))
                                       (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                                       (rule "commute_or_2" (formula "2") (term "1,0,0,0"))
                                       (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
                                       (rule "commute_or" (formula "2") (term "0,1,0,0,0"))
                                       (rule "commute_and_2" (formula "3") (term "0,0"))
                                       (rule "allLeft" (formula "10") (inst "t=j_148"))
                                       (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "32"))
                                       (builtin "One Step Simplification" (formula "10"))
                                       (rule "inEqSimp_contradInEq1" (formula "10") (term "0") (ifseqformula "12"))
                                       (rule "qeq_literals" (formula "10") (term "0,0"))
                                       (builtin "One Step Simplification" (formula "10"))
                                       (rule "commute_and_2" (formula "4") (term "0,0"))
                                       (rule "commute_and_2" (formula "2") (term "0,0"))
                                       (rule "commute_and" (formula "3") (term "0,0,0"))
                                       (rule "commute_and" (formula "4") (term "0,0,0"))
                                       (rule "commute_and" (formula "2") (term "0,0,0"))
                                       (rule "allLeft" (formula "3") (inst "t=add(Z(1(#)), i_1)"))
                                       (rule "exLeft" (formula "3") (inst "sk=j_152"))
                                       (rule "andLeft" (formula "3"))
                                       (rule "andLeft" (formula "3"))
                                       (rule "replace_known_right" (formula "4") (term "1,0") (ifseqformula "34"))
                                       (builtin "One Step Simplification" (formula "4"))
                                       (rule "replace_known_right" (formula "5") (term "1,0") (ifseqformula "34"))
                                       (builtin "One Step Simplification" (formula "5"))
                                       (rule "replace_known_right" (formula "3") (term "1,0") (ifseqformula "34"))
                                       (builtin "One Step Simplification" (formula "3"))
                                       (rule "polySimp_addAssoc" (formula "5") (term "1,1"))
                                       (rule "add_literals" (formula "5") (term "0,1,1"))
                                       (rule "add_zero_left" (formula "5") (term "1,1"))
                                       (rule "inEqSimp_commuteGeq" (formula "4") (term "1,0"))
                                       (rule "inEqSimp_commuteGeq" (formula "5") (term "1,0"))
                                       (rule "inEqSimp_commuteGeq" (formula "3") (term "1,0"))
                                       (rule "inEqSimp_homoInEq0" (formula "4") (term "0,0"))
                                       (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0"))
                                       (rule "mul_literals" (formula "4") (term "0,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "4") (term "0,0,0"))
                                       (rule "add_literals" (formula "4") (term "0,0,0,0"))
                                       (rule "inEqSimp_homoInEq0" (formula "5") (term "0,0"))
                                       (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "5") (term "1,0,0,0"))
                                       (rule "mul_literals" (formula "5") (term "0,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "5") (term "0,0,0"))
                                       (rule "add_literals" (formula "5") (term "0,0,0,0"))
                                       (rule "inEqSimp_homoInEq0" (formula "3") (term "0,0"))
                                       (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "3") (term "1,0,0,0"))
                                       (rule "mul_literals" (formula "3") (term "0,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "3") (term "0,0,0"))
                                       (rule "add_literals" (formula "3") (term "0,0,0,0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "4") (term "0,0"))
                                       (rule "polySimp_mulLiterals" (formula "4") (term "0,0,0"))
                                       (rule "polySimp_elimOne" (formula "4") (term "0,0,0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "5") (term "0,0"))
                                       (rule "polySimp_mulLiterals" (formula "5") (term "0,0,0"))
                                       (rule "polySimp_elimOne" (formula "5") (term "0,0,0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "3") (term "0,0"))
                                       (rule "polySimp_mulLiterals" (formula "3") (term "0,0,0"))
                                       (rule "polySimp_elimOne" (formula "3") (term "0,0,0"))
                                       (rule "inEqSimp_contradInEq1" (formula "5") (term "1,0") (ifseqformula "10"))
                                       (rule "inEqSimp_homoInEq1" (formula "5") (term "0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "5") (term "1,0,0,1,0"))
                                       (rule "mul_literals" (formula "5") (term "0,1,0,0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "5") (term "0,0,1,0"))
                                       (rule "polySimp_addComm1" (formula "5") (term "0,0,0,1,0"))
                                       (rule "add_literals" (formula "5") (term "0,0,0,0,1,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "5") (term "0,0,1,0"))
                                       (rule "add_literals" (formula "5") (term "1,1,0,0,1,0"))
                                       (rule "times_zero_1" (formula "5") (term "1,0,0,1,0"))
                                       (rule "add_zero_right" (formula "5") (term "0,0,1,0"))
                                       (rule "leq_literals" (formula "5") (term "0,1,0"))
                                       (builtin "One Step Simplification" (formula "5"))
                                       (rule "inEqSimp_contradInEq1" (formula "3") (term "0,0") (ifseqformula "11"))
                                       (rule "qeq_literals" (formula "3") (term "0,0,0"))
                                       (builtin "One Step Simplification" (formula "3"))
                                       (rule "inEqSimp_contradInEq1" (formula "4") (term "0,0") (ifseqformula "11"))
                                       (rule "qeq_literals" (formula "4") (term "0,0,0"))
                                       (builtin "One Step Simplification" (formula "4"))
                                       (rule "inEqSimp_contradInEq1" (formula "5") (term "0") (ifseqformula "11"))
                                       (rule "qeq_literals" (formula "5") (term "0,0"))
                                       (builtin "One Step Simplification" (formula "5"))
                                       (rule "inEqSimp_contradInEq1" (formula "4") (term "0") (ifseqformula "10"))
                                       (rule "inEqSimp_homoInEq1" (formula "4") (term "0,0"))
                                       (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0"))
                                       (rule "mul_literals" (formula "4") (term "0,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "4") (term "0,0,0"))
                                       (rule "polySimp_addComm1" (formula "4") (term "0,0,0,0"))
                                       (rule "add_literals" (formula "4") (term "0,0,0,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "4") (term "0,0,0"))
                                       (rule "add_literals" (formula "4") (term "1,1,0,0,0"))
                                       (rule "times_zero_1" (formula "4") (term "1,0,0,0"))
                                       (rule "add_zero_right" (formula "4") (term "0,0,0"))
                                       (rule "leq_literals" (formula "4") (term "0,0"))
                                       (builtin "One Step Simplification" (formula "4"))
                                       (rule "inEqSimp_contradInEq1" (formula "3") (term "0") (ifseqformula "10"))
                                       (rule "inEqSimp_homoInEq1" (formula "3") (term "0,0"))
                                       (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "3") (term "1,0,0,0"))
                                       (rule "mul_literals" (formula "3") (term "0,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "3") (term "0,0,0"))
                                       (rule "polySimp_addComm1" (formula "3") (term "0,0,0,0"))
                                       (rule "add_literals" (formula "3") (term "0,0,0,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0,0"))
                                       (rule "add_literals" (formula "3") (term "1,1,0,0,0"))
                                       (rule "times_zero_1" (formula "3") (term "1,0,0,0"))
                                       (rule "add_zero_right" (formula "3") (term "0,0,0"))
                                       (rule "leq_literals" (formula "3") (term "0,0"))
                                       (builtin "One Step Simplification" (formula "3"))
                                       (rule "notLeft" (formula "3"))
                                       (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "4"))
                                       (rule "times_zero_1" (formula "3") (term "0,0"))
                                       (rule "add_zero_left" (formula "3") (term "0"))
                                       (rule "allLeft" (formula "5") (inst "t=j_148"))
                                       (rule "exLeft" (formula "5") (inst "sk=j_153"))
                                       (rule "andLeft" (formula "5"))
                                       (rule "andLeft" (formula "5"))
                                       (rule "replace_known_right" (formula "6") (term "1,0") (ifseqformula "38"))
                                       (builtin "One Step Simplification" (formula "6"))
                                       (rule "replace_known_right" (formula "7") (term "1,0") (ifseqformula "38"))
                                       (builtin "One Step Simplification" (formula "7"))
                                       (rule "replace_known_right" (formula "5") (term "1,0") (ifseqformula "38"))
                                       (builtin "One Step Simplification" (formula "5"))
                                       (rule "inEqSimp_commuteGeq" (formula "6") (term "1,0"))
                                       (rule "inEqSimp_commuteGeq" (formula "7") (term "1,0"))
                                       (rule "inEqSimp_commuteGeq" (formula "5") (term "1,0"))
                                       (rule "inEqSimp_contradInEq1" (formula "5") (term "0,0") (ifseqformula "17"))
                                       (rule "qeq_literals" (formula "5") (term "0,0,0"))
                                       (builtin "One Step Simplification" (formula "5"))
                                       (rule "inEqSimp_contradInEq1" (formula "6") (term "1,0") (ifseqformula "18"))
                                       (rule "inEqSimp_homoInEq1" (formula "6") (term "0,1,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0,1,0"))
                                       (rule "add_literals" (formula "6") (term "1,1,0,0,1,0"))
                                       (rule "times_zero_1" (formula "6") (term "1,0,0,1,0"))
                                       (rule "add_zero_right" (formula "6") (term "0,0,1,0"))
                                       (rule "leq_literals" (formula "6") (term "0,1,0"))
                                       (builtin "One Step Simplification" (formula "6"))
                                       (rule "inEqSimp_contradInEq1" (formula "7") (term "1,0") (ifseqformula "18"))
                                       (rule "inEqSimp_homoInEq1" (formula "7") (term "0,1,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0,1,0"))
                                       (rule "add_literals" (formula "7") (term "1,1,0,0,1,0"))
                                       (rule "times_zero_1" (formula "7") (term "1,0,0,1,0"))
                                       (rule "add_zero_right" (formula "7") (term "0,0,1,0"))
                                       (rule "leq_literals" (formula "7") (term "0,1,0"))
                                       (builtin "One Step Simplification" (formula "7"))
                                       (rule "inEqSimp_contradInEq1" (formula "5") (term "0") (ifseqformula "18"))
                                       (rule "inEqSimp_homoInEq1" (formula "5") (term "0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "5") (term "0,0,0"))
                                       (rule "add_literals" (formula "5") (term "1,1,0,0,0"))
                                       (rule "times_zero_1" (formula "5") (term "1,0,0,0"))
                                       (rule "add_zero_right" (formula "5") (term "0,0,0"))
                                       (rule "leq_literals" (formula "5") (term "0,0"))
                                       (builtin "One Step Simplification" (formula "5"))
                                       (rule "notLeft" (formula "5"))
                                       (rule "inEqSimp_contradInEq1" (formula "6") (term "0") (ifseqformula "16"))
                                       (rule "qeq_literals" (formula "6") (term "0,0"))
                                       (builtin "One Step Simplification" (formula "6"))
                                       (rule "inEqSimp_contradInEq1" (formula "5") (term "0") (ifseqformula "16"))
                                       (rule "qeq_literals" (formula "5") (term "0,0"))
                                       (builtin "One Step Simplification" (formula "5"))
                                       (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "6"))
                                       (rule "times_zero_1" (formula "5") (term "0,0"))
                                       (rule "add_zero_left" (formula "5") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                                       (rule "mul_literals" (formula "5") (term "1"))
                                       (rule "inEqSimp_subsumption1" (formula "17") (ifseqformula "5"))
                                       (rule "leq_literals" (formula "17") (term "0"))
                                       (builtin "One Step Simplification" (formula "17"))
                                       (rule "true_left" (formula "17"))
                                       (rule "allLeft" (formula "16") (inst "t=j_152"))
                                       (rule "replace_known_right" (formula "16") (term "1") (ifseqformula "37"))
                                       (builtin "One Step Simplification" (formula "16"))
                                       (rule "inEqSimp_contradInEq1" (formula "16") (term "0") (ifseqformula "3"))
                                       (rule "qeq_literals" (formula "16") (term "0,0"))
                                       (builtin "One Step Simplification" (formula "16"))
                                       (rule "inEqSimp_antiSymm" (formula "16") (ifseqformula "4"))
                                       (rule "applyEq" (formula "17") (term "0") (ifseqformula "16"))
                                       (rule "inEqSimp_homoInEq1" (formula "17"))
                                       (rule "polySimp_pullOutFactor1" (formula "17") (term "0"))
                                       (rule "add_literals" (formula "17") (term "1,0"))
                                       (rule "times_zero_1" (formula "17") (term "0"))
                                       (rule "leq_literals" (formula "17"))
                                       (rule "true_left" (formula "17"))
                                       (rule "applyEqRigid" (formula "3") (term "0") (ifseqformula "16"))
                                       (rule "applyEqRigid" (formula "3") (term "0") (ifseqformula "15"))
                                       (rule "inEqSimp_homoInEq0" (formula "3"))
                                       (rule "polySimp_pullOutFactor1" (formula "3") (term "0"))
                                       (rule "add_literals" (formula "3") (term "1,0"))
                                       (rule "times_zero_1" (formula "3") (term "0"))
                                       (rule "qeq_literals" (formula "3"))
                                       (rule "true_left" (formula "3"))
                                       (rule "applyEqRigid" (formula "35") (term "0,2,0") (ifseqformula "14"))
                                       (rule "eqSymm" (formula "35"))
                                       (rule "applyEq" (formula "35") (term "0,2,0") (ifseqformula "14"))
                                       (rule "eqSymm" (formula "35"))
                                       (rule "close" (formula "35") (ifseqformula "12"))
                                    )
                                 )
                              )
                              (branch "Case 2"
                                 (rule "replace_known_right" (formula "31") (term "0,1") (ifseqformula "33"))
                                 (builtin "One Step Simplification" (formula "31"))
                                 (rule "notLeft" (formula "31"))
                                 (rule "inEqSimp_leqRight" (formula "32"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                 (rule "inEqSimp_leqRight" (formula "32"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                 (rule "polySimp_rightDist" (formula "2") (term "1"))
                                 (rule "mul_literals" (formula "2") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                 (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                 (rule "replace_known_left" (formula "30") (term "0") (ifseqformula "2"))
                                 (builtin "One Step Simplification" (formula "30"))
                                 (rule "andLeft" (formula "30"))
                                 (rule "notLeft" (formula "31"))
                                 (rule "replace_known_left" (formula "32") (term "1") (ifseqformula "30"))
                                 (builtin "One Step Simplification" (formula "32"))
                                 (rule "applyEq" (formula "2") (term "1,1") (ifseqformula "30"))
                                 (rule "applyEq" (formula "32") (term "1") (ifseqformula "30"))
                                 (rule "applyEq" (formula "29") (term "0") (ifseqformula "30"))
                                 (rule "applyEq" (formula "1") (term "0,0,0") (ifseqformula "30"))
                                 (rule "applyEq" (formula "33") (term "1") (ifseqformula "30"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1"))
                                 (rule "inEqSimp_contradEq7" (formula "32") (ifseqformula "1"))
                                 (rule "polySimp_mulComm0" (formula "32") (term "1,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0"))
                                 (rule "add_literals" (formula "32") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "32") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "32") (term "0,0"))
                                 (rule "leq_literals" (formula "32") (term "0"))
                                 (builtin "One Step Simplification" (formula "32"))
                                 (rule "false_right" (formula "32"))
                                 (rule "inEqSimp_subsumption1" (formula "31") (ifseqformula "1"))
                                 (rule "inEqSimp_homoInEq0" (formula "31") (term "0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "31") (term "0,0"))
                                 (rule "add_literals" (formula "31") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "31") (term "1,0,0"))
                                 (rule "add_literals" (formula "31") (term "0,0"))
                                 (rule "qeq_literals" (formula "31") (term "0"))
                                 (builtin "One Step Simplification" (formula "31"))
                                 (rule "true_left" (formula "31"))
                                 (rule "cut_direct" (formula "31") (term "0"))
                                 (branch "CUT: b[1 + i_1] = a[1 + i_1] TRUE"
                                    (builtin "One Step Simplification" (formula "32"))
                                    (rule "allRight" (formula "32") (inst "sk=j_151"))
                                    (rule "cutUpperBound" (formula "32") (ifseqformula "4"))
                                    (branch "Case 1"
                                       (rule "crossInst" (formula "5") (inst "sk=i_3") (ifseqformula "33"))
                                       (rule "orRight" (formula "34"))
                                       (rule "andLeft" (formula "5"))
                                       (rule "orRight" (formula "35"))
                                       (rule "eqSymm" (formula "5"))
                                       (rule "inEqSimp_leqRight" (formula "35"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "inEqSimp_geqRight" (formula "36"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                       (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0,0"))
                                       (rule "inEqSimp_commuteGeq" (formula "8") (term "1,0,0"))
                                       (rule "applyEqRigid" (formula "37") (term "0,2,0") (ifseqformula "3"))
                                       (rule "eqSymm" (formula "37"))
                                       (rule "applyEqRigid" (formula "7") (term "0") (ifseqformula "3"))
                                       (rule "eqSymm" (formula "7"))
                                       (rule "applyEqRigid" (formula "1") (term "1,0") (ifseqformula "3"))
                                       (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                       (rule "polySimp_addComm0" (formula "1") (term "0,0"))
                                       (rule "polySimp_pullOutFactor2b" (formula "1") (term "0"))
                                       (rule "add_literals" (formula "1") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "1") (term "1,0"))
                                       (rule "add_zero_right" (formula "1") (term "0"))
                                       (rule "leq_literals" (formula "1"))
                                       (rule "closeFalse" (formula "1"))
                                    )
                                    (branch "Case 2"
                                       (rule "crossInst" (formula "5") (inst "sk=i_2") (ifseqformula "33"))
                                       (rule "orRight" (formula "34"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "andLeft" (formula "4"))
                                       (rule "orRight" (formula "35"))
                                       (rule "eqSymm" (formula "4"))
                                       (rule "inEqSimp_leqRight" (formula "35"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "inEqSimp_geqRight" (formula "36"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                       (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0,0"))
                                       (rule "inEqSimp_commuteGeq" (formula "7") (term "1,0,0"))
                                       (rule "applyEqRigid" (formula "1") (term "1,0") (ifseqformula "6"))
                                       (rule "applyEqRigid" (formula "36") (term "0") (ifseqformula "6"))
                                       (rule "applyEq" (formula "2") (term "0") (ifseqformula "6"))
                                       (rule "applyEqRigid" (formula "37") (term "0,2,0") (ifseqformula "6"))
                                       (rule "eqSymm" (formula "37"))
                                       (rule "applyEqRigid" (formula "37") (term "0,2,0") (ifseqformula "6"))
                                       (rule "eqSymm" (formula "37"))
                                       (rule "replace_known_right" (formula "7") (term "1,0") (ifseqformula "37"))
                                       (builtin "One Step Simplification" (formula "7"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                       (rule "polySimp_elimOne" (formula "1") (term "1"))
                                       (rule "inEqSimp_contradEq3" (formula "36") (ifseqformula "1"))
                                       (rule "polySimp_rightDist" (formula "36") (term "1,0,0"))
                                       (rule "mul_literals" (formula "36") (term "0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "36") (term "0,0"))
                                       (rule "polySimp_addComm0" (formula "36") (term "0,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "36") (term "0,0"))
                                       (rule "add_literals" (formula "36") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "36") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "36") (term "0,0"))
                                       (rule "qeq_literals" (formula "36") (term "0"))
                                       (builtin "One Step Simplification" (formula "36"))
                                       (rule "false_right" (formula "36"))
                                       (rule "inEqSimp_contradInEq1" (formula "7") (term "0,0") (ifseqformula "2"))
                                       (rule "qeq_literals" (formula "7") (term "0,0,0"))
                                       (builtin "One Step Simplification" (formula "7"))
                                       (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "1"))
                                       (rule "times_zero_1" (formula "2") (term "0,0"))
                                       (rule "add_zero_left" (formula "2") (term "0"))
                                       (rule "ex_pull_out3" (formula "8") (term "0"))
                                       (rule "cnf_rightDist" (formula "8") (term "0,0"))
                                       (rule "commute_or" (formula "8") (term "1,0,0"))
                                       (rule "ex_pull_out3" (formula "9") (term "1,0"))
                                       (rule "ex_pull_out3" (formula "5") (term "1,0"))
                                       (rule "cnf_rightDist" (formula "8") (term "0,0,0"))
                                       (rule "commute_or" (formula "8") (term "1,0,0,0"))
                                       (rule "cnf_rightDist" (formula "9") (term "0,1,0"))
                                       (rule "commute_or" (formula "9") (term "1,0,1,0"))
                                       (rule "cnf_rightDist" (formula "5") (term "0,1,0"))
                                       (rule "commute_or" (formula "5") (term "1,0,1,0"))
                                       (rule "cnf_rightDist" (formula "9") (term "0,0,1,0"))
                                       (rule "commute_or" (formula "9") (term "1,0,0,1,0"))
                                       (rule "cnf_rightDist" (formula "5") (term "0,0,1,0"))
                                       (rule "commute_or" (formula "5") (term "1,0,0,1,0"))
                                       (rule "ex_pull_out3" (formula "9") (term "0"))
                                       (rule "cnf_rightDist" (formula "9") (term "0,0"))
                                       (rule "commute_or_2" (formula "9") (term "1,0,0"))
                                       (rule "commute_or" (formula "9") (term "0,1,0,0"))
                                       (rule "cnf_rightDist" (formula "9") (term "0,0,0"))
                                       (rule "commute_or_2" (formula "9") (term "1,0,0,0"))
                                       (rule "shift_paren_or" (formula "9") (term "0,0,0,0"))
                                       (rule "commute_or" (formula "9") (term "0,1,0,0,0"))
                                       (rule "ex_pull_out3" (formula "5") (term "0"))
                                       (rule "cnf_rightDist" (formula "5") (term "0,0"))
                                       (rule "commute_or_2" (formula "5") (term "1,0,0"))
                                       (rule "commute_or" (formula "5") (term "0,1,0,0"))
                                       (rule "cnf_rightDist" (formula "5") (term "0,0,0"))
                                       (rule "commute_or_2" (formula "5") (term "1,0,0,0"))
                                       (rule "shift_paren_or" (formula "5") (term "0,0,0,0"))
                                       (rule "commute_or" (formula "5") (term "0,1,0,0,0"))
                                       (rule "commute_and_2" (formula "8") (term "0,0"))
                                       (rule "allLeft" (formula "15") (inst "t=i_2"))
                                       (rule "replace_known_right" (formula "15") (term "1") (ifseqformula "37"))
                                       (builtin "One Step Simplification" (formula "15"))
                                       (rule "inEqSimp_contradInEq1" (formula "15") (term "0") (ifseqformula "2"))
                                       (rule "qeq_literals" (formula "15") (term "0,0"))
                                       (builtin "One Step Simplification" (formula "15"))
                                       (rule "inEqSimp_antiSymm" (formula "15") (ifseqformula "1"))
                                       (rule "applyEqRigid" (formula "1") (term "0") (ifseqformula "15"))
                                       (rule "inEqSimp_homoInEq0" (formula "1"))
                                       (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
                                       (rule "add_literals" (formula "1") (term "1,0"))
                                       (rule "times_zero_1" (formula "1") (term "0"))
                                       (rule "qeq_literals" (formula "1"))
                                       (rule "true_left" (formula "1"))
                                       (rule "applyEq" (formula "1") (term "0") (ifseqformula "14"))
                                       (rule "applyEqRigid" (formula "5") (term "1,0") (ifseqformula "13"))
                                       (rule "applyEqRigid" (formula "36") (term "0,2,0") (ifseqformula "13"))
                                       (rule "eqSymm" (formula "36"))
                                       (rule "applyEq" (formula "5") (term "1,1,1,0,0,1") (ifseqformula "13"))
                                       (rule "applyEqRigid" (formula "14") (term "0") (ifseqformula "13"))
                                       (rule "inEqSimp_homoInEq1" (formula "14"))
                                       (rule "polySimp_pullOutFactor1" (formula "14") (term "0"))
                                       (rule "add_literals" (formula "14") (term "1,0"))
                                       (rule "times_zero_1" (formula "14") (term "0"))
                                       (rule "leq_literals" (formula "14"))
                                       (rule "true_left" (formula "14"))
                                       (rule "applyEqRigid" (formula "35") (term "0,2,0") (ifseqformula "13"))
                                       (rule "eqSymm" (formula "35"))
                                       (rule "close" (formula "35") (ifseqformula "12"))
                                    )
                                 )
                                 (branch "CUT: b[1 + i_1] = a[1 + i_1] FALSE"
                                    (builtin "One Step Simplification" (formula "32"))
                                    (rule "false_right" (formula "32"))
                                    (rule "ex_pull_out3" (formula "3") (term "0"))
                                    (rule "cnf_rightDist" (formula "3") (term "0,0"))
                                    (rule "commute_or" (formula "3") (term "1,0,0"))
                                    (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                                    (rule "commute_or" (formula "3") (term "1,0,0,0"))
                                    (rule "ex_pull_out3" (formula "4") (term "1,0"))
                                    (rule "cnf_rightDist" (formula "4") (term "0,1,0"))
                                    (rule "commute_or" (formula "4") (term "1,0,1,0"))
                                    (rule "cnf_rightDist" (formula "4") (term "0,0,1,0"))
                                    (rule "commute_or" (formula "4") (term "1,0,0,1,0"))
                                    (rule "ex_pull_out3" (formula "2") (term "1,0"))
                                    (rule "cnf_rightDist" (formula "2") (term "0,1,0"))
                                    (rule "commute_or" (formula "2") (term "1,0,1,0"))
                                    (rule "cnf_rightDist" (formula "2") (term "0,0,1,0"))
                                    (rule "commute_or" (formula "2") (term "1,0,0,1,0"))
                                    (rule "ex_pull_out3" (formula "4") (term "0"))
                                    (rule "cnf_rightDist" (formula "4") (term "0,0"))
                                    (rule "commute_or_2" (formula "4") (term "1,0,0"))
                                    (rule "commute_or" (formula "4") (term "0,1,0,0"))
                                    (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                                    (rule "commute_or_2" (formula "4") (term "1,0,0,0"))
                                    (rule "shift_paren_or" (formula "4") (term "0,0,0,0"))
                                    (rule "commute_or" (formula "4") (term "0,1,0,0,0"))
                                    (rule "ex_pull_out3" (formula "2") (term "0"))
                                    (rule "cnf_rightDist" (formula "2") (term "0,0"))
                                    (rule "commute_or_2" (formula "2") (term "1,0,0"))
                                    (rule "commute_or" (formula "2") (term "0,1,0,0"))
                                    (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                                    (rule "commute_or_2" (formula "2") (term "1,0,0,0"))
                                    (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
                                    (rule "commute_or" (formula "2") (term "0,1,0,0,0"))
                                    (rule "commute_and_2" (formula "3") (term "0,0"))
                                    (rule "allLeft" (formula "10") (inst "t=j_148"))
                                    (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "33"))
                                    (builtin "One Step Simplification" (formula "10"))
                                    (rule "inEqSimp_contradInEq1" (formula "10") (term "0") (ifseqformula "12"))
                                    (rule "qeq_literals" (formula "10") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "10"))
                                    (rule "commute_and_2" (formula "4") (term "0,0"))
                                    (rule "commute_and_2" (formula "2") (term "0,0"))
                                    (rule "commute_and" (formula "3") (term "0,0,0"))
                                    (rule "commute_and" (formula "4") (term "0,0,0"))
                                    (rule "commute_and" (formula "2") (term "0,0,0"))
                                    (rule "allLeft" (formula "3") (inst "t=j_148"))
                                    (rule "exLeft" (formula "3") (inst "sk=j_149"))
                                    (rule "andLeft" (formula "3"))
                                    (rule "andLeft" (formula "3"))
                                    (rule "replace_known_right" (formula "4") (term "1,0") (ifseqformula "36"))
                                    (builtin "One Step Simplification" (formula "4"))
                                    (rule "replace_known_right" (formula "5") (term "1,0") (ifseqformula "36"))
                                    (builtin "One Step Simplification" (formula "5"))
                                    (rule "replace_known_right" (formula "3") (term "1,0") (ifseqformula "36"))
                                    (builtin "One Step Simplification" (formula "3"))
                                    (rule "inEqSimp_commuteGeq" (formula "4") (term "1,0"))
                                    (rule "inEqSimp_commuteGeq" (formula "5") (term "1,0"))
                                    (rule "inEqSimp_commuteGeq" (formula "3") (term "1,0"))
                                    (rule "inEqSimp_contradInEq1" (formula "5") (term "0,0") (ifseqformula "15"))
                                    (rule "qeq_literals" (formula "5") (term "0,0,0"))
                                    (builtin "One Step Simplification" (formula "5"))
                                    (rule "inEqSimp_contradInEq1" (formula "4") (term "0,0") (ifseqformula "15"))
                                    (rule "qeq_literals" (formula "4") (term "0,0,0"))
                                    (builtin "One Step Simplification" (formula "4"))
                                    (rule "inEqSimp_contradInEq1" (formula "3") (term "1,0") (ifseqformula "16"))
                                    (rule "inEqSimp_homoInEq1" (formula "3") (term "0,1,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0,1,0"))
                                    (rule "add_literals" (formula "3") (term "1,1,0,0,1,0"))
                                    (rule "times_zero_1" (formula "3") (term "1,0,0,1,0"))
                                    (rule "add_zero_right" (formula "3") (term "0,0,1,0"))
                                    (rule "leq_literals" (formula "3") (term "0,1,0"))
                                    (builtin "One Step Simplification" (formula "3"))
                                    (rule "inEqSimp_contradInEq1" (formula "5") (term "0") (ifseqformula "16"))
                                    (rule "inEqSimp_homoInEq1" (formula "5") (term "0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "5") (term "0,0,0"))
                                    (rule "add_literals" (formula "5") (term "1,1,0,0,0"))
                                    (rule "times_zero_1" (formula "5") (term "1,0,0,0"))
                                    (rule "add_zero_right" (formula "5") (term "0,0,0"))
                                    (rule "leq_literals" (formula "5") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "5"))
                                    (rule "inEqSimp_contradInEq1" (formula "3") (term "0") (ifseqformula "15"))
                                    (rule "qeq_literals" (formula "3") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "3"))
                                    (rule "notLeft" (formula "3"))
                                    (rule "inEqSimp_contradInEq1" (formula "3") (term "0") (ifseqformula "15"))
                                    (rule "inEqSimp_homoInEq1" (formula "3") (term "0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0,0"))
                                    (rule "add_literals" (formula "3") (term "1,1,0,0,0"))
                                    (rule "times_zero_1" (formula "3") (term "1,0,0,0"))
                                    (rule "add_zero_right" (formula "3") (term "0,0,0"))
                                    (rule "leq_literals" (formula "3") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "3"))
                                    (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "4"))
                                    (rule "times_zero_1" (formula "3") (term "0,0"))
                                    (rule "add_zero_left" (formula "3") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                                    (rule "mul_literals" (formula "3") (term "1"))
                                    (rule "inEqSimp_subsumption1" (formula "15") (ifseqformula "3"))
                                    (rule "leq_literals" (formula "15") (term "0"))
                                    (builtin "One Step Simplification" (formula "15"))
                                    (rule "true_left" (formula "15"))
                                    (rule "allLeft" (formula "6") (inst "t=add(Z(1(#)), i_1)"))
                                    (rule "exLeft" (formula "6") (inst "sk=j_150"))
                                    (rule "andLeft" (formula "6"))
                                    (rule "andLeft" (formula "6"))
                                    (rule "replace_known_right" (formula "7") (term "1,0") (ifseqformula "38"))
                                    (builtin "One Step Simplification" (formula "7"))
                                    (rule "replace_known_right" (formula "8") (term "1,0") (ifseqformula "38"))
                                    (builtin "One Step Simplification" (formula "8"))
                                    (rule "replace_known_right" (formula "6") (term "1,0") (ifseqformula "38"))
                                    (builtin "One Step Simplification" (formula "6"))
                                    (rule "polySimp_addAssoc" (formula "8") (term "1,1"))
                                    (rule "add_literals" (formula "8") (term "0,1,1"))
                                    (rule "add_zero_left" (formula "8") (term "1,1"))
                                    (rule "inEqSimp_commuteGeq" (formula "7") (term "1,0"))
                                    (rule "inEqSimp_commuteGeq" (formula "8") (term "1,0"))
                                    (rule "inEqSimp_commuteGeq" (formula "6") (term "1,0"))
                                    (rule "inEqSimp_homoInEq0" (formula "7") (term "0,0"))
                                    (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "7") (term "1,0,0,0"))
                                    (rule "mul_literals" (formula "7") (term "0,1,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "7") (term "0,0,0"))
                                    (rule "add_literals" (formula "7") (term "0,0,0,0"))
                                    (rule "inEqSimp_homoInEq0" (formula "8") (term "0,0"))
                                    (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0"))
                                    (rule "mul_literals" (formula "8") (term "0,1,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "8") (term "0,0,0"))
                                    (rule "add_literals" (formula "8") (term "0,0,0,0"))
                                    (rule "inEqSimp_homoInEq0" (formula "6") (term "0,0"))
                                    (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "6") (term "1,0,0,0"))
                                    (rule "mul_literals" (formula "6") (term "0,1,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "6") (term "0,0,0"))
                                    (rule "add_literals" (formula "6") (term "0,0,0,0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "7") (term "0,0"))
                                    (rule "polySimp_mulLiterals" (formula "7") (term "0,0,0"))
                                    (rule "polySimp_elimOne" (formula "7") (term "0,0,0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "8") (term "0,0"))
                                    (rule "polySimp_mulLiterals" (formula "8") (term "0,0,0"))
                                    (rule "polySimp_elimOne" (formula "8") (term "0,0,0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "6") (term "0,0"))
                                    (rule "polySimp_mulLiterals" (formula "6") (term "0,0,0"))
                                    (rule "polySimp_elimOne" (formula "6") (term "0,0,0"))
                                    (rule "inEqSimp_contradInEq1" (formula "7") (term "1,0") (ifseqformula "13"))
                                    (rule "inEqSimp_homoInEq1" (formula "7") (term "0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0"))
                                    (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0"))
                                    (rule "polySimp_addComm1" (formula "7") (term "0,0,0,1,0"))
                                    (rule "add_literals" (formula "7") (term "0,0,0,0,1,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0,1,0"))
                                    (rule "add_literals" (formula "7") (term "1,1,0,0,1,0"))
                                    (rule "times_zero_1" (formula "7") (term "1,0,0,1,0"))
                                    (rule "add_zero_right" (formula "7") (term "0,0,1,0"))
                                    (rule "leq_literals" (formula "7") (term "0,1,0"))
                                    (builtin "One Step Simplification" (formula "7"))
                                    (rule "inEqSimp_contradInEq1" (formula "8") (term "1,0") (ifseqformula "13"))
                                    (rule "inEqSimp_homoInEq1" (formula "8") (term "0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0"))
                                    (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0"))
                                    (rule "polySimp_addComm1" (formula "8") (term "0,0,0,1,0"))
                                    (rule "add_literals" (formula "8") (term "0,0,0,0,1,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0,1,0"))
                                    (rule "add_literals" (formula "8") (term "1,1,0,0,1,0"))
                                    (rule "times_zero_1" (formula "8") (term "1,0,0,1,0"))
                                    (rule "add_zero_right" (formula "8") (term "0,0,1,0"))
                                    (rule "leq_literals" (formula "8") (term "0,1,0"))
                                    (builtin "One Step Simplification" (formula "8"))
                                    (rule "inEqSimp_contradInEq1" (formula "6") (term "1,0") (ifseqformula "13"))
                                    (rule "inEqSimp_homoInEq1" (formula "6") (term "0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0"))
                                    (rule "mul_literals" (formula "6") (term "0,1,0,0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0"))
                                    (rule "polySimp_addComm1" (formula "6") (term "0,0,0,1,0"))
                                    (rule "add_literals" (formula "6") (term "0,0,0,0,1,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0,1,0"))
                                    (rule "add_literals" (formula "6") (term "1,1,0,0,1,0"))
                                    (rule "times_zero_1" (formula "6") (term "1,0,0,1,0"))
                                    (rule "add_zero_right" (formula "6") (term "0,0,1,0"))
                                    (rule "leq_literals" (formula "6") (term "0,1,0"))
                                    (builtin "One Step Simplification" (formula "6"))
                                    (rule "inEqSimp_contradInEq1" (formula "8") (term "0") (ifseqformula "14"))
                                    (rule "qeq_literals" (formula "8") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "8"))
                                    (rule "inEqSimp_contradInEq1" (formula "7") (term "0") (ifseqformula "14"))
                                    (rule "qeq_literals" (formula "7") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "7"))
                                    (rule "inEqSimp_contradInEq1" (formula "6") (term "0") (ifseqformula "14"))
                                    (rule "qeq_literals" (formula "6") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "6"))
                                    (rule "notLeft" (formula "6"))
                                    (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "7"))
                                    (rule "times_zero_1" (formula "6") (term "0,0"))
                                    (rule "add_zero_left" (formula "6") (term "0"))
                                    (rule "allLeft" (formula "16") (inst "t=j_149"))
                                    (rule "replace_known_right" (formula "16") (term "1") (ifseqformula "38"))
                                    (builtin "One Step Simplification" (formula "16"))
                                    (rule "inEqSimp_contradInEq1" (formula "16") (term "0") (ifseqformula "4"))
                                    (rule "qeq_literals" (formula "16") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "16"))
                                    (rule "inEqSimp_exactShadow3" (formula "16") (ifseqformula "5"))
                                    (rule "polySimp_mulComm0" (formula "16") (term "0,0"))
                                    (rule "polySimp_addAssoc" (formula "16") (term "0"))
                                    (rule "polySimp_addComm0" (formula "16") (term "0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "16"))
                                    (rule "polySimp_mulComm0" (formula "16") (term "1"))
                                    (rule "polySimp_rightDist" (formula "16") (term "1"))
                                    (rule "mul_literals" (formula "16") (term "0,1"))
                                    (rule "polySimp_mulLiterals" (formula "16") (term "1,1"))
                                    (rule "polySimp_elimOne" (formula "16") (term "1,1"))
                                    (rule "inEqSimp_subsumption1" (formula "15") (ifseqformula "16"))
                                    (rule "inEqSimp_homoInEq0" (formula "15") (term "0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0"))
                                    (rule "add_literals" (formula "15") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "15") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "15") (term "0,0"))
                                    (rule "qeq_literals" (formula "15") (term "0"))
                                    (builtin "One Step Simplification" (formula "15"))
                                    (rule "true_left" (formula "15"))
                                    (rule "allLeft" (formula "17") (inst "t=j_150"))
                                    (rule "replace_known_right" (formula "17") (term "1") (ifseqformula "38"))
                                    (builtin "One Step Simplification" (formula "17"))
                                    (rule "inEqSimp_contradInEq1" (formula "17") (term "0") (ifseqformula "6"))
                                    (rule "qeq_literals" (formula "17") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "17"))
                                    (rule "inEqSimp_antiSymm" (formula "17") (ifseqformula "7"))
                                    (rule "applyEqRigid" (formula "7") (term "0") (ifseqformula "17"))
                                    (rule "inEqSimp_homoInEq0" (formula "7"))
                                    (rule "polySimp_pullOutFactor1" (formula "7") (term "0"))
                                    (rule "add_literals" (formula "7") (term "1,0"))
                                    (rule "times_zero_1" (formula "7") (term "0"))
                                    (rule "qeq_literals" (formula "7"))
                                    (rule "true_left" (formula "7"))
                                    (rule "applyEq" (formula "17") (term "0") (ifseqformula "16"))
                                    (rule "inEqSimp_homoInEq1" (formula "17"))
                                    (rule "polySimp_pullOutFactor1" (formula "17") (term "0"))
                                    (rule "add_literals" (formula "17") (term "1,0"))
                                    (rule "times_zero_1" (formula "17") (term "0"))
                                    (rule "leq_literals" (formula "17"))
                                    (rule "true_left" (formula "17"))
                                    (rule "applyEqRigid" (formula "6") (term "0") (ifseqformula "16"))
                                    (rule "applyEq" (formula "36") (term "0,2,0") (ifseqformula "15"))
                                    (rule "eqSymm" (formula "36"))
                                    (rule "applyEq" (formula "36") (term "0,2,0") (ifseqformula "15"))
                                    (rule "eqSymm" (formula "36"))
                                    (rule "close" (formula "36") (ifseqformula "12"))
                                 )
                              )
                           )
                           (branch "Use Case"
                              (rule "allRight" (formula "25") (inst "sk=j_147"))
                              (rule "impRight" (formula "25"))
                              (rule "andLeft" (formula "1"))
                              (rule "eqSymm" (formula "24") (term "0,1,0,0"))
                              (rule "eqSymm" (formula "24") (term "1,0,1,0"))
                              (rule "eqSymm" (formula "23") (term "0,1,1"))
                              (rule "eqSymm" (formula "26") (term "1,0,1,1,0"))
                              (rule "eqSymm" (formula "22") (term "1"))
                              (rule "eqSymm" (formula "20") (term "0,1"))
                              (rule "eqSymm" (formula "19") (term "1"))
                              (rule "eqSymm" (formula "23") (term "0,1"))
                              (rule "eqSymm" (formula "5"))
                              (rule "eqSymm" (formula "4"))
                              (rule "eqSymm" (formula "3") (term "0,1,1,0"))
                              (rule "eqSymm" (formula "3") (term "1,0,1,1,1,0"))
                              (rule "eqSymm" (formula "27"))
                              (rule "replace_known_right" (formula "13") (term "0") (ifseqformula "30"))
                              (builtin "One Step Simplification" (formula "13"))
                              (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "29"))
                              (builtin "One Step Simplification" (formula "12"))
                              (rule "inEqSimp_leqRight" (formula "28"))
                              (rule "times_zero_1" (formula "1") (term "1,0,0"))
                              (rule "add_zero_right" (formula "1") (term "0,0"))
                              (rule "inEqSimp_leqRight" (formula "31"))
                              (rule "times_zero_1" (formula "1") (term "1,0,0"))
                              (rule "add_zero_right" (formula "1") (term "0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0,1,0"))
                              (rule "inEqSimp_gtToGeq" (formula "25") (term "0"))
                              (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0"))
                              (rule "polySimp_addComm1" (formula "25") (term "0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,0,1,1,1,0"))
                              (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,0,1,1,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "5") (term "0,1,0"))
                              (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "28") (term "0,1,0"))
                              (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,0,1,0"))
                              (rule "polySimp_addComm1" (formula "28") (term "0,0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "28") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "28") (term "1,0,0,1,1,0"))
                              (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,0,1,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "27") (term "0,1,0"))
                              (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0,1,0"))
                              (rule "inEqSimp_gtToGeq" (formula "17"))
                              (rule "times_zero_1" (formula "17") (term "1,0,0"))
                              (rule "add_zero_right" (formula "17") (term "0,0"))
                              (rule "inEqSimp_gtToGeq" (formula "21") (term "0"))
                              (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0,1,1,0"))
                              (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0,1,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "4"))
                              (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "4") (term "0"))
                              (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0,1,1,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "23") (term "0"))
                              (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0,1,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0,1,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "3"))
                              (rule "applyEq" (formula "23") (term "1,1") (ifseqformula "8"))
                              (rule "applyEq" (formula "8") (term "1") (ifseqformula "7"))
                              (rule "applyEq" (formula "20") (term "1,1") (ifseqformula "9"))
                              (rule "applyEq" (formula "21") (term "1,0,1") (ifseqformula "9"))
                              (rule "applyEq" (formula "23") (term "1,1") (ifseqformula "7"))
                              (rule "applyEq" (formula "24") (term "1,0,1") (ifseqformula "8"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                              (rule "mul_literals" (formula "2") (term "1"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                              (rule "mul_literals" (formula "1") (term "1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0,1,0"))
                              (rule "mul_literals" (formula "25") (term "0,1,1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0,1,0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "24") (term "0"))
                              (rule "polySimp_mulLiterals" (formula "24") (term "0,0"))
                              (rule "polySimp_elimOne" (formula "24") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0,1,1,1,0"))
                              (rule "polySimp_mulComm0" (formula "5") (term "1,1,0,0,1,1,1,0"))
                              (rule "polySimp_rightDist" (formula "5") (term "1,1,0,0,1,1,1,0"))
                              (rule "mul_literals" (formula "5") (term "0,1,1,0,0,1,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,0,1,1,1,0"))
                              (rule "polySimp_elimOne" (formula "5") (term "1,1,1,0,0,1,1,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,1,0"))
                              (rule "polySimp_mulComm0" (formula "5") (term "1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "5") (term "1,0,1,0"))
                              (rule "mul_literals" (formula "5") (term "0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,1,0"))
                              (rule "polySimp_elimOne" (formula "5") (term "1,1,0,1,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "27") (term "0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "27") (term "0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "27") (term "0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "27") (term "0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0,0"))
                              (rule "mul_literals" (formula "25") (term "0,1,1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0,1,1,0"))
                              (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0,1,1,0"))
                              (rule "mul_literals" (formula "27") (term "0,1,1,0,0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0,1,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "26") (term "0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,1,0"))
                              (rule "polySimp_mulComm0" (formula "26") (term "1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "26") (term "1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,1,0"))
                              (rule "mul_literals" (formula "26") (term "0,1,0,1,0"))
                              (rule "polySimp_elimOne" (formula "26") (term "1,1,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "0"))
                              (rule "polySimp_mulComm0" (formula "21") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "21") (term "1,0"))
                              (rule "mul_literals" (formula "21") (term "0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0"))
                              (rule "polySimp_elimOne" (formula "21") (term "1,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0,1,1,0"))
                              (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0,1,1,0"))
                              (rule "mul_literals" (formula "26") (term "0,1,1,0,0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0,1,1,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                              (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                              (rule "polySimp_elimOne" (formula "4") (term "0"))
                              (rule "nnf_ex2all" (formula "25"))
                              (rule "nnf_ex2all" (formula "27"))
                              (rule "nnf_ex2all" (formula "27"))
                              (rule "nnf_imp2or" (formula "8") (term "0"))
                              (rule "inEqSimp_notGeq" (formula "8") (term "0,0"))
                              (rule "times_zero_1" (formula "8") (term "1,0,0,0,0"))
                              (rule "add_literals" (formula "8") (term "0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0"))
                              (rule "mul_literals" (formula "8") (term "1,0,0"))
                              (rule "nnf_notAnd" (formula "3") (term "0"))
                              (rule "nnf_notAnd" (formula "2") (term "0"))
                              (rule "nnf_notAnd" (formula "1") (term "0"))
                              (rule "nnf_imp2or" (formula "8") (term "1,0"))
                              (rule "inEqSimp_notLeq" (formula "8") (term "0,1,0"))
                              (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,1,0"))
                              (rule "mul_literals" (formula "8") (term "0,1,0,0,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "8") (term "0,0,0,1,0"))
                              (rule "add_literals" (formula "8") (term "0,0,0,0,1,0"))
                              (rule "add_zero_left" (formula "8") (term "0,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "8") (term "1,0,1,0"))
                              (rule "polySimp_elimOne" (formula "8") (term "1,0,1,0"))
                              (rule "nnf_notAnd" (formula "3") (term "0,0"))
                              (builtin "One Step Simplification" (formula "3"))
                              (rule "nnf_notAnd" (formula "2") (term "1,0"))
                              (rule "inEqSimp_notGeq" (formula "2") (term "0,1,0"))
                              (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,1,0"))
                              (rule "mul_literals" (formula "2") (term "0,1,0,0,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,1,0"))
                              (rule "add_literals" (formula "2") (term "0,0,0,0,1,0"))
                              (rule "add_zero_left" (formula "2") (term "0,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,0"))
                              (rule "polySimp_elimOne" (formula "2") (term "1,0,1,0"))
                              (rule "nnf_notAnd" (formula "2") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "2") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "2") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "2") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "2") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "2") (term "1,1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "2") (term "0,0,0"))
                              (rule "times_zero_1" (formula "2") (term "1,0,0,0,0,0"))
                              (rule "add_literals" (formula "2") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "0,0,0"))
                              (rule "mul_literals" (formula "2") (term "1,0,0,0"))
                              (rule "nnf_notAnd" (formula "1") (term "1,0"))
                              (rule "inEqSimp_notLeq" (formula "1") (term "0,1,0"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0,1,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,0,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,1,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0,0,1,0"))
                              (rule "add_zero_left" (formula "1") (term "0,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0"))
                              (rule "polySimp_elimOne" (formula "1") (term "1,0,1,0"))
                              (rule "nnf_notAnd" (formula "1") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                              (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                              (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                              (rule "nnf_notAll" (formula "3") (term "1,0"))
                              (rule "nnf_notAnd" (formula "3") (term "0,0,0"))
                              (rule "inEqSimp_notGeq" (formula "3") (term "0,0,0,0"))
                              (rule "times_zero_1" (formula "3") (term "1,0,0,0,0,0,0"))
                              (rule "add_literals" (formula "3") (term "0,0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "0,0,0,0"))
                              (rule "mul_literals" (formula "3") (term "1,0,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "3") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "3") (term "1,0,0,1,0,0,0"))
                              (rule "mul_literals" (formula "3") (term "0,1,0,0,1,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "3") (term "0,0,1,0,0,0"))
                              (rule "add_literals" (formula "3") (term "0,0,0,1,0,0,0"))
                              (rule "add_zero_left" (formula "3") (term "0,0,1,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "3") (term "1,1,0,0,0"))
                              (rule "nnf_notAll" (formula "2") (term "1,1,0"))
                              (rule "nnf_imp2or" (formula "8") (term "0,1,1,1,0"))
                              (rule "nnf_notAll" (formula "1") (term "1,1,0"))
                              (rule "nnf_imp2or" (formula "3") (term "0,0,1,0"))
                              (rule "nnf_notOr" (formula "3") (term "0,1,0"))
                              (builtin "One Step Simplification" (formula "3"))
                              (rule "nnf_imp2or" (formula "2") (term "0,0,1,1,0"))
                              (rule "nnf_notOr" (formula "2") (term "0,1,1,0"))
                              (builtin "One Step Simplification" (formula "2"))
                              (rule "nnf_imp2or" (formula "1") (term "0,0,1,1,0"))
                              (rule "nnf_notOr" (formula "1") (term "0,1,1,0"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "nnf_notAnd" (formula "8") (term "0,0,1,1,1,0"))
                              (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0,1,1,1,0"))
                              (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0,1,1,1,0"))
                              (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0,1,1,1,0"))
                              (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0,1,1,1,0"))
                              (rule "add_literals" (formula "8") (term "0,0,0,1,0,0,1,1,1,0"))
                              (rule "add_zero_left" (formula "8") (term "0,0,1,0,0,1,1,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0,1,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,1,1,1,0"))
                              (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0,1,1,1,0"))
                              (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0,1,1,1,0"))
                              (rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0,1,1,1,0"))
                              (rule "add_zero_right" (formula "8") (term "0,0,0,0,0,1,1,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0,1,1,1,0"))
                              (rule "mul_literals" (formula "8") (term "1,0,0,0,1,1,1,0"))
                              (rule "arrayLengthIsAShort" (formula "24") (term "1,0,1,1"))
                              (builtin "One Step Simplification" (formula "24"))
                              (rule "true_left" (formula "24"))
                              (rule "arrayLengthNotNegative" (formula "24") (term "0,0,1,1"))
                              (rule "arrayLengthIsAShort" (formula "25") (term "0,0,1,1"))
                              (builtin "One Step Simplification" (formula "25"))
                              (rule "true_left" (formula "25"))
                              (rule "arrayLengthNotNegative" (formula "25") (term "1,0,1,1"))
                              (rule "equiv_left" (formula "23"))
                              (branch "Case 1"
                                 (rule "replace_known_left" (formula "30") (term "0,1") (ifseqformula "24"))
                                 (builtin "One Step Simplification" (formula "30"))
                                 (rule "applyEq" (formula "30") (term "0,0") (ifseqformula "24"))
                                 (rule "inEqSimp_homoInEq0" (formula "30") (term "0"))
                                 (rule "polySimp_addComm1" (formula "30") (term "0,0"))
                                 (rule "applyEq" (formula "30") (term "0,0,1") (ifseqformula "24"))
                                 (rule "eqSymm" (formula "30") (term "0,1"))
                                 (rule "applyEq" (formula "23") (term "0") (ifseqformula "24"))
                                 (rule "inEqSimp_commuteLeq" (formula "23"))
                                 (rule "applyEq" (formula "27") (term "0,0,1,1") (ifseqformula "24"))
                                 (rule "eqSymm" (formula "27") (term "0,1,1"))
                                 (builtin "One Step Simplification" (formula "27"))
                                 (rule "notLeft" (formula "27"))
                                 (rule "inEqSimp_geqRight" (formula "30"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0,0"))
                                 (rule "applyEq" (formula "29") (term "0,0") (ifseqformula "25"))
                                 (rule "inEqSimp_commuteGeq" (formula "29") (term "0"))
                                 (rule "applyEq" (formula "26") (term "0") (ifseqformula "25"))
                                 (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "25"))
                                 (rule "polySimp_addComm0" (formula "1") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "0"))
                                 (rule "polySimp_mulComm0" (formula "30") (term "1,0"))
                                 (rule "polySimp_rightDist" (formula "30") (term "1,0"))
                                 (rule "mul_literals" (formula "30") (term "0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0"))
                                 (rule "polySimp_elimOne" (formula "30") (term "1,1,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "0"))
                                 (rule "equiv_left" (formula "29"))
                                 (branch "Case 1"
                                    (rule "notLeft" (formula "30"))
                                    (rule "replace_known_right" (formula "28") (term "1") (ifseqformula "30"))
                                    (builtin "One Step Simplification" (formula "28"))
                                    (rule "notLeft" (formula "28"))
                                    (rule "inEqSimp_leqRight" (formula "29"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1"))
                                    (rule "mul_literals" (formula "1") (term "0,1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                    (rule "inEqSimp_contradEq7" (formula "29") (ifseqformula "28"))
                                    (rule "polySimp_mulComm0" (formula "29") (term "1,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0"))
                                    (rule "add_literals" (formula "29") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "29") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "29") (term "0,0"))
                                    (rule "leq_literals" (formula "29") (term "0"))
                                    (builtin "One Step Simplification" (formula "29"))
                                    (rule "false_right" (formula "29"))
                                    (rule "inEqSimp_subsumption1" (formula "23") (ifseqformula "28"))
                                    (rule "inEqSimp_homoInEq0" (formula "23") (term "0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "23") (term "0,0"))
                                    (rule "add_literals" (formula "23") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "23") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "23") (term "0,0"))
                                    (rule "qeq_literals" (formula "23") (term "0"))
                                    (builtin "One Step Simplification" (formula "23"))
                                    (rule "true_left" (formula "23"))
                                    (rule "ex_pull_out3" (formula "3") (term "0"))
                                    (rule "cnf_rightDist" (formula "3") (term "0,0"))
                                    (rule "commute_or" (formula "3") (term "1,0,0"))
                                    (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                                    (rule "commute_or" (formula "3") (term "1,0,0,0"))
                                    (rule "ex_pull_out3" (formula "2") (term "1,0"))
                                    (rule "cnf_rightDist" (formula "2") (term "0,1,0"))
                                    (rule "commute_or" (formula "2") (term "1,0,1,0"))
                                    (rule "ex_pull_out3" (formula "1") (term "1,0"))
                                    (rule "cnf_rightDist" (formula "1") (term "0,1,0"))
                                    (rule "commute_or" (formula "1") (term "1,0,1,0"))
                                    (rule "cnf_rightDist" (formula "2") (term "0,0,1,0"))
                                    (rule "commute_or" (formula "2") (term "1,0,0,1,0"))
                                    (rule "cnf_rightDist" (formula "1") (term "0,0,1,0"))
                                    (rule "commute_or" (formula "1") (term "1,0,0,1,0"))
                                    (rule "all_pull_out1" (formula "8") (term "1,1,0"))
                                    (rule "ex_pull_out3" (formula "2") (term "0"))
                                    (rule "cnf_rightDist" (formula "2") (term "0,0"))
                                    (rule "commute_or_2" (formula "2") (term "1,0,0"))
                                    (rule "commute_or" (formula "2") (term "0,1,0,0"))
                                    (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                                    (rule "commute_or_2" (formula "2") (term "1,0,0,0"))
                                    (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
                                    (rule "commute_or" (formula "2") (term "0,1,0,0,0"))
                                    (rule "ex_pull_out3" (formula "1") (term "0"))
                                    (rule "cnf_rightDist" (formula "1") (term "0,0"))
                                    (rule "commute_or_2" (formula "1") (term "1,0,0"))
                                    (rule "commute_or" (formula "1") (term "0,1,0,0"))
                                    (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                                    (rule "commute_or_2" (formula "1") (term "1,0,0,0"))
                                    (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
                                    (rule "commute_or" (formula "1") (term "0,1,0,0,0"))
                                    (rule "commute_and_2" (formula "3") (term "0,0"))
                                    (rule "all_pull_out3" (formula "8") (term "1,0"))
                                    (rule "cnf_rightDist" (formula "8") (term "0,1,0"))
                                    (rule "commute_or_2" (formula "8") (term "1,0,1,0"))
                                    (rule "commute_or_2" (formula "8") (term "0,1,0,1,0"))
                                    (rule "commute_or" (formula "8") (term "0,0,1,0,1,0"))
                                    (rule "commute_and_2" (formula "2") (term "0,0"))
                                    (rule "all_pull_out3" (formula "8") (term "0"))
                                    (rule "cnf_rightDist" (formula "8") (term "0,0"))
                                    (rule "distr_forallAnd" (formula "8") (term "0"))
                                    (builtin "One Step Simplification" (formula "8"))
                                    (rule "distr_forallAnd" (formula "8"))
                                    (rule "andLeft" (formula "8"))
                                    (rule "commute_or_2" (formula "9") (term "0,0"))
                                    (rule "shift_paren_or" (formula "8") (term "0"))
                                    (rule "commute_or_2" (formula "9") (term "0,0,0"))
                                    (rule "commute_or_2" (formula "9") (term "0,0,0,0"))
                                    (rule "commute_or" (formula "9") (term "0,0,0,0,0"))
                                    (rule "commute_and_2" (formula "1") (term "0,0"))
                                    (rule "commute_and" (formula "3") (term "0,0,0"))
                                    (rule "allLeft" (formula "8") (inst "t=j_147"))
                                    (rule "replace_known_right" (formula "8") (term "1") (ifseqformula "30"))
                                    (builtin "One Step Simplification" (formula "8"))
                                    (rule "inEqSimp_commuteGeq" (formula "8") (term "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "8") (term "0") (ifseqformula "6"))
                                    (rule "qeq_literals" (formula "8") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "8"))
                                    (rule "inEqSimp_contradInEq1" (formula "8") (ifseqformula "7"))
                                    (rule "andLeft" (formula "8"))
                                    (rule "inEqSimp_homoInEq1" (formula "8"))
                                    (rule "polySimp_pullOutFactor1b" (formula "8") (term "0"))
                                    (rule "add_literals" (formula "8") (term "1,1,0"))
                                    (rule "times_zero_1" (formula "8") (term "1,0"))
                                    (rule "add_literals" (formula "8") (term "0"))
                                    (rule "leq_literals" (formula "8"))
                                    (rule "closeFalse" (formula "8"))
                                 )
                                 (branch "Case 2"
                                    (rule "notRight" (formula "30"))
                                    (rule "replace_known_left" (formula "29") (term "1") (ifseqformula "1"))
                                    (builtin "One Step Simplification" (formula "29"))
                                    (rule "inEqSimp_geqRight" (formula "30"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                    (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0,0"))
                                    (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "2"))
                                    (rule "polySimp_pullOutFactor2" (formula "1") (term "0"))
                                    (rule "add_literals" (formula "1") (term "1,0"))
                                    (rule "times_zero_1" (formula "1") (term "0"))
                                    (rule "leq_literals" (formula "1"))
                                    (rule "true_left" (formula "1"))
                                    (rule "applyEq" (formula "27") (term "0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "28") (term "0") (ifseqformula "1"))
                                    (rule "inEqSimp_homoInEq0" (formula "28"))
                                    (rule "polySimp_pullOutFactor1" (formula "28") (term "0"))
                                    (rule "add_literals" (formula "28") (term "1,0"))
                                    (rule "times_zero_1" (formula "28") (term "0"))
                                    (rule "qeq_literals" (formula "28"))
                                    (rule "true_left" (formula "28"))
                                    (rule "applyEq" (formula "24") (term "0") (ifseqformula "1"))
                                    (rule "inEqSimp_homoInEq1" (formula "24"))
                                    (rule "polySimp_pullOutFactor1" (formula "24") (term "0"))
                                    (rule "add_literals" (formula "24") (term "1,0"))
                                    (rule "times_zero_1" (formula "24") (term "0"))
                                    (rule "leq_literals" (formula "24"))
                                    (rule "true_left" (formula "24"))
                                    (rule "ex_pull_out3" (formula "4") (term "0"))
                                    (rule "cnf_rightDist" (formula "4") (term "0,0"))
                                    (rule "commute_or" (formula "4") (term "1,0,0"))
                                    (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                                    (rule "commute_or" (formula "4") (term "1,0,0,0"))
                                    (rule "ex_pull_out3" (formula "3") (term "1,0"))
                                    (rule "cnf_rightDist" (formula "3") (term "0,1,0"))
                                    (rule "commute_or" (formula "3") (term "1,0,1,0"))
                                    (rule "ex_pull_out3" (formula "2") (term "1,0"))
                                    (rule "cnf_rightDist" (formula "2") (term "0,1,0"))
                                    (rule "commute_or" (formula "2") (term "1,0,1,0"))
                                    (rule "cnf_rightDist" (formula "3") (term "0,0,1,0"))
                                    (rule "commute_or" (formula "3") (term "1,0,0,1,0"))
                                    (rule "cnf_rightDist" (formula "2") (term "0,0,1,0"))
                                    (rule "commute_or" (formula "2") (term "1,0,0,1,0"))
                                    (rule "all_pull_out1" (formula "9") (term "1,1,0"))
                                    (rule "ex_pull_out3" (formula "3") (term "0"))
                                    (rule "cnf_rightDist" (formula "3") (term "0,0"))
                                    (rule "commute_or_2" (formula "3") (term "1,0,0"))
                                    (rule "commute_or" (formula "3") (term "0,1,0,0"))
                                    (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                                    (rule "commute_or_2" (formula "3") (term "1,0,0,0"))
                                    (rule "shift_paren_or" (formula "3") (term "0,0,0,0"))
                                    (rule "commute_or" (formula "3") (term "0,1,0,0,0"))
                                    (rule "ex_pull_out3" (formula "2") (term "0"))
                                    (rule "cnf_rightDist" (formula "2") (term "0,0"))
                                    (rule "commute_or_2" (formula "2") (term "1,0,0"))
                                    (rule "commute_or" (formula "2") (term "0,1,0,0"))
                                    (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                                    (rule "commute_or_2" (formula "2") (term "1,0,0,0"))
                                    (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
                                    (rule "commute_or" (formula "2") (term "0,1,0,0,0"))
                                    (rule "commute_and_2" (formula "4") (term "0,0"))
                                    (rule "all_pull_out3" (formula "9") (term "1,0"))
                                    (rule "cnf_rightDist" (formula "9") (term "0,1,0"))
                                    (rule "commute_or_2" (formula "9") (term "1,0,1,0"))
                                    (rule "commute_or_2" (formula "9") (term "0,1,0,1,0"))
                                    (rule "commute_or" (formula "9") (term "0,0,1,0,1,0"))
                                    (rule "commute_and_2" (formula "3") (term "0,0"))
                                    (rule "all_pull_out3" (formula "9") (term "0"))
                                    (rule "cnf_rightDist" (formula "9") (term "0,0"))
                                    (rule "distr_forallAnd" (formula "9") (term "0"))
                                    (builtin "One Step Simplification" (formula "9"))
                                    (rule "distr_forallAnd" (formula "9"))
                                    (rule "andLeft" (formula "9"))
                                    (rule "shift_paren_or" (formula "9") (term "0"))
                                    (rule "commute_or_2" (formula "10") (term "0,0"))
                                    (rule "commute_or_2" (formula "10") (term "0,0,0"))
                                    (rule "commute_or_2" (formula "10") (term "0,0,0,0"))
                                    (rule "commute_or" (formula "10") (term "0,0,0,0,0"))
                                    (rule "commute_and_2" (formula "2") (term "0,0"))
                                    (rule "commute_and" (formula "4") (term "0,0,0"))
                                    (rule "allLeft" (formula "9") (inst "t=j_147"))
                                    (rule "replace_known_right" (formula "9") (term "1") (ifseqformula "29"))
                                    (builtin "One Step Simplification" (formula "9"))
                                    (rule "inEqSimp_commuteGeq" (formula "9") (term "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "9") (term "0") (ifseqformula "7"))
                                    (rule "qeq_literals" (formula "9") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "9"))
                                    (rule "inEqSimp_contradInEq0" (formula "8") (ifseqformula "9"))
                                    (rule "andLeft" (formula "8"))
                                    (rule "inEqSimp_homoInEq1" (formula "8"))
                                    (rule "polySimp_pullOutFactor1b" (formula "8") (term "0"))
                                    (rule "add_literals" (formula "8") (term "1,1,0"))
                                    (rule "times_zero_1" (formula "8") (term "1,0"))
                                    (rule "add_literals" (formula "8") (term "0"))
                                    (rule "leq_literals" (formula "8"))
                                    (rule "closeFalse" (formula "8"))
                                 )
                              )
                              (branch "Case 2"
                                 (rule "replace_known_right" (formula "28") (term "0,1") (ifseqformula "30"))
                                 (builtin "One Step Simplification" (formula "28"))
                                 (rule "notLeft" (formula "28"))
                                 (rule "inEqSimp_leqRight" (formula "29"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                 (rule "inEqSimp_leqRight" (formula "29"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                 (rule "polySimp_rightDist" (formula "2") (term "1"))
                                 (rule "mul_literals" (formula "2") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                 (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                 (rule "replace_known_left" (formula "27") (term "0") (ifseqformula "2"))
                                 (builtin "One Step Simplification" (formula "27"))
                                 (rule "andLeft" (formula "27"))
                                 (rule "notLeft" (formula "28"))
                                 (rule "replace_known_left" (formula "29") (term "1") (ifseqformula "27"))
                                 (builtin "One Step Simplification" (formula "29"))
                                 (rule "applyEq" (formula "26") (term "0") (ifseqformula "27"))
                                 (rule "applyEq" (formula "2") (term "1,1") (ifseqformula "27"))
                                 (rule "applyEq" (formula "29") (term "1") (ifseqformula "27"))
                                 (rule "applyEq" (formula "1") (term "0,0,0") (ifseqformula "27"))
                                 (rule "applyEq" (formula "30") (term "1") (ifseqformula "27"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1"))
                                 (rule "inEqSimp_contradEq7" (formula "29") (ifseqformula "1"))
                                 (rule "polySimp_mulComm0" (formula "29") (term "1,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0"))
                                 (rule "add_literals" (formula "29") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "29") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "29") (term "0,0"))
                                 (rule "leq_literals" (formula "29") (term "0"))
                                 (builtin "One Step Simplification" (formula "29"))
                                 (rule "false_right" (formula "29"))
                                 (rule "inEqSimp_subsumption1" (formula "28") (ifseqformula "1"))
                                 (rule "inEqSimp_homoInEq0" (formula "28") (term "0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0"))
                                 (rule "add_literals" (formula "28") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "28") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "28") (term "0,0"))
                                 (rule "qeq_literals" (formula "28") (term "0"))
                                 (builtin "One Step Simplification" (formula "28"))
                                 (rule "true_left" (formula "28"))
                                 (rule "ex_pull_out3" (formula "4") (term "0"))
                                 (rule "cnf_rightDist" (formula "4") (term "0,0"))
                                 (rule "commute_or" (formula "4") (term "1,0,0"))
                                 (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                                 (rule "commute_or" (formula "4") (term "1,0,0,0"))
                                 (rule "ex_pull_out3" (formula "3") (term "1,0"))
                                 (rule "cnf_rightDist" (formula "3") (term "0,1,0"))
                                 (rule "commute_or" (formula "3") (term "1,0,1,0"))
                                 (rule "ex_pull_out3" (formula "2") (term "1,0"))
                                 (rule "cnf_rightDist" (formula "2") (term "0,1,0"))
                                 (rule "commute_or" (formula "2") (term "1,0,1,0"))
                                 (rule "cnf_rightDist" (formula "3") (term "0,0,1,0"))
                                 (rule "commute_or" (formula "3") (term "1,0,0,1,0"))
                                 (rule "cnf_rightDist" (formula "2") (term "0,0,1,0"))
                                 (rule "commute_or" (formula "2") (term "1,0,0,1,0"))
                                 (rule "all_pull_out1" (formula "9") (term "1,1,0"))
                                 (rule "ex_pull_out3" (formula "3") (term "0"))
                                 (rule "cnf_rightDist" (formula "3") (term "0,0"))
                                 (rule "commute_or_2" (formula "3") (term "1,0,0"))
                                 (rule "commute_or" (formula "3") (term "0,1,0,0"))
                                 (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                                 (rule "commute_or_2" (formula "3") (term "1,0,0,0"))
                                 (rule "shift_paren_or" (formula "3") (term "0,0,0,0"))
                                 (rule "commute_or" (formula "3") (term "0,1,0,0,0"))
                                 (rule "ex_pull_out3" (formula "2") (term "0"))
                                 (rule "cnf_rightDist" (formula "2") (term "0,0"))
                                 (rule "commute_or_2" (formula "2") (term "1,0,0"))
                                 (rule "commute_or" (formula "2") (term "0,1,0,0"))
                                 (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                                 (rule "commute_or_2" (formula "2") (term "1,0,0,0"))
                                 (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
                                 (rule "commute_or" (formula "2") (term "0,1,0,0,0"))
                                 (rule "commute_and_2" (formula "4") (term "0,0"))
                                 (rule "all_pull_out3" (formula "9") (term "1,0"))
                                 (rule "cnf_rightDist" (formula "9") (term "0,1,0"))
                                 (rule "commute_or_2" (formula "9") (term "1,0,1,0"))
                                 (rule "commute_or_2" (formula "9") (term "0,1,0,1,0"))
                                 (rule "commute_or" (formula "9") (term "0,0,1,0,1,0"))
                                 (rule "commute_and_2" (formula "3") (term "0,0"))
                                 (rule "all_pull_out3" (formula "9") (term "0"))
                                 (rule "cnf_rightDist" (formula "9") (term "0,0"))
                                 (rule "distr_forallAnd" (formula "9") (term "0"))
                                 (builtin "One Step Simplification" (formula "9"))
                                 (rule "distr_forallAnd" (formula "9"))
                                 (rule "andLeft" (formula "9"))
                                 (rule "commute_or_2" (formula "10") (term "0,0"))
                                 (rule "shift_paren_or" (formula "9") (term "0"))
                                 (rule "commute_or_2" (formula "10") (term "0,0,0"))
                                 (rule "commute_or_2" (formula "10") (term "0,0,0,0"))
                                 (rule "commute_or" (formula "10") (term "0,0,0,0,0"))
                                 (rule "commute_and_2" (formula "2") (term "0,0"))
                                 (rule "commute_and" (formula "4") (term "0,0,0"))
                                 (rule "allLeft" (formula "9") (inst "t=j_147"))
                                 (rule "replace_known_right" (formula "9") (term "1") (ifseqformula "30"))
                                 (builtin "One Step Simplification" (formula "9"))
                                 (rule "inEqSimp_commuteGeq" (formula "9") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "9") (term "0") (ifseqformula "7"))
                                 (rule "qeq_literals" (formula "9") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "9"))
                                 (rule "inEqSimp_contradInEq1" (formula "9") (ifseqformula "8"))
                                 (rule "andLeft" (formula "9"))
                                 (rule "inEqSimp_homoInEq1" (formula "9"))
                                 (rule "polySimp_pullOutFactor1b" (formula "9") (term "0"))
                                 (rule "add_literals" (formula "9") (term "1,1,0"))
                                 (rule "times_zero_1" (formula "9") (term "1,0"))
                                 (rule "add_literals" (formula "9") (term "0"))
                                 (rule "leq_literals" (formula "9"))
                                 (rule "closeFalse" (formula "9"))
                              )
                           )
                        )
                     )
                  )
                  (branch "CUT: a[0] = b[0] FALSE"
                     (rule "eqSymm" (formula "24") (term "1,0,0"))
                     (rule "eqSymm" (formula "23") (term "1,0,1,1,0"))
                     (rule "eqSymm" (formula "20"))
                     (rule "eqSymm" (formula "16") (term "0,1"))
                     (rule "eqSymm" (formula "15") (term "1"))
                     (rule "eqSymm" (formula "18") (term "1"))
                     (rule "eqSymm" (formula "19") (term "0,1"))
                     (rule "eqSymm" (formula "19") (term "0,1,1"))
                     (rule "eqSymm" (formula "1"))
                     (rule "replace_known_right" (formula "8") (term "0") (ifseqformula "26"))
                     (builtin "One Step Simplification" (formula "8"))
                     (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "27"))
                     (builtin "One Step Simplification" (formula "9"))
                     (rule "inEqSimp_leqRight" (formula "25"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0"))
                     (rule "add_zero_right" (formula "1") (term "0,0"))
                     (rule "inEqSimp_leqRight" (formula "28"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0"))
                     (rule "add_zero_right" (formula "1") (term "0,0"))
                     (rule "inEqSimp_gtToGeq" (formula "18") (term "0"))
                     (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0,1,1,0"))
                     (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0,1,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0,0"))
                     (rule "inEqSimp_gtToGeq" (formula "13"))
                     (rule "times_zero_1" (formula "13") (term "1,0,0"))
                     (rule "add_zero_right" (formula "13") (term "0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0,1,1,0"))
                     (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0,1,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "24") (term "0,1,0"))
                     (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0,1,0"))
                     (rule "polySimp_addComm1" (formula "24") (term "0,0,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "22") (term "0,1,0"))
                     (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_gtToGeq" (formula "20") (term "0"))
                     (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0"))
                     (rule "polySimp_addComm1" (formula "20") (term "0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "25") (term "1"))
                     (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "19") (term "0"))
                     (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0,1,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0,1,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0,0"))
                     (rule "applyEq" (formula "16") (term "1,1") (ifseqformula "5"))
                     (rule "applyEq" (formula "17") (term "1,0,1") (ifseqformula "5"))
                     (rule "applyEqRigid" (formula "4") (term "1") (ifseqformula "3"))
                     (rule "applyEq" (formula "20") (term "1,0,1") (ifseqformula "4"))
                     (rule "applyEq" (formula "19") (term "1,1") (ifseqformula "4"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                     (rule "mul_literals" (formula "2") (term "1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                     (rule "mul_literals" (formula "1") (term "1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "0"))
                     (rule "polySimp_mulComm0" (formula "17") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "17") (term "1,0"))
                     (rule "mul_literals" (formula "17") (term "0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0"))
                     (rule "polySimp_elimOne" (formula "17") (term "1,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0,1,1,0"))
                     (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0,1,1,0"))
                     (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0,1,1,0"))
                     (rule "mul_literals" (formula "24") (term "0,1,1,0,0,1,1,0"))
                     (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0,1,1,0"))
                     (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0,1,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0,0"))
                     (rule "mul_literals" (formula "25") (term "0,1,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0,1,1,0"))
                     (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0,1,1,0"))
                     (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0,1,1,0"))
                     (rule "mul_literals" (formula "22") (term "0,1,1,0,0,1,1,0"))
                     (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0,1,1,0"))
                     (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0,1,1,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "24") (term "0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "24") (term "0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "24") (term "0,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,1,0"))
                     (rule "polySimp_mulComm0" (formula "22") (term "1,0,1,0"))
                     (rule "polySimp_rightDist" (formula "22") (term "1,0,1,0"))
                     (rule "mul_literals" (formula "22") (term "0,1,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,1,0"))
                     (rule "polySimp_elimOne" (formula "22") (term "1,1,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0,0"))
                     (rule "mul_literals" (formula "23") (term "0,1,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "24") (term "0,1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "20") (term "0"))
                     (rule "polySimp_mulLiterals" (formula "20") (term "0,0"))
                     (rule "polySimp_elimOne" (formula "20") (term "0,0"))
                     (rule "nnf_ex2all" (formula "22"))
                     (rule "nnf_ex2all" (formula "24"))
                     (rule "nnf_imp2or" (formula "25") (term "0,0"))
                     (rule "nnf_imp2or" (formula "24") (term "0,0"))
                     (rule "nnf_notAnd" (formula "2") (term "0"))
                     (rule "nnf_notAnd" (formula "1") (term "0"))
                     (rule "nnf_notAnd" (formula "2") (term "1,0"))
                     (rule "inEqSimp_notLeq" (formula "2") (term "0,1,0"))
                     (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,1,0"))
                     (rule "mul_literals" (formula "2") (term "0,1,0,0,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,1,0"))
                     (rule "add_literals" (formula "2") (term "0,0,0,0,1,0"))
                     (rule "add_zero_left" (formula "2") (term "0,0,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,0"))
                     (rule "polySimp_elimOne" (formula "2") (term "1,0,1,0"))
                     (rule "nnf_notAnd" (formula "2") (term "0,0"))
                     (rule "inEqSimp_notGeq" (formula "2") (term "0,0,0"))
                     (rule "times_zero_1" (formula "2") (term "1,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "2") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "0,0,0"))
                     (rule "mul_literals" (formula "2") (term "1,0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "2") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "2") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "2") (term "0,0,0,1,0,0"))
                     (rule "add_zero_left" (formula "2") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "2") (term "1,1,0,0"))
                     (rule "nnf_notAnd" (formula "1") (term "0,0"))
                     (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
                     (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
                     (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                     (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                     (rule "nnf_notAnd" (formula "1") (term "1,0"))
                     (rule "inEqSimp_notGeq" (formula "1") (term "0,1,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0,1,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,0,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,1,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0,0,1,0"))
                     (rule "add_zero_left" (formula "1") (term "0,0,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,0,1,0"))
                     (rule "nnf_notAnd" (formula "25") (term "0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0,0"))
                     (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "25") (term "0,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0,0"))
                     (rule "mul_literals" (formula "25") (term "1,0,0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0,0"))
                     (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0,0"))
                     (rule "add_literals" (formula "25") (term "0,0,0,1,0,0,0"))
                     (rule "add_zero_left" (formula "25") (term "0,0,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0,0"))
                     (rule "nnf_notAnd" (formula "24") (term "0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0,0"))
                     (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0,0"))
                     (rule "add_literals" (formula "24") (term "0,0,0,1,0,0,0"))
                     (rule "add_zero_left" (formula "24") (term "0,0,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0,0"))
                     (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "24") (term "0,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0,0"))
                     (rule "mul_literals" (formula "24") (term "1,0,0,0,0"))
                     (rule "nnf_notAll" (formula "2") (term "1,1,0"))
                     (rule "nnf_notAll" (formula "1") (term "1,1,0"))
                     (rule "nnf_imp2or" (formula "2") (term "0,0,1,1,0"))
                     (rule "nnf_notOr" (formula "2") (term "0,1,1,0"))
                     (builtin "One Step Simplification" (formula "2"))
                     (rule "nnf_imp2or" (formula "1") (term "0,0,1,1,0"))
                     (rule "nnf_notOr" (formula "1") (term "0,1,1,0"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "cut_direct" (formula "24") (term "1"))
                     (branch "CUT: b.length ≤ a.length TRUE"
                        (builtin "One Step Simplification" (formula "25"))
                        (rule "allRight" (formula "25") (inst "sk=j_9"))
                        (rule "orRight" (formula "25"))
                        (rule "orRight" (formula "25"))
                        (rule "replace_known_left" (formula "19") (term "0") (ifseqformula "1"))
                        (builtin "One Step Simplification" (formula "19"))
                        (rule "replace_known_left" (formula "23") (term "0,1") (ifseqformula "19"))
                        (builtin "One Step Simplification" (formula "23"))
                        (rule "inEqSimp_geqRight" (formula "26"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "inEqSimp_leqRight" (formula "26"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "applyEq" (formula "3") (term "0") (ifseqformula "21"))
                        (rule "inEqSimp_commuteLeq" (formula "3"))
                        (rule "applyEq" (formula "22") (term "0,0,1,1") (ifseqformula "21"))
                        (rule "eqSymm" (formula "22") (term "0,1,1"))
                        (builtin "One Step Simplification" (formula "22"))
                        (rule "notLeft" (formula "22"))
                        (rule "inEqSimp_geqRight" (formula "25"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0"))
                        (rule "add_zero_left" (formula "1") (term "0,0"))
                        (rule "applyEq" (formula "28") (term "0,1") (ifseqformula "22"))
                        (rule "inEqSimp_commuteGeq" (formula "28") (term "1"))
                        (rule "applyEq" (formula "24") (term "0,0") (ifseqformula "22"))
                        (rule "inEqSimp_commuteGeq" (formula "24") (term "0"))
                        (rule "applyEq" (formula "25") (term "0,0,1") (ifseqformula "22"))
                        (rule "eqSymm" (formula "25") (term "0,1"))
                        (rule "applyEq" (formula "25") (term "0,0") (ifseqformula "22"))
                        (rule "inEqSimp_homoInEq0" (formula "25") (term "0"))
                        (rule "polySimp_addComm1" (formula "25") (term "0,0"))
                        (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "22"))
                        (rule "polySimp_addComm0" (formula "1") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                        (rule "polySimp_elimOne" (formula "3") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "0"))
                        (rule "polySimp_mulComm0" (formula "25") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "25") (term "1,0"))
                        (rule "mul_literals" (formula "25") (term "0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "25") (term "1,1,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0"))
                        (rule "equiv_left" (formula "24"))
                        (branch "Case 1"
                           (rule "notLeft" (formula "25"))
                           (rule "replace_known_right" (formula "23") (term "1") (ifseqformula "25"))
                           (builtin "One Step Simplification" (formula "23"))
                           (rule "notLeft" (formula "23"))
                           (rule "replace_known_right" (formula "28") (term "1") (ifseqformula "24"))
                           (builtin "One Step Simplification" (formula "28"))
                           (rule "false_right" (formula "28"))
                           (rule "inEqSimp_leqRight" (formula "24"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1"))
                           (rule "polySimp_rightDist" (formula "1") (term "1"))
                           (rule "mul_literals" (formula "1") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                           (rule "inEqSimp_contradEq7" (formula "24") (ifseqformula "23"))
                           (rule "polySimp_mulComm0" (formula "24") (term "1,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,0"))
                           (rule "add_literals" (formula "24") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "24") (term "1,0,0"))
                           (rule "add_zero_right" (formula "24") (term "0,0"))
                           (rule "leq_literals" (formula "24") (term "0"))
                           (builtin "One Step Simplification" (formula "24"))
                           (rule "false_right" (formula "24"))
                           (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "23"))
                           (rule "inEqSimp_homoInEq0" (formula "3") (term "0"))
                           (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0"))
                           (rule "add_literals" (formula "3") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "3") (term "1,0,0"))
                           (rule "add_zero_right" (formula "3") (term "0,0"))
                           (rule "qeq_literals" (formula "3") (term "0"))
                           (builtin "One Step Simplification" (formula "3"))
                           (rule "true_left" (formula "3"))
                           (rule "ex_pull_out3" (formula "4") (term "1,0"))
                           (rule "cnf_rightDist" (formula "4") (term "0,1,0"))
                           (rule "commute_or" (formula "4") (term "1,0,1,0"))
                           (rule "ex_pull_out3" (formula "3") (term "1,0"))
                           (rule "cnf_rightDist" (formula "3") (term "0,1,0"))
                           (rule "commute_or" (formula "3") (term "1,0,1,0"))
                           (rule "cnf_rightDist" (formula "4") (term "0,0,1,0"))
                           (rule "commute_or" (formula "4") (term "1,0,0,1,0"))
                           (rule "cnf_rightDist" (formula "3") (term "0,0,1,0"))
                           (rule "commute_or" (formula "3") (term "1,0,0,1,0"))
                           (rule "ex_pull_out3" (formula "4") (term "0"))
                           (rule "cnf_rightDist" (formula "4") (term "0,0"))
                           (rule "commute_or_2" (formula "4") (term "1,0,0"))
                           (rule "commute_or" (formula "4") (term "0,1,0,0"))
                           (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                           (rule "commute_or_2" (formula "4") (term "1,0,0,0"))
                           (rule "shift_paren_or" (formula "4") (term "0,0,0,0"))
                           (rule "commute_or" (formula "4") (term "0,1,0,0,0"))
                           (rule "ex_pull_out3" (formula "3") (term "0"))
                           (rule "cnf_rightDist" (formula "3") (term "0,0"))
                           (rule "commute_or_2" (formula "3") (term "1,0,0"))
                           (rule "commute_or" (formula "3") (term "0,1,0,0"))
                           (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                           (rule "commute_or_2" (formula "3") (term "1,0,0,0"))
                           (rule "shift_paren_or" (formula "3") (term "0,0,0,0"))
                           (rule "commute_or" (formula "3") (term "0,1,0,0,0"))
                           (rule "commute_and_2" (formula "4") (term "0,0"))
                           (rule "commute_and_2" (formula "3") (term "0,0"))
                           (rule "arrayLengthNotNegative" (formula "20") (term "0"))
                           (rule "applyEq" (formula "20") (term "0") (ifseqformula "21"))
                           (rule "arrayLengthIsAShort" (formula "21") (term "0"))
                           (builtin "One Step Simplification" (formula "21"))
                           (rule "true_left" (formula "21"))
                           (rule "commute_and" (formula "4") (term "0,0,0"))
                           (rule "commute_and" (formula "3") (term "0,0,0"))
                           (rule "arrayLengthIsAShort" (formula "23") (term "0"))
                           (builtin "One Step Simplification" (formula "23"))
                           (rule "true_left" (formula "23"))
                           (rule "arrayLengthNotNegative" (formula "23") (term "0"))
                           (rule "allLeft" (formula "4") (inst "t=j_9"))
                           (rule "exLeft" (formula "4") (inst "sk=j_29"))
                           (rule "andLeft" (formula "4"))
                           (rule "andLeft" (formula "4"))
                           (rule "inEqSimp_commuteGeq" (formula "6") (term "1,0,0"))
                           (rule "inEqSimp_commuteGeq" (formula "4") (term "1,0,0"))
                           (rule "inEqSimp_commuteGeq" (formula "5") (term "1,0,0"))
                           (rule "inEqSimp_homoInEq0" (formula "6") (term "1"))
                           (rule "polySimp_addComm1" (formula "6") (term "0,1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1"))
                           (rule "polySimp_mulComm0" (formula "6") (term "1,1"))
                           (rule "polySimp_rightDist" (formula "6") (term "1,1"))
                           (rule "mul_literals" (formula "6") (term "0,1,1"))
                           (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1"))
                           (rule "polySimp_elimOne" (formula "6") (term "1,1,1"))
                           (rule "inEqSimp_contradInEq1" (formula "5") (term "0,0,0") (ifseqformula "1"))
                           (rule "qeq_literals" (formula "5") (term "0,0,0,0"))
                           (builtin "One Step Simplification" (formula "5"))
                           (rule "inEqSimp_contradInEq1" (formula "6") (term "1,0,0") (ifseqformula "2"))
                           (rule "inEqSimp_homoInEq1" (formula "6") (term "0,1,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "6") (term "1,1,0,0,1,0,0"))
                           (rule "times_zero_1" (formula "6") (term "1,0,0,1,0,0"))
                           (rule "add_zero_right" (formula "6") (term "0,0,1,0,0"))
                           (rule "leq_literals" (formula "6") (term "0,1,0,0"))
                           (builtin "One Step Simplification" (formula "6"))
                           (rule "inEqSimp_contradInEq1" (formula "4") (term "1,0,0") (ifseqformula "2"))
                           (rule "inEqSimp_homoInEq1" (formula "4") (term "0,1,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "4") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "4") (term "1,1,0,0,1,0,0"))
                           (rule "times_zero_1" (formula "4") (term "1,0,0,1,0,0"))
                           (rule "add_zero_right" (formula "4") (term "0,0,1,0,0"))
                           (rule "leq_literals" (formula "4") (term "0,1,0,0"))
                           (builtin "One Step Simplification" (formula "4"))
                           (rule "inEqSimp_contradInEq1" (formula "5") (term "0,0") (ifseqformula "2"))
                           (rule "inEqSimp_homoInEq1" (formula "5") (term "0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "5") (term "0,0,0,0"))
                           (rule "add_literals" (formula "5") (term "1,1,0,0,0,0"))
                           (rule "times_zero_1" (formula "5") (term "1,0,0,0,0"))
                           (rule "add_zero_right" (formula "5") (term "0,0,0,0"))
                           (rule "leq_literals" (formula "5") (term "0,0,0"))
                           (builtin "One Step Simplification" (formula "5"))
                           (rule "inEqSimp_contradInEq1" (formula "4") (term "0,0") (ifseqformula "1"))
                           (rule "qeq_literals" (formula "4") (term "0,0,0"))
                           (builtin "One Step Simplification" (formula "4"))
                           (rule "inEqSimp_contradInEq1" (formula "6") (term "0,0") (ifseqformula "1"))
                           (rule "qeq_literals" (formula "6") (term "0,0,0"))
                           (builtin "One Step Simplification" (formula "6"))
                           (rule "commute_or" (formula "5"))
                           (rule "commute_or" (formula "4"))
                           (rule "commute_or" (formula "6"))
                           (rule "cut_direct" (formula "4") (term "1"))
                           (branch "CUT: b[j_9] ≥ a[j_9] TRUE"
                              (builtin "One Step Simplification" (formula "5"))
                              (rule "true_left" (formula "5"))
                              (rule "replace_known_left" (formula "6") (term "1") (ifseqformula "4"))
                              (builtin "One Step Simplification" (formula "6"))
                              (rule "true_left" (formula "6"))
                              (rule "replace_known_left" (formula "5") (term "1") (ifseqformula "4"))
                              (builtin "One Step Simplification" (formula "5"))
                              (rule "true_left" (formula "5"))
                              (rule "inEqSimp_strengthen1" (formula "4") (ifseqformula "27"))
                              (rule "inEqSimp_contradEq7" (formula "27") (ifseqformula "4"))
                              (rule "polySimp_mulComm0" (formula "27") (term "1,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "27") (term "0,0"))
                              (rule "add_literals" (formula "27") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "27") (term "1,0,0"))
                              (rule "add_zero_right" (formula "27") (term "0,0"))
                              (rule "leq_literals" (formula "27") (term "0"))
                              (builtin "One Step Simplification" (formula "27"))
                              (rule "false_right" (formula "27"))
                              (rule "allLeft" (formula "3") (inst "t=j_9"))
                              (rule "exLeft" (formula "3") (inst "sk=j_32"))
                              (rule "andLeft" (formula "3"))
                              (rule "andLeft" (formula "3"))
                              (rule "inEqSimp_commuteGeq" (formula "5") (term "1,0,0"))
                              (rule "inEqSimp_commuteGeq" (formula "3") (term "1,0,0"))
                              (rule "inEqSimp_commuteGeq" (formula "4") (term "1,0,0"))
                              (rule "inEqSimp_homoInEq0" (formula "5") (term "1"))
                              (rule "polySimp_addComm1" (formula "5") (term "0,1"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "1"))
                              (rule "polySimp_mulComm0" (formula "5") (term "1,1"))
                              (rule "polySimp_rightDist" (formula "5") (term "1,1"))
                              (rule "mul_literals" (formula "5") (term "0,1,1"))
                              (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1"))
                              (rule "polySimp_elimOne" (formula "5") (term "1,1,1"))
                              (rule "inEqSimp_contradInEq1" (formula "5") (term "1,0") (ifseqformula "7"))
                              (rule "inEqSimp_homoInEq1" (formula "5") (term "0,1,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "5") (term "0,0,1,0"))
                              (rule "add_literals" (formula "5") (term "1,1,0,0,1,0"))
                              (rule "times_zero_1" (formula "5") (term "1,0,0,1,0"))
                              (rule "add_zero_right" (formula "5") (term "0,0,1,0"))
                              (rule "leq_literals" (formula "5") (term "0,1,0"))
                              (builtin "One Step Simplification" (formula "5"))
                              (rule "inEqSimp_contradInEq1" (formula "3") (term "1,0") (ifseqformula "7"))
                              (rule "inEqSimp_homoInEq1" (formula "3") (term "0,1,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0,1,0"))
                              (rule "add_literals" (formula "3") (term "1,1,0,0,1,0"))
                              (rule "times_zero_1" (formula "3") (term "1,0,0,1,0"))
                              (rule "add_zero_right" (formula "3") (term "0,0,1,0"))
                              (rule "leq_literals" (formula "3") (term "0,1,0"))
                              (builtin "One Step Simplification" (formula "3"))
                              (rule "inEqSimp_contradInEq1" (formula "4") (term "0,0,0") (ifseqformula "1"))
                              (rule "qeq_literals" (formula "4") (term "0,0,0,0"))
                              (builtin "One Step Simplification" (formula "4"))
                              (rule "inEqSimp_contradInEq1" (formula "5") (term "0,0") (ifseqformula "1"))
                              (rule "qeq_literals" (formula "5") (term "0,0,0"))
                              (builtin "One Step Simplification" (formula "5"))
                              (rule "inEqSimp_contradInEq1" (formula "3") (term "1,0") (ifseqformula "2"))
                              (rule "inEqSimp_homoInEq1" (formula "3") (term "0,1,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0,1,0"))
                              (rule "add_literals" (formula "3") (term "1,1,0,0,1,0"))
                              (rule "times_zero_1" (formula "3") (term "1,0,0,1,0"))
                              (rule "add_zero_right" (formula "3") (term "0,0,1,0"))
                              (rule "leq_literals" (formula "3") (term "0,1,0"))
                              (builtin "One Step Simplification" (formula "3"))
                              (rule "inEqSimp_contradInEq1" (formula "4") (term "0,0") (ifseqformula "2"))
                              (rule "inEqSimp_homoInEq1" (formula "4") (term "0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "4") (term "0,0,0,0"))
                              (rule "add_literals" (formula "4") (term "1,1,0,0,0,0"))
                              (rule "times_zero_1" (formula "4") (term "1,0,0,0,0"))
                              (rule "add_zero_right" (formula "4") (term "0,0,0,0"))
                              (rule "leq_literals" (formula "4") (term "0,0,0"))
                              (builtin "One Step Simplification" (formula "4"))
                              (rule "inEqSimp_contradInEq1" (formula "5") (term "0") (ifseqformula "2"))
                              (rule "inEqSimp_homoInEq1" (formula "5") (term "0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "5") (term "0,0,0"))
                              (rule "add_literals" (formula "5") (term "1,1,0,0,0"))
                              (rule "times_zero_1" (formula "5") (term "1,0,0,0"))
                              (rule "add_zero_right" (formula "5") (term "0,0,0"))
                              (rule "leq_literals" (formula "5") (term "0,0"))
                              (builtin "One Step Simplification" (formula "5"))
                              (rule "inEqSimp_contradInEq1" (formula "4") (term "0") (ifseqformula "7"))
                              (rule "inEqSimp_homoInEq1" (formula "4") (term "0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "4") (term "0,0,0"))
                              (rule "add_literals" (formula "4") (term "1,1,0,0,0"))
                              (rule "times_zero_1" (formula "4") (term "1,0,0,0"))
                              (rule "add_zero_right" (formula "4") (term "0,0,0"))
                              (rule "leq_literals" (formula "4") (term "0,0"))
                              (builtin "One Step Simplification" (formula "4"))
                              (rule "inEqSimp_contradInEq1" (formula "3") (term "0") (ifseqformula "1"))
                              (rule "qeq_literals" (formula "3") (term "0,0"))
                              (builtin "One Step Simplification" (formula "3"))
                              (rule "notLeft" (formula "3"))
                              (rule "allLeft" (formula "7") (inst "t=Z(0(#))"))
                              (rule "leq_literals" (formula "7") (term "0,0,0,1,0"))
                              (builtin "One Step Simplification" (formula "7"))
                              (rule "add_zero_right" (formula "7") (term "1,1,1,0"))
                              (rule "leq_literals" (formula "7") (term "0,0,0,0,0,0"))
                              (builtin "One Step Simplification" (formula "7"))
                              (rule "leq_literals" (formula "7") (term "0,0,0,1,0,0"))
                              (builtin "One Step Simplification" (formula "7"))
                              (rule "exLeft" (formula "7") (inst "sk=j_33"))
                              (rule "andLeft" (formula "7"))
                              (rule "andLeft" (formula "7"))
                              (rule "inEqSimp_commuteGeq" (formula "9") (term "0,0"))
                              (rule "inEqSimp_commuteGeq" (formula "7") (term "0,0"))
                              (rule "inEqSimp_commuteGeq" (formula "8") (term "0,0"))
                              (rule "commute_or_2" (formula "9"))
                              (rule "commute_or_2" (formula "8"))
                              (rule "commute_or" (formula "9") (term "0"))
                              (rule "commute_or" (formula "8") (term "0"))
                              (rule "allLeft" (formula "5") (inst "t=Z(0(#))"))
                              (rule "add_zero_right" (formula "5") (term "1,1,1,0"))
                              (rule "leq_literals" (formula "5") (term "0,0,0,1,0,0"))
                              (builtin "One Step Simplification" (formula "5"))
                              (rule "leq_literals" (formula "5") (term "0,0,0,1,0"))
                              (builtin "One Step Simplification" (formula "5"))
                              (rule "leq_literals" (formula "5") (term "0,0,0,0,0,0"))
                              (builtin "One Step Simplification" (formula "5"))
                              (rule "exLeft" (formula "5") (inst "sk=j_34"))
                              (rule "andLeft" (formula "5"))
                              (rule "andLeft" (formula "5"))
                              (rule "inEqSimp_commuteGeq" (formula "7") (term "0,0"))
                              (rule "inEqSimp_commuteGeq" (formula "5") (term "0,0"))
                              (rule "inEqSimp_commuteGeq" (formula "6") (term "0,0"))
                              (rule "commute_or_2" (formula "7"))
                              (rule "commute_or_2" (formula "6"))
                              (rule "commute_or" (formula "7") (term "0"))
                              (rule "commute_or" (formula "6") (term "0"))
                              (rule "cut_direct" (formula "7") (term "1,0"))
                              (branch "CUT: res_min ≤ 0 TRUE"
                                 (builtin "One Step Simplification" (formula "8"))
                                 (rule "true_left" (formula "8"))
                                 (rule "replace_known_left" (formula "6") (term "1,0") (ifseqformula "7"))
                                 (builtin "One Step Simplification" (formula "6"))
                                 (rule "true_left" (formula "6"))
                                 (rule "replace_known_left" (formula "5") (term "0,0") (ifseqformula "6"))
                                 (builtin "One Step Simplification" (formula "5"))
                                 (rule "true_left" (formula "5"))
                                 (rule "replace_known_left" (formula "10") (term "1,0") (ifseqformula "5"))
                                 (builtin "One Step Simplification" (formula "10"))
                                 (rule "true_left" (formula "10"))
                                 (rule "replace_known_left" (formula "8") (term "0,0") (ifseqformula "5"))
                                 (builtin "One Step Simplification" (formula "8"))
                                 (rule "true_left" (formula "8"))
                                 (rule "replace_known_left" (formula "8") (term "1,0") (ifseqformula "5"))
                                 (builtin "One Step Simplification" (formula "8"))
                                 (rule "true_left" (formula "8"))
                                 (rule "inEqSimp_antiSymm" (formula "24") (ifseqformula "5"))
                                 (rule "applyEqRigid" (formula "8") (term "1,1,0,0,0,0,0,0") (ifseqformula "24"))
                                 (rule "applyEq" (formula "6") (term "1,1,0,0,1,0,0") (ifseqformula "24"))
                                 (rule "applyEq" (formula "5") (term "0") (ifseqformula "24"))
                                 (rule "leq_literals" (formula "5"))
                                 (rule "true_left" (formula "5"))
                                 (rule "applyEqRigid" (formula "5") (term "1,1,0,0,1,0,0,0") (ifseqformula "23"))
                                 (rule "applyEqRigid" (formula "24") (term "0") (ifseqformula "23"))
                                 (rule "qeq_literals" (formula "24"))
                                 (rule "true_left" (formula "24"))
                                 (rule "applyEq" (formula "7") (term "1,1,0,0,1,0,0,0") (ifseqformula "23"))
                                 (rule "applyEqRigid" (formula "7") (term "1,1,0,0,1,0,0") (ifseqformula "23"))
                                 (rule "applyEqRigid" (formula "27") (term "1,1") (ifseqformula "23"))
                                 (rule "add_zero_right" (formula "27") (term "1"))
                                 (rule "applyEqRigid" (formula "2") (term "0") (ifseqformula "23"))
                                 (rule "inEqSimp_homoInEq1" (formula "2"))
                                 (rule "times_zero_2" (formula "2") (term "1,0"))
                                 (rule "add_zero_right" (formula "2") (term "0"))
                                 (rule "applyEqRigid" (formula "5") (term "1,1,0,0,0,0,0,0") (ifseqformula "23"))
                                 (rule "applyEqRigid" (formula "10") (term "1") (ifseqformula "23"))
                                 (rule "applyEq" (formula "12") (term "1") (ifseqformula "23"))
                                 (rule "applyEq" (formula "24") (term "1") (ifseqformula "23"))
                                 (rule "applyEqRigid" (formula "11") (term "1") (ifseqformula "23"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                                 (rule "mul_literals" (formula "2") (term "1"))
                                 (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "2"))
                                 (rule "qeq_literals" (formula "1") (term "0"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "closeFalse" (formula "1"))
                              )
                              (branch "CUT: res_min ≤ 0 FALSE"
                                 (builtin "One Step Simplification" (formula "7"))
                                 (rule "replace_known_right" (formula "6") (term "1,0") (ifseqformula "34"))
                                 (builtin "One Step Simplification" (formula "6"))
                                 (rule "replace_known_right" (formula "12") (term "1,0") (ifseqformula "34"))
                                 (builtin "One Step Simplification" (formula "12"))
                                 (rule "replace_known_right" (formula "5") (term "0,0") (ifseqformula "34"))
                                 (builtin "One Step Simplification" (formula "5"))
                                 (rule "replace_known_right" (formula "10") (term "0,0") (ifseqformula "34"))
                                 (builtin "One Step Simplification" (formula "10"))
                                 (rule "replace_known_right" (formula "11") (term "1,0") (ifseqformula "34"))
                                 (builtin "One Step Simplification" (formula "11"))
                                 (rule "inEqSimp_leqRight" (formula "34"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "1") (term "0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                 (rule "mul_literals" (formula "1") (term "1"))
                                 (rule "inEqSimp_subsumption1" (formula "30") (ifseqformula "1"))
                                 (rule "leq_literals" (formula "30") (term "0"))
                                 (builtin "One Step Simplification" (formula "30"))
                                 (rule "true_left" (formula "30"))
                                 (rule "cut_direct" (formula "6") (term "0"))
                                 (branch "CUT: b[0] ≤ a[0] TRUE"
                                    (builtin "One Step Simplification" (formula "7"))
                                    (rule "true_left" (formula "7"))
                                    (rule "replace_known_left" (formula "7") (term "1") (ifseqformula "6"))
                                    (builtin "One Step Simplification" (formula "7"))
                                    (rule "true_left" (formula "7"))
                                    (rule "replace_known_left" (formula "7") (term "1") (ifseqformula "6"))
                                    (builtin "One Step Simplification" (formula "7"))
                                    (rule "true_left" (formula "7"))
                                    (rule "inEqSimp_strengthen0" (formula "6") (ifseqformula "33"))
                                    (rule "inEqSimp_contradEq3" (formula "33") (ifseqformula "6"))
                                    (rule "polySimp_mulComm0" (formula "33") (term "1,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "33") (term "0,0"))
                                    (rule "add_literals" (formula "33") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "33") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "33") (term "0,0"))
                                    (rule "qeq_literals" (formula "33") (term "0"))
                                    (builtin "One Step Simplification" (formula "33"))
                                    (rule "false_right" (formula "33"))
                                    (rule "inEqSimp_contradInEq0" (formula "10") (term "1") (ifseqformula "6"))
                                    (rule "inEqSimp_homoInEq1" (formula "10") (term "0,1"))
                                    (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1"))
                                    (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1"))
                                    (rule "mul_literals" (formula "10") (term "0,1,0,0,1"))
                                    (rule "polySimp_addAssoc" (formula "10") (term "0,0,1"))
                                    (rule "polySimp_addComm0" (formula "10") (term "0,0,0,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1"))
                                    (rule "add_literals" (formula "10") (term "1,1,0,0,1"))
                                    (rule "times_zero_1" (formula "10") (term "1,0,0,1"))
                                    (rule "add_zero_right" (formula "10") (term "0,0,1"))
                                    (rule "leq_literals" (formula "10") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "10"))
                                    (rule "inEqSimp_contradInEq0" (formula "9") (term "0") (ifseqformula "6"))
                                    (rule "inEqSimp_homoInEq1" (formula "9") (term "0,0"))
                                    (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0"))
                                    (rule "mul_literals" (formula "9") (term "0,1,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "9") (term "0,0,0"))
                                    (rule "polySimp_addComm0" (formula "9") (term "0,0,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0,0"))
                                    (rule "add_literals" (formula "9") (term "1,1,0,0,0"))
                                    (rule "times_zero_1" (formula "9") (term "1,0,0,0"))
                                    (rule "add_zero_right" (formula "9") (term "0,0,0"))
                                    (rule "leq_literals" (formula "9") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "9"))
                                    (rule "notLeft" (formula "9"))
                                    (rule "inEqSimp_contradInEq0" (formula "10") (term "1") (ifseqformula "6"))
                                    (rule "inEqSimp_homoInEq1" (formula "10") (term "0,1"))
                                    (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1"))
                                    (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1"))
                                    (rule "mul_literals" (formula "10") (term "0,1,0,0,1"))
                                    (rule "polySimp_addAssoc" (formula "10") (term "0,0,1"))
                                    (rule "polySimp_addComm0" (formula "10") (term "0,0,0,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1"))
                                    (rule "add_literals" (formula "10") (term "1,1,0,0,1"))
                                    (rule "times_zero_1" (formula "10") (term "1,0,0,1"))
                                    (rule "add_zero_right" (formula "10") (term "0,0,1"))
                                    (rule "leq_literals" (formula "10") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "10"))
                                    (rule "inEqSimp_contradInEq0" (formula "9") (ifseqformula "10"))
                                    (rule "qeq_literals" (formula "9") (term "0"))
                                    (builtin "One Step Simplification" (formula "9"))
                                    (rule "closeFalse" (formula "9"))
                                 )
                                 (branch "CUT: b[0] ≤ a[0] FALSE"
                                    (builtin "One Step Simplification" (formula "6"))
                                    (rule "notLeft" (formula "6"))
                                    (rule "replace_known_right" (formula "6") (term "1") (ifseqformula "34"))
                                    (builtin "One Step Simplification" (formula "6"))
                                    (rule "replace_known_right" (formula "7") (term "1") (ifseqformula "34"))
                                    (builtin "One Step Simplification" (formula "7"))
                                    (rule "inEqSimp_leqRight" (formula "34"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1"))
                                    (rule "mul_literals" (formula "1") (term "0,1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                    (rule "inEqSimp_contradEq7" (formula "36") (ifseqformula "1"))
                                    (rule "polySimp_mulComm0" (formula "36") (term "1,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "36") (term "0,0"))
                                    (rule "add_literals" (formula "36") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "36") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "36") (term "0,0"))
                                    (rule "leq_literals" (formula "36") (term "0"))
                                    (builtin "One Step Simplification" (formula "36"))
                                    (rule "false_right" (formula "36"))
                                    (rule "inEqSimp_subsumption1" (formula "11") (term "0") (ifseqformula "1"))
                                    (rule "inEqSimp_homoInEq0" (formula "11") (term "0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,0"))
                                    (rule "add_literals" (formula "11") (term "1,1,0,0,0"))
                                    (rule "times_zero_1" (formula "11") (term "1,0,0,0"))
                                    (rule "add_zero_right" (formula "11") (term "0,0,0"))
                                    (rule "qeq_literals" (formula "11") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "11"))
                                    (rule "true_left" (formula "11"))
                                    (rule "inEqSimp_subsumption1" (formula "12") (term "1") (ifseqformula "1"))
                                    (rule "inEqSimp_homoInEq0" (formula "12") (term "0,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,1"))
                                    (rule "add_literals" (formula "12") (term "1,1,0,0,1"))
                                    (rule "times_zero_1" (formula "12") (term "1,0,0,1"))
                                    (rule "add_zero_right" (formula "12") (term "0,0,1"))
                                    (rule "qeq_literals" (formula "12") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "12"))
                                    (rule "true_left" (formula "12"))
                                    (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "8"))
                                    (rule "qeq_literals" (formula "7") (term "0"))
                                    (builtin "One Step Simplification" (formula "7"))
                                    (rule "closeFalse" (formula "7"))
                                 )
                              )
                           )
                           (branch "CUT: b[j_9] ≥ a[j_9] FALSE"
                              (builtin "One Step Simplification" (formula "4"))
                              (rule "notLeft" (formula "4"))
                              (rule "replace_known_right" (formula "5") (term "1") (ifseqformula "28"))
                              (builtin "One Step Simplification" (formula "5"))
                              (rule "replace_known_right" (formula "4") (term "1") (ifseqformula "28"))
                              (builtin "One Step Simplification" (formula "4"))
                              (rule "inEqSimp_geqRight" (formula "28"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1"))
                              (rule "polySimp_rightDist" (formula "1") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                              (rule "mul_literals" (formula "1") (term "0,1"))
                              (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                              (rule "inEqSimp_contradEq3" (formula "30") (ifseqformula "1"))
                              (rule "polySimp_mulComm0" (formula "30") (term "1,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "30") (term "0,0"))
                              (rule "add_literals" (formula "30") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "30") (term "1,0,0"))
                              (rule "add_zero_right" (formula "30") (term "0,0"))
                              (rule "qeq_literals" (formula "30") (term "0"))
                              (builtin "One Step Simplification" (formula "30"))
                              (rule "false_right" (formula "30"))
                              (rule "allLeft" (formula "7") (inst "t=Z(0(#))"))
                              (rule "add_zero_right" (formula "7") (term "1,1,1,0"))
                              (rule "leq_literals" (formula "7") (term "0,0,0,1,0"))
                              (builtin "One Step Simplification" (formula "7"))
                              (rule "leq_literals" (formula "7") (term "0,0,0,0,0,0"))
                              (builtin "One Step Simplification" (formula "7"))
                              (rule "leq_literals" (formula "7") (term "0,0,0,1,0,0"))
                              (builtin "One Step Simplification" (formula "7"))
                              (rule "exLeft" (formula "7") (inst "sk=j_30"))
                              (rule "andLeft" (formula "7"))
                              (rule "andLeft" (formula "7"))
                              (rule "inEqSimp_commuteGeq" (formula "9") (term "0,0"))
                              (rule "inEqSimp_commuteGeq" (formula "7") (term "0,0"))
                              (rule "inEqSimp_commuteGeq" (formula "8") (term "0,0"))
                              (rule "commute_or_2" (formula "9"))
                              (rule "commute_or_2" (formula "8"))
                              (rule "commute_or" (formula "9") (term "0"))
                              (rule "commute_or" (formula "8") (term "0"))
                              (rule "cut_direct" (formula "9") (term "1,0"))
                              (branch "CUT: res_min ≤ 0 TRUE"
                                 (builtin "One Step Simplification" (formula "10"))
                                 (rule "true_left" (formula "10"))
                                 (rule "replace_known_left" (formula "7") (term "0,0") (ifseqformula "9"))
                                 (builtin "One Step Simplification" (formula "7"))
                                 (rule "true_left" (formula "7"))
                                 (rule "replace_known_left" (formula "7") (term "1,0") (ifseqformula "8"))
                                 (builtin "One Step Simplification" (formula "7"))
                                 (rule "true_left" (formula "7"))
                                 (rule "inEqSimp_antiSymm" (formula "24") (ifseqformula "7"))
                                 (rule "applyEq" (formula "7") (term "0") (ifseqformula "24"))
                                 (rule "leq_literals" (formula "7"))
                                 (rule "true_left" (formula "7"))
                                 (rule "applyEqRigid" (formula "3") (term "0") (ifseqformula "23"))
                                 (rule "inEqSimp_homoInEq1" (formula "3"))
                                 (rule "times_zero_2" (formula "3") (term "1,0"))
                                 (rule "add_zero_right" (formula "3") (term "0"))
                                 (rule "applyEqRigid" (formula "7") (term "1,1,0,0,1,0,0") (ifseqformula "23"))
                                 (rule "applyEqRigid" (formula "7") (term "1,1,0,0,1,0,0,0") (ifseqformula "23"))
                                 (rule "applyEq" (formula "7") (term "1,1,0,0,0,0,0,0") (ifseqformula "23"))
                                 (rule "applyEqRigid" (formula "4") (term "1,1,0,0,0,0,0,0") (ifseqformula "23"))
                                 (rule "applyEq" (formula "4") (term "1,1,0,0,1,0,0,0") (ifseqformula "23"))
                                 (rule "applyEq" (formula "4") (term "1,1,0,0,1,0,0") (ifseqformula "23"))
                                 (rule "applyEqRigid" (formula "28") (term "1,1") (ifseqformula "23"))
                                 (rule "add_zero_right" (formula "28") (term "1"))
                                 (rule "applyEq" (formula "24") (term "0") (ifseqformula "23"))
                                 (rule "qeq_literals" (formula "24"))
                                 (rule "true_left" (formula "24"))
                                 (rule "applyEqRigid" (formula "24") (term "1") (ifseqformula "23"))
                                 (rule "applyEq" (formula "10") (term "1") (ifseqformula "23"))
                                 (rule "applyEqRigid" (formula "11") (term "1") (ifseqformula "23"))
                                 (rule "applyEqRigid" (formula "12") (term "1") (ifseqformula "23"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                                 (rule "mul_literals" (formula "3") (term "1"))
                                 (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "3"))
                                 (rule "qeq_literals" (formula "2") (term "0"))
                                 (builtin "One Step Simplification" (formula "2"))
                                 (rule "closeFalse" (formula "2"))
                              )
                              (branch "CUT: res_min ≤ 0 FALSE"
                                 (builtin "One Step Simplification" (formula "9"))
                                 (rule "replace_known_right" (formula "7") (term "0,0") (ifseqformula "31"))
                                 (builtin "One Step Simplification" (formula "7"))
                                 (rule "replace_known_right" (formula "8") (term "1,0") (ifseqformula "31"))
                                 (builtin "One Step Simplification" (formula "8"))
                                 (rule "inEqSimp_leqRight" (formula "31"))
                                 (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "1") (term "0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                 (rule "mul_literals" (formula "1") (term "1"))
                                 (rule "inEqSimp_subsumption1" (formula "27") (ifseqformula "1"))
                                 (rule "leq_literals" (formula "27") (term "0"))
                                 (builtin "One Step Simplification" (formula "27"))
                                 (rule "true_left" (formula "27"))
                                 (rule "cut_direct" (formula "8") (term "0"))
                                 (branch "CUT: b[0] ≥ a[0] TRUE"
                                    (builtin "One Step Simplification" (formula "9"))
                                    (rule "true_left" (formula "9"))
                                    (rule "replace_known_left" (formula "9") (term "1") (ifseqformula "8"))
                                    (builtin "One Step Simplification" (formula "9"))
                                    (rule "true_left" (formula "9"))
                                    (rule "replace_known_left" (formula "9") (term "1") (ifseqformula "8"))
                                    (builtin "One Step Simplification" (formula "9"))
                                    (rule "true_left" (formula "9"))
                                    (rule "inEqSimp_strengthen1" (formula "8") (ifseqformula "30"))
                                    (rule "inEqSimp_contradEq7" (formula "30") (ifseqformula "8"))
                                    (rule "polySimp_mulComm0" (formula "30") (term "1,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "30") (term "0,0"))
                                    (rule "add_literals" (formula "30") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "30") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "30") (term "0,0"))
                                    (rule "leq_literals" (formula "30") (term "0"))
                                    (builtin "One Step Simplification" (formula "30"))
                                    (rule "false_right" (formula "30"))
                                    (rule "allLeft" (formula "5") (inst "t=Z(0(#))"))
                                    (rule "add_zero_right" (formula "5") (term "1,1,1,0"))
                                    (rule "leq_literals" (formula "5") (term "0,0,0,0,0,0"))
                                    (builtin "One Step Simplification" (formula "5"))
                                    (rule "leq_literals" (formula "5") (term "0,0,0,1,0"))
                                    (builtin "One Step Simplification" (formula "5"))
                                    (rule "leq_literals" (formula "5") (term "0,0,0,1,0,0"))
                                    (builtin "One Step Simplification" (formula "5"))
                                    (rule "exLeft" (formula "5") (inst "sk=j_31"))
                                    (rule "andLeft" (formula "5"))
                                    (rule "andLeft" (formula "5"))
                                    (rule "inEqSimp_commuteGeq" (formula "7") (term "0,0"))
                                    (rule "inEqSimp_commuteGeq" (formula "6") (term "0,0"))
                                    (rule "inEqSimp_commuteGeq" (formula "5") (term "0,0"))
                                    (rule "inEqSimp_contradInEq1" (formula "7") (term "0,0") (ifseqformula "1"))
                                    (rule "qeq_literals" (formula "7") (term "0,0,0"))
                                    (builtin "One Step Simplification" (formula "7"))
                                    (rule "inEqSimp_contradInEq1" (formula "5") (term "0,0") (ifseqformula "1"))
                                    (rule "qeq_literals" (formula "5") (term "0,0,0"))
                                    (builtin "One Step Simplification" (formula "5"))
                                    (rule "inEqSimp_contradInEq1" (formula "6") (term "0,0") (ifseqformula "1"))
                                    (rule "qeq_literals" (formula "6") (term "0,0,0"))
                                    (builtin "One Step Simplification" (formula "6"))
                                    (rule "inEqSimp_contradInEq1" (formula "7") (term "0") (ifseqformula "11"))
                                    (rule "inEqSimp_homoInEq1" (formula "7") (term "0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0,0"))
                                    (rule "add_literals" (formula "7") (term "1,1,0,0,0"))
                                    (rule "times_zero_1" (formula "7") (term "1,0,0,0"))
                                    (rule "add_zero_right" (formula "7") (term "0,0,0"))
                                    (rule "leq_literals" (formula "7") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "7"))
                                    (rule "inEqSimp_contradInEq1" (formula "5") (term "0") (ifseqformula "11"))
                                    (rule "inEqSimp_homoInEq1" (formula "5") (term "0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "5") (term "0,0,0"))
                                    (rule "add_literals" (formula "5") (term "1,1,0,0,0"))
                                    (rule "times_zero_1" (formula "5") (term "1,0,0,0"))
                                    (rule "add_zero_right" (formula "5") (term "0,0,0"))
                                    (rule "leq_literals" (formula "5") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "5"))
                                    (rule "notLeft" (formula "5"))
                                    (rule "inEqSimp_contradInEq1" (formula "5") (term "0") (ifseqformula "10"))
                                    (rule "inEqSimp_homoInEq1" (formula "5") (term "0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "5") (term "0,0,0"))
                                    (rule "add_literals" (formula "5") (term "1,1,0,0,0"))
                                    (rule "times_zero_1" (formula "5") (term "1,0,0,0"))
                                    (rule "add_zero_right" (formula "5") (term "0,0,0"))
                                    (rule "leq_literals" (formula "5") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "5"))
                                    (rule "inEqSimp_contradInEq0" (formula "5") (ifseqformula "6"))
                                    (rule "qeq_literals" (formula "5") (term "0"))
                                    (builtin "One Step Simplification" (formula "5"))
                                    (rule "closeFalse" (formula "5"))
                                 )
                                 (branch "CUT: b[0] ≥ a[0] FALSE"
                                    (builtin "One Step Simplification" (formula "8"))
                                    (rule "notLeft" (formula "8"))
                                    (rule "replace_known_right" (formula "8") (term "1") (ifseqformula "31"))
                                    (builtin "One Step Simplification" (formula "8"))
                                    (rule "replace_known_right" (formula "9") (term "1") (ifseqformula "31"))
                                    (builtin "One Step Simplification" (formula "9"))
                                    (rule "inEqSimp_geqRight" (formula "31"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                    (rule "mul_literals" (formula "1") (term "0,1"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                    (rule "inEqSimp_contradEq3" (formula "33") (ifseqformula "1"))
                                    (rule "polySimp_mulComm0" (formula "33") (term "1,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "33") (term "0,0"))
                                    (rule "add_literals" (formula "33") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "33") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "33") (term "0,0"))
                                    (rule "qeq_literals" (formula "33") (term "0"))
                                    (builtin "One Step Simplification" (formula "33"))
                                    (rule "false_right" (formula "33"))
                                    (rule "inEqSimp_contradInEq0" (formula "9") (ifseqformula "10"))
                                    (rule "qeq_literals" (formula "9") (term "0"))
                                    (builtin "One Step Simplification" (formula "9"))
                                    (rule "closeFalse" (formula "9"))
                                 )
                              )
                           )
                        )
                        (branch "Case 2"
                           (rule "notRight" (formula "25"))
                           (rule "replace_known_left" (formula "24") (term "1") (ifseqformula "1"))
                           (builtin "One Step Simplification" (formula "24"))
                           (rule "replace_known_left" (formula "28") (term "1") (ifseqformula "24"))
                           (builtin "One Step Simplification" (formula "28"))
                           (rule "allRight" (formula "28") (inst "sk=j_10"))
                           (rule "orRight" (formula "28"))
                           (rule "orRight" (formula "28"))
                           (rule "inEqSimp_geqRight" (formula "25"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0"))
                           (rule "add_zero_left" (formula "1") (term "0,0"))
                           (rule "inEqSimp_leqRight" (formula "28"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_geqRight" (formula "29"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "applyEq" (formula "27") (term "0") (ifseqformula "4"))
                           (rule "inEqSimp_homoInEq0" (formula "27"))
                           (rule "polySimp_pullOutFactor1" (formula "27") (term "0"))
                           (rule "add_literals" (formula "27") (term "1,0"))
                           (rule "times_zero_1" (formula "27") (term "0"))
                           (rule "qeq_literals" (formula "27"))
                           (rule "true_left" (formula "27"))
                           (rule "applyEq" (formula "7") (term "0") (ifseqformula "4"))
                           (rule "inEqSimp_homoInEq1" (formula "7"))
                           (rule "polySimp_pullOutFactor1" (formula "7") (term "0"))
                           (rule "add_literals" (formula "7") (term "1,0"))
                           (rule "times_zero_1" (formula "7") (term "0"))
                           (rule "leq_literals" (formula "7"))
                           (rule "true_left" (formula "7"))
                           (rule "applyEq" (formula "3") (term "1,0") (ifseqformula "4"))
                           (rule "polySimp_pullOutFactor2" (formula "3") (term "0"))
                           (rule "add_literals" (formula "3") (term "1,0"))
                           (rule "times_zero_1" (formula "3") (term "0"))
                           (rule "leq_literals" (formula "3"))
                           (rule "true_left" (formula "3"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0"))
                           (rule "ex_pull_out3" (formula "7") (term "1,0"))
                           (rule "cnf_rightDist" (formula "7") (term "0,1,0"))
                           (rule "commute_or" (formula "7") (term "1,0,1,0"))
                           (rule "ex_pull_out3" (formula "6") (term "1,0"))
                           (rule "cnf_rightDist" (formula "6") (term "0,1,0"))
                           (rule "commute_or" (formula "6") (term "1,0,1,0"))
                           (rule "cnf_rightDist" (formula "7") (term "0,0,1,0"))
                           (rule "commute_or" (formula "7") (term "1,0,0,1,0"))
                           (rule "cnf_rightDist" (formula "6") (term "0,0,1,0"))
                           (rule "commute_or" (formula "6") (term "1,0,0,1,0"))
                           (rule "ex_pull_out3" (formula "7") (term "0"))
                           (rule "cnf_rightDist" (formula "7") (term "0,0"))
                           (rule "commute_or_2" (formula "7") (term "1,0,0"))
                           (rule "commute_or" (formula "7") (term "0,1,0,0"))
                           (rule "cnf_rightDist" (formula "7") (term "0,0,0"))
                           (rule "commute_or_2" (formula "7") (term "1,0,0,0"))
                           (rule "shift_paren_or" (formula "7") (term "0,0,0,0"))
                           (rule "commute_or" (formula "7") (term "0,1,0,0,0"))
                           (rule "ex_pull_out3" (formula "6") (term "0"))
                           (rule "cnf_rightDist" (formula "6") (term "0,0"))
                           (rule "commute_or_2" (formula "6") (term "1,0,0"))
                           (rule "commute_or" (formula "6") (term "0,1,0,0"))
                           (rule "cnf_rightDist" (formula "6") (term "0,0,0"))
                           (rule "commute_or_2" (formula "6") (term "1,0,0,0"))
                           (rule "shift_paren_or" (formula "6") (term "0,0,0,0"))
                           (rule "commute_or" (formula "6") (term "0,1,0,0,0"))
                           (rule "commute_and_2" (formula "7") (term "0,0"))
                           (rule "arrayLengthIsAShort" (formula "23") (term "0"))
                           (builtin "One Step Simplification" (formula "23"))
                           (rule "true_left" (formula "23"))
                           (rule "arrayLengthNotNegative" (formula "23") (term "0"))
                           (rule "applyEq" (formula "23") (term "0") (ifseqformula "24"))
                           (rule "commute_and_2" (formula "6") (term "0,0"))
                           (rule "commute_and" (formula "7") (term "0,0,0"))
                           (rule "commute_and" (formula "6") (term "0,0,0"))
                           (rule "arrayLengthNotNegative" (formula "3") (term "0"))
                           (rule "applyEq" (formula "3") (term "0") (ifseqformula "4"))
                           (rule "arrayLengthIsAShort" (formula "3") (term "0"))
                           (builtin "One Step Simplification" (formula "3"))
                           (rule "true_left" (formula "3"))
                           (rule "allLeft" (formula "7") (inst "t=j_10"))
                           (rule "exLeft" (formula "7") (inst "sk=j_11"))
                           (rule "andLeft" (formula "7"))
                           (rule "andLeft" (formula "7"))
                           (rule "inEqSimp_commuteGeq" (formula "9") (term "1,0,0"))
                           (rule "inEqSimp_commuteGeq" (formula "7") (term "1,0,0"))
                           (rule "inEqSimp_commuteGeq" (formula "8") (term "1,0,0"))
                           (rule "inEqSimp_contradInEq1" (formula "8") (term "0,0,0") (ifseqformula "2"))
                           (rule "qeq_literals" (formula "8") (term "0,0,0,0"))
                           (builtin "One Step Simplification" (formula "8"))
                           (rule "inEqSimp_contradInEq1" (formula "7") (term "1,0,0") (ifseqformula "1"))
                           (rule "inEqSimp_homoInEq1" (formula "7") (term "0,1,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "7") (term "1,1,0,0,1,0,0"))
                           (rule "times_zero_1" (formula "7") (term "1,0,0,1,0,0"))
                           (rule "add_zero_right" (formula "7") (term "0,0,1,0,0"))
                           (rule "leq_literals" (formula "7") (term "0,1,0,0"))
                           (builtin "One Step Simplification" (formula "7"))
                           (rule "inEqSimp_contradInEq1" (formula "9") (term "1,0,0") (ifseqformula "1"))
                           (rule "inEqSimp_homoInEq1" (formula "9") (term "0,1,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "9") (term "1,1,0,0,1,0,0"))
                           (rule "times_zero_1" (formula "9") (term "1,0,0,1,0,0"))
                           (rule "add_zero_right" (formula "9") (term "0,0,1,0,0"))
                           (rule "leq_literals" (formula "9") (term "0,1,0,0"))
                           (builtin "One Step Simplification" (formula "9"))
                           (rule "inEqSimp_contradInEq1" (formula "8") (term "0,0") (ifseqformula "1"))
                           (rule "inEqSimp_homoInEq1" (formula "8") (term "0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0,0,0"))
                           (rule "add_literals" (formula "8") (term "1,1,0,0,0,0"))
                           (rule "times_zero_1" (formula "8") (term "1,0,0,0,0"))
                           (rule "add_zero_right" (formula "8") (term "0,0,0,0"))
                           (rule "leq_literals" (formula "8") (term "0,0,0"))
                           (builtin "One Step Simplification" (formula "8"))
                           (rule "inEqSimp_contradInEq1" (formula "9") (term "0,0") (ifseqformula "2"))
                           (rule "qeq_literals" (formula "9") (term "0,0,0"))
                           (builtin "One Step Simplification" (formula "9"))
                           (rule "inEqSimp_contradInEq1" (formula "7") (term "0,0") (ifseqformula "2"))
                           (rule "qeq_literals" (formula "7") (term "0,0,0"))
                           (builtin "One Step Simplification" (formula "7"))
                           (rule "commute_or" (formula "8"))
                           (rule "commute_or" (formula "9"))
                           (rule "cut_direct" (formula "7") (term "0"))
                           (branch "CUT: b[j_10] ≥ a[j_10] TRUE"
                              (builtin "One Step Simplification" (formula "8"))
                              (rule "true_left" (formula "8"))
                              (rule "replace_known_left" (formula "9") (term "1") (ifseqformula "7"))
                              (builtin "One Step Simplification" (formula "9"))
                              (rule "true_left" (formula "9"))
                              (rule "replace_known_left" (formula "8") (term "1") (ifseqformula "7"))
                              (builtin "One Step Simplification" (formula "8"))
                              (rule "true_left" (formula "8"))
                              (rule "inEqSimp_strengthen1" (formula "7") (ifseqformula "29"))
                              (rule "inEqSimp_contradEq7" (formula "29") (ifseqformula "7"))
                              (rule "polySimp_mulComm0" (formula "29") (term "1,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0"))
                              (rule "add_literals" (formula "29") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "29") (term "1,0,0"))
                              (rule "add_zero_right" (formula "29") (term "0,0"))
                              (rule "leq_literals" (formula "29") (term "0"))
                              (builtin "One Step Simplification" (formula "29"))
                              (rule "false_right" (formula "29"))
                              (rule "allLeft" (formula "6") (inst "t=j_10"))
                              (rule "exLeft" (formula "6") (inst "sk=j_20"))
                              (rule "andLeft" (formula "6"))
                              (rule "andLeft" (formula "6"))
                              (rule "inEqSimp_commuteGeq" (formula "8") (term "1,0,0"))
                              (rule "inEqSimp_commuteGeq" (formula "6") (term "1,0,0"))
                              (rule "inEqSimp_commuteGeq" (formula "7") (term "1,0,0"))
                              (rule "inEqSimp_contradInEq1" (formula "8") (term "0,0,0") (ifseqformula "2"))
                              (rule "qeq_literals" (formula "8") (term "0,0,0,0"))
                              (builtin "One Step Simplification" (formula "8"))
                              (rule "inEqSimp_contradInEq1" (formula "7") (term "1,0") (ifseqformula "10"))
                              (rule "inEqSimp_homoInEq1" (formula "7") (term "0,1,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0,1,0"))
                              (rule "add_literals" (formula "7") (term "1,1,0,0,1,0"))
                              (rule "times_zero_1" (formula "7") (term "1,0,0,1,0"))
                              (rule "add_zero_right" (formula "7") (term "0,0,1,0"))
                              (rule "leq_literals" (formula "7") (term "0,1,0"))
                              (builtin "One Step Simplification" (formula "7"))
                              (rule "inEqSimp_contradInEq1" (formula "6") (term "0,0,0") (ifseqformula "2"))
                              (rule "qeq_literals" (formula "6") (term "0,0,0,0"))
                              (builtin "One Step Simplification" (formula "6"))
                              (rule "inEqSimp_contradInEq1" (formula "8") (term "1,0") (ifseqformula "10"))
                              (rule "inEqSimp_homoInEq1" (formula "8") (term "0,1,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0,1,0"))
                              (rule "add_literals" (formula "8") (term "1,1,0,0,1,0"))
                              (rule "times_zero_1" (formula "8") (term "1,0,0,1,0"))
                              (rule "add_zero_right" (formula "8") (term "0,0,1,0"))
                              (rule "leq_literals" (formula "8") (term "0,1,0"))
                              (builtin "One Step Simplification" (formula "8"))
                              (rule "inEqSimp_contradInEq1" (formula "7") (term "1,0") (ifseqformula "1"))
                              (rule "inEqSimp_homoInEq1" (formula "7") (term "0,1,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0,1,0"))
                              (rule "add_literals" (formula "7") (term "1,1,0,0,1,0"))
                              (rule "times_zero_1" (formula "7") (term "1,0,0,1,0"))
                              (rule "add_zero_right" (formula "7") (term "0,0,1,0"))
                              (rule "leq_literals" (formula "7") (term "0,1,0"))
                              (builtin "One Step Simplification" (formula "7"))
                              (rule "inEqSimp_contradInEq1" (formula "6") (term "1,0") (ifseqformula "10"))
                              (rule "inEqSimp_homoInEq1" (formula "6") (term "0,1,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0,1,0"))
                              (rule "add_literals" (formula "6") (term "1,1,0,0,1,0"))
                              (rule "times_zero_1" (formula "6") (term "1,0,0,1,0"))
                              (rule "add_zero_right" (formula "6") (term "0,0,1,0"))
                              (rule "leq_literals" (formula "6") (term "0,1,0"))
                              (builtin "One Step Simplification" (formula "6"))
                              (rule "inEqSimp_contradInEq1" (formula "8") (term "0") (ifseqformula "1"))
                              (rule "inEqSimp_homoInEq1" (formula "8") (term "0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0,0"))
                              (rule "add_literals" (formula "8") (term "1,1,0,0,0"))
                              (rule "times_zero_1" (formula "8") (term "1,0,0,0"))
                              (rule "add_zero_right" (formula "8") (term "0,0,0"))
                              (rule "leq_literals" (formula "8") (term "0,0"))
                              (builtin "One Step Simplification" (formula "8"))
                              (rule "inEqSimp_contradInEq1" (formula "6") (term "0") (ifseqformula "1"))
                              (rule "inEqSimp_homoInEq1" (formula "6") (term "0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0,0"))
                              (rule "add_literals" (formula "6") (term "1,1,0,0,0"))
                              (rule "times_zero_1" (formula "6") (term "1,0,0,0"))
                              (rule "add_zero_right" (formula "6") (term "0,0,0"))
                              (rule "leq_literals" (formula "6") (term "0,0"))
                              (builtin "One Step Simplification" (formula "6"))
                              (rule "notLeft" (formula "6"))
                              (rule "inEqSimp_contradInEq1" (formula "6") (term "0") (ifseqformula "2"))
                              (rule "qeq_literals" (formula "6") (term "0,0"))
                              (builtin "One Step Simplification" (formula "6"))
                              (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "7"))
                              (rule "times_zero_1" (formula "6") (term "0,0"))
                              (rule "add_zero_left" (formula "6") (term "0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "6"))
                              (rule "mul_literals" (formula "6") (term "1"))
                              (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "6"))
                              (rule "leq_literals" (formula "2") (term "0"))
                              (builtin "One Step Simplification" (formula "2"))
                              (rule "true_left" (formula "2"))
                              (rule "allLeft" (formula "10") (inst "t=j_9"))
                              (rule "exLeft" (formula "10") (inst "sk=j_21"))
                              (rule "andLeft" (formula "10"))
                              (rule "andLeft" (formula "10"))
                              (rule "inEqSimp_commuteGeq" (formula "12") (term "1,0,0"))
                              (rule "inEqSimp_commuteGeq" (formula "11") (term "1,0,0"))
                              (rule "inEqSimp_commuteGeq" (formula "10") (term "1,0,0"))
                              (rule "inEqSimp_homoInEq0" (formula "12") (term "1"))
                              (rule "polySimp_addComm1" (formula "12") (term "0,1"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1"))
                              (rule "polySimp_mulComm0" (formula "12") (term "1,1"))
                              (rule "polySimp_rightDist" (formula "12") (term "1,1"))
                              (rule "mul_literals" (formula "12") (term "0,1,1"))
                              (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1"))
                              (rule "polySimp_elimOne" (formula "12") (term "1,1,1"))
                              (rule "inEqSimp_contradInEq1" (formula "11") (term "0,0,0") (ifseqformula "3"))
                              (rule "qeq_literals" (formula "11") (term "0,0,0,0"))
                              (builtin "One Step Simplification" (formula "11"))
                              (rule "inEqSimp_contradInEq1" (formula "12") (term "1,0,0") (ifseqformula "4"))
                              (rule "inEqSimp_homoInEq1" (formula "12") (term "0,1,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "12") (term "1,1,0,0,1,0,0"))
                              (rule "times_zero_1" (formula "12") (term "1,0,0,1,0,0"))
                              (rule "add_zero_right" (formula "12") (term "0,0,1,0,0"))
                              (rule "leq_literals" (formula "12") (term "0,1,0,0"))
                              (builtin "One Step Simplification" (formula "12"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (term "0,0,0") (ifseqformula "3"))
                              (rule "qeq_literals" (formula "10") (term "0,0,0,0"))
                              (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "11") (term "0,0") (ifseqformula "4"))
                              (rule "inEqSimp_homoInEq1" (formula "11") (term "0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,0,0"))
                              (rule "add_literals" (formula "11") (term "1,1,0,0,0,0"))
                              (rule "times_zero_1" (formula "11") (term "1,0,0,0,0"))
                              (rule "add_zero_right" (formula "11") (term "0,0,0,0"))
                              (rule "leq_literals" (formula "11") (term "0,0,0"))
                              (builtin "One Step Simplification" (formula "11"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (term "0,0") (ifseqformula "4"))
                              (rule "inEqSimp_homoInEq1" (formula "10") (term "0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,0,0"))
                              (rule "add_literals" (formula "10") (term "1,1,0,0,0,0"))
                              (rule "times_zero_1" (formula "10") (term "1,0,0,0,0"))
                              (rule "add_zero_right" (formula "10") (term "0,0,0,0"))
                              (rule "leq_literals" (formula "10") (term "0,0,0"))
                              (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "12") (term "0,0") (ifseqformula "3"))
                              (rule "qeq_literals" (formula "12") (term "0,0,0"))
                              (builtin "One Step Simplification" (formula "12"))
                              (rule "commute_or" (formula "11"))
                              (rule "commute_or" (formula "10"))
                              (rule "commute_or" (formula "12"))
                              (rule "allLeft" (formula "8") (inst "t=j_9"))
                              (rule "exLeft" (formula "8") (inst "sk=j_22"))
                              (rule "andLeft" (formula "8"))
                              (rule "andLeft" (formula "8"))
                              (rule "inEqSimp_commuteGeq" (formula "10") (term "1,0,0"))
                              (rule "inEqSimp_commuteGeq" (formula "8") (term "1,0,0"))
                              (rule "inEqSimp_commuteGeq" (formula "9") (term "1,0,0"))
                              (rule "inEqSimp_homoInEq0" (formula "10") (term "1"))
                              (rule "polySimp_addComm1" (formula "10") (term "0,1"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1"))
                              (rule "polySimp_mulComm0" (formula "10") (term "1,1"))
                              (rule "polySimp_rightDist" (formula "10") (term "1,1"))
                              (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1"))
                              (rule "mul_literals" (formula "10") (term "0,1,1"))
                              (rule "polySimp_elimOne" (formula "10") (term "1,1,1"))
                              (rule "inEqSimp_contradInEq1" (formula "8") (term "0,0,0") (ifseqformula "3"))
                              (rule "qeq_literals" (formula "8") (term "0,0,0,0"))
                              (builtin "One Step Simplification" (formula "8"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (term "1,0,0") (ifseqformula "4"))
                              (rule "inEqSimp_homoInEq1" (formula "10") (term "0,1,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "10") (term "1,1,0,0,1,0,0"))
                              (rule "times_zero_1" (formula "10") (term "1,0,0,1,0,0"))
                              (rule "add_zero_right" (formula "10") (term "0,0,1,0,0"))
                              (rule "leq_literals" (formula "10") (term "0,1,0,0"))
                              (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "9") (term "0,0,0") (ifseqformula "3"))
                              (rule "qeq_literals" (formula "9") (term "0,0,0,0"))
                              (builtin "One Step Simplification" (formula "9"))
                              (rule "inEqSimp_contradInEq1" (formula "8") (term "0,0") (ifseqformula "4"))
                              (rule "inEqSimp_homoInEq1" (formula "8") (term "0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0,0,0"))
                              (rule "add_literals" (formula "8") (term "1,1,0,0,0,0"))
                              (rule "times_zero_1" (formula "8") (term "1,0,0,0,0"))
                              (rule "add_zero_right" (formula "8") (term "0,0,0,0"))
                              (rule "leq_literals" (formula "8") (term "0,0,0"))
                              (builtin "One Step Simplification" (formula "8"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (term "0,0") (ifseqformula "3"))
                              (rule "qeq_literals" (formula "10") (term "0,0,0"))
                              (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "9") (term "0,0") (ifseqformula "4"))
                              (rule "inEqSimp_homoInEq1" (formula "9") (term "0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0,0,0"))
                              (rule "add_literals" (formula "9") (term "1,1,0,0,0,0"))
                              (rule "times_zero_1" (formula "9") (term "1,0,0,0,0"))
                              (rule "add_zero_right" (formula "9") (term "0,0,0,0"))
                              (rule "leq_literals" (formula "9") (term "0,0,0"))
                              (builtin "One Step Simplification" (formula "9"))
                              (rule "commute_or" (formula "8"))
                              (rule "commute_or" (formula "10"))
                              (rule "commute_or" (formula "9"))
                              (rule "allLeft" (formula "16") (inst "t=Z(0(#))"))
                              (rule "leq_literals" (formula "16") (term "0,0,0,0,0,0"))
                              (builtin "One Step Simplification" (formula "16"))
                              (rule "add_literals" (formula "16") (term "1,1,1,0"))
                              (rule "leq_literals" (formula "16") (term "0,0,0,1,0"))
                              (builtin "One Step Simplification" (formula "16"))
                              (rule "leq_literals" (formula "16") (term "0,0,0,1,0,0"))
                              (builtin "One Step Simplification" (formula "16"))
                              (rule "exLeft" (formula "16") (inst "sk=j_23"))
                              (rule "andLeft" (formula "16"))
                              (rule "andLeft" (formula "16"))
                              (rule "inEqSimp_commuteGeq" (formula "18") (term "0,0"))
                              (rule "inEqSimp_commuteGeq" (formula "17") (term "0,0"))
                              (rule "inEqSimp_commuteGeq" (formula "16") (term "0,0"))
                              (rule "commute_or_2" (formula "18"))
                              (rule "commute_or_2" (formula "17"))
                              (rule "commute_or" (formula "18") (term "0"))
                              (rule "commute_or" (formula "17") (term "0"))
                              (rule "allLeft" (formula "11") (inst "t=Z(0(#))"))
                              (rule "add_zero_right" (formula "11") (term "1,1,1,0"))
                              (rule "leq_literals" (formula "11") (term "0,0,0,0,0,0"))
                              (builtin "One Step Simplification" (formula "11"))
                              (rule "leq_literals" (formula "11") (term "0,0,0,1,0"))
                              (builtin "One Step Simplification" (formula "11"))
                              (rule "leq_literals" (formula "11") (term "0,0,0,1,0,0"))
                              (builtin "One Step Simplification" (formula "11"))
                              (rule "exLeft" (formula "11") (inst "sk=j_24"))
                              (rule "andLeft" (formula "11"))
                              (rule "andLeft" (formula "11"))
                              (rule "inEqSimp_commuteGeq" (formula "13") (term "0,0"))
                              (rule "inEqSimp_commuteGeq" (formula "12") (term "0,0"))
                              (rule "inEqSimp_commuteGeq" (formula "11") (term "0,0"))
                              (rule "commute_or_2" (formula "13"))
                              (rule "commute_or_2" (formula "12"))
                              (rule "commute_or" (formula "13") (term "0"))
                              (rule "commute_or" (formula "12") (term "0"))
                              (rule "cut_direct" (formula "16") (term "1"))
                              (branch "CUT: b[j_9] ≥ a[j_9] TRUE"
                                 (builtin "One Step Simplification" (formula "17"))
                                 (rule "true_left" (formula "17"))
                                 (rule "replace_known_left" (formula "17") (term "1") (ifseqformula "16"))
                                 (builtin "One Step Simplification" (formula "17"))
                                 (rule "true_left" (formula "17"))
                                 (rule "replace_known_left" (formula "17") (term "1") (ifseqformula "16"))
                                 (builtin "One Step Simplification" (formula "17"))
                                 (rule "true_left" (formula "17"))
                                 (rule "inEqSimp_strengthen1" (formula "16") (ifseqformula "41"))
                                 (rule "inEqSimp_contradEq7" (formula "41") (ifseqformula "16"))
                                 (rule "polySimp_mulComm0" (formula "41") (term "1,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "41") (term "0,0"))
                                 (rule "add_literals" (formula "41") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "41") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "41") (term "0,0"))
                                 (rule "leq_literals" (formula "41") (term "0"))
                                 (builtin "One Step Simplification" (formula "41"))
                                 (rule "false_right" (formula "41"))
                                 (rule "inEqSimp_contradInEq1" (formula "10") (term "1") (ifseqformula "16"))
                                 (rule "inEqSimp_homoInEq1" (formula "10") (term "0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1"))
                                 (rule "add_literals" (formula "10") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "10") (term "1,0,0,1"))
                                 (rule "add_zero_right" (formula "10") (term "0,0,1"))
                                 (rule "leq_literals" (formula "10") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "10"))
                                 (rule "inEqSimp_contradInEq1" (formula "9") (term "1") (ifseqformula "16"))
                                 (rule "inEqSimp_homoInEq1" (formula "9") (term "0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0,1"))
                                 (rule "add_literals" (formula "9") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "9") (term "1,0,0,1"))
                                 (rule "add_zero_right" (formula "9") (term "0,0,1"))
                                 (rule "leq_literals" (formula "9") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "9"))
                                 (rule "inEqSimp_contradInEq1" (formula "8") (term "1") (ifseqformula "16"))
                                 (rule "inEqSimp_homoInEq1" (formula "8") (term "0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0,1"))
                                 (rule "add_literals" (formula "8") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "8") (term "1,0,0,1"))
                                 (rule "add_zero_right" (formula "8") (term "0,0,1"))
                                 (rule "leq_literals" (formula "8") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "8"))
                                 (rule "notLeft" (formula "8"))
                                 (rule "cut_direct" (formula "10") (term "0,0"))
                                 (branch "CUT: res_min ≤ 0 TRUE"
                                    (builtin "One Step Simplification" (formula "11"))
                                    (rule "true_left" (formula "11"))
                                    (rule "replace_known_left" (formula "12") (term "1,0") (ifseqformula "10"))
                                    (builtin "One Step Simplification" (formula "12"))
                                    (rule "true_left" (formula "12"))
                                    (rule "replace_known_left" (formula "15") (term "0,0") (ifseqformula "10"))
                                    (builtin "One Step Simplification" (formula "15"))
                                    (rule "true_left" (formula "15"))
                                    (rule "replace_known_left" (formula "11") (term "1,0") (ifseqformula "10"))
                                    (builtin "One Step Simplification" (formula "11"))
                                    (rule "true_left" (formula "11"))
                                    (rule "replace_known_left" (formula "14") (term "1,0") (ifseqformula "10"))
                                    (builtin "One Step Simplification" (formula "14"))
                                    (rule "true_left" (formula "14"))
                                    (rule "replace_known_left" (formula "14") (term "1,0") (ifseqformula "10"))
                                    (builtin "One Step Simplification" (formula "14"))
                                    (rule "true_left" (formula "14"))
                                    (rule "inEqSimp_antiSymm" (formula "30") (ifseqformula "10"))
                                    (rule "applyEqRigid" (formula "10") (term "0") (ifseqformula "30"))
                                    (rule "leq_literals" (formula "10"))
                                    (rule "true_left" (formula "10"))
                                    (rule "applyEqRigid" (formula "13") (term "1,1,0,0,1,0,0,0") (ifseqformula "29"))
                                    (rule "applyEqRigid" (formula "4") (term "0") (ifseqformula "29"))
                                    (rule "inEqSimp_homoInEq1" (formula "4"))
                                    (rule "mul_literals" (formula "4") (term "1,0"))
                                    (rule "add_zero_right" (formula "4") (term "0"))
                                    (rule "applyEq" (formula "1") (term "0") (ifseqformula "29"))
                                    (rule "inEqSimp_homoInEq1" (formula "1"))
                                    (rule "mul_literals" (formula "1") (term "1,0"))
                                    (rule "add_zero_right" (formula "1") (term "0"))
                                    (rule "applyEqRigid" (formula "13") (term "1,1,0,0,0,0,0,0") (ifseqformula "29"))
                                    (rule "applyEqRigid" (formula "13") (term "1,1,0,0,1,0,0") (ifseqformula "29"))
                                    (rule "applyEq" (formula "10") (term "1,1,0,0,1,0,0") (ifseqformula "29"))
                                    (rule "applyEqRigid" (formula "10") (term "1,1,0,0,0,0,0,0") (ifseqformula "29"))
                                    (rule "applyEq" (formula "10") (term "1,1,0,0,1,0,0,0") (ifseqformula "29"))
                                    (rule "applyEq" (formula "30") (term "0") (ifseqformula "29"))
                                    (rule "qeq_literals" (formula "30"))
                                    (rule "true_left" (formula "30"))
                                    (rule "applyEq" (formula "18") (term "1") (ifseqformula "29"))
                                    (rule "applyEq" (formula "2") (term "1") (ifseqformula "29"))
                                    (rule "applyEq" (formula "30") (term "1") (ifseqformula "29"))
                                    (rule "applyEq" (formula "16") (term "1") (ifseqformula "29"))
                                    (rule "applyEqRigid" (formula "17") (term "1") (ifseqformula "29"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                                    (rule "mul_literals" (formula "4") (term "1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                    (rule "mul_literals" (formula "1") (term "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "4") (ifseqformula "3"))
                                    (rule "qeq_literals" (formula "4") (term "0"))
                                    (builtin "One Step Simplification" (formula "4"))
                                    (rule "closeFalse" (formula "4"))
                                 )
                                 (branch "CUT: res_min ≤ 0 FALSE"
                                    (builtin "One Step Simplification" (formula "10"))
                                    (rule "replace_known_right" (formula "16") (term "0,0") (ifseqformula "38"))
                                    (builtin "One Step Simplification" (formula "16"))
                                    (rule "replace_known_right" (formula "17") (term "1,0") (ifseqformula "38"))
                                    (builtin "One Step Simplification" (formula "17"))
                                    (rule "replace_known_right" (formula "11") (term "1,0") (ifseqformula "38"))
                                    (builtin "One Step Simplification" (formula "11"))
                                    (rule "replace_known_right" (formula "18") (term "1,0") (ifseqformula "38"))
                                    (builtin "One Step Simplification" (formula "18"))
                                    (rule "replace_known_right" (formula "12") (term "1,0") (ifseqformula "38"))
                                    (builtin "One Step Simplification" (formula "12"))
                                    (rule "inEqSimp_leqRight" (formula "38"))
                                    (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "1") (term "0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                    (rule "mul_literals" (formula "1") (term "1"))
                                    (rule "inEqSimp_subsumption1" (formula "36") (ifseqformula "1"))
                                    (rule "leq_literals" (formula "36") (term "0"))
                                    (builtin "One Step Simplification" (formula "36"))
                                    (rule "true_left" (formula "36"))
                                    (rule "allLeft" (formula "14") (inst "t=j_20"))
                                    (rule "exLeft" (formula "14") (inst "sk=j_27"))
                                    (rule "andLeft" (formula "14"))
                                    (rule "andLeft" (formula "14"))
                                    (rule "inEqSimp_commuteGeq" (formula "16") (term "1,0,0"))
                                    (rule "inEqSimp_commuteGeq" (formula "14") (term "1,0,0"))
                                    (rule "inEqSimp_commuteGeq" (formula "15") (term "1,0,0"))
                                    (rule "inEqSimp_contradInEq1" (formula "15") (term "0,0,0") (ifseqformula "7"))
                                    (rule "qeq_literals" (formula "15") (term "0,0,0,0"))
                                    (builtin "One Step Simplification" (formula "15"))
                                    (rule "inEqSimp_contradInEq1" (formula "16") (term "0,0,0") (ifseqformula "7"))
                                    (rule "qeq_literals" (formula "16") (term "0,0,0,0"))
                                    (builtin "One Step Simplification" (formula "16"))
                                    (rule "inEqSimp_contradInEq1" (formula "14") (term "0,0,0") (ifseqformula "7"))
                                    (rule "qeq_literals" (formula "14") (term "0,0,0,0"))
                                    (builtin "One Step Simplification" (formula "14"))
                                    (rule "commute_or_2" (formula "15"))
                                    (rule "commute_or_2" (formula "16"))
                                    (rule "commute_or" (formula "15") (term "0"))
                                    (rule "commute_or" (formula "16") (term "0"))
                                    (rule "allLeft" (formula "23") (inst "t=j_20"))
                                    (rule "exLeft" (formula "23") (inst "sk=j_28"))
                                    (rule "andLeft" (formula "23"))
                                    (rule "andLeft" (formula "23"))
                                    (rule "inEqSimp_commuteGeq" (formula "25") (term "1,0,0"))
                                    (rule "inEqSimp_commuteGeq" (formula "23") (term "1,0,0"))
                                    (rule "inEqSimp_commuteGeq" (formula "24") (term "1,0,0"))
                                    (rule "inEqSimp_contradInEq1" (formula "24") (term "0,0,0") (ifseqformula "7"))
                                    (rule "qeq_literals" (formula "24") (term "0,0,0,0"))
                                    (builtin "One Step Simplification" (formula "24"))
                                    (rule "inEqSimp_contradInEq1" (formula "25") (term "0,0,0") (ifseqformula "7"))
                                    (rule "qeq_literals" (formula "25") (term "0,0,0,0"))
                                    (builtin "One Step Simplification" (formula "25"))
                                    (rule "inEqSimp_contradInEq1" (formula "23") (term "0,0,0") (ifseqformula "7"))
                                    (rule "qeq_literals" (formula "23") (term "0,0,0,0"))
                                    (builtin "One Step Simplification" (formula "23"))
                                    (rule "commute_or_2" (formula "24"))
                                    (rule "commute_or_2" (formula "25"))
                                    (rule "commute_or" (formula "24") (term "0"))
                                    (rule "commute_or" (formula "25") (term "0"))
                                    (rule "cut_direct" (formula "11") (term "0"))
                                    (branch "CUT: b[0] ≤ a[0] TRUE"
                                       (builtin "One Step Simplification" (formula "12"))
                                       (rule "true_left" (formula "12"))
                                       (rule "replace_known_left" (formula "12") (term "1") (ifseqformula "11"))
                                       (builtin "One Step Simplification" (formula "12"))
                                       (rule "true_left" (formula "12"))
                                       (rule "replace_known_left" (formula "12") (term "1") (ifseqformula "11"))
                                       (builtin "One Step Simplification" (formula "12"))
                                       (rule "true_left" (formula "12"))
                                       (rule "inEqSimp_strengthen0" (formula "11") (ifseqformula "44"))
                                       (rule "inEqSimp_contradEq3" (formula "44") (ifseqformula "11"))
                                       (rule "polySimp_mulComm0" (formula "44") (term "1,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "44") (term "0,0"))
                                       (rule "add_literals" (formula "44") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "44") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "44") (term "0,0"))
                                       (rule "qeq_literals" (formula "44") (term "0"))
                                       (builtin "One Step Simplification" (formula "44"))
                                       (rule "false_right" (formula "44"))
                                       (rule "inEqSimp_contradInEq0" (formula "19") (term "1") (ifseqformula "11"))
                                       (rule "inEqSimp_homoInEq1" (formula "19") (term "0,1"))
                                       (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1"))
                                       (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1"))
                                       (rule "mul_literals" (formula "19") (term "0,1,0,0,1"))
                                       (rule "polySimp_addAssoc" (formula "19") (term "0,0,1"))
                                       (rule "polySimp_addComm0" (formula "19") (term "0,0,0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,0,1"))
                                       (rule "add_literals" (formula "19") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "19") (term "1,0,0,1"))
                                       (rule "add_zero_right" (formula "19") (term "0,0,1"))
                                       (rule "leq_literals" (formula "19") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "19"))
                                       (rule "inEqSimp_contradInEq0" (formula "20") (term "1") (ifseqformula "11"))
                                       (rule "inEqSimp_homoInEq1" (formula "20") (term "0,1"))
                                       (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1"))
                                       (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1"))
                                       (rule "mul_literals" (formula "20") (term "0,1,0,0,1"))
                                       (rule "polySimp_addAssoc" (formula "20") (term "0,0,1"))
                                       (rule "polySimp_addComm0" (formula "20") (term "0,0,0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,1"))
                                       (rule "add_literals" (formula "20") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "20") (term "1,0,0,1"))
                                       (rule "add_zero_right" (formula "20") (term "0,0,1"))
                                       (rule "leq_literals" (formula "20") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "20"))
                                       (rule "inEqSimp_contradInEq0" (formula "18") (term "0") (ifseqformula "11"))
                                       (rule "inEqSimp_homoInEq1" (formula "18") (term "0,0"))
                                       (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "18") (term "1,0,0,0"))
                                       (rule "mul_literals" (formula "18") (term "0,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "18") (term "0,0,0"))
                                       (rule "polySimp_addComm0" (formula "18") (term "0,0,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0,0"))
                                       (rule "add_literals" (formula "18") (term "1,1,0,0,0"))
                                       (rule "times_zero_1" (formula "18") (term "1,0,0,0"))
                                       (rule "add_zero_right" (formula "18") (term "0,0,0"))
                                       (rule "leq_literals" (formula "18") (term "0,0"))
                                       (builtin "One Step Simplification" (formula "18"))
                                       (rule "notLeft" (formula "18"))
                                       (rule "inEqSimp_contradInEq1" (formula "19") (ifseqformula "18"))
                                       (rule "qeq_literals" (formula "19") (term "0"))
                                       (builtin "One Step Simplification" (formula "19"))
                                       (rule "closeFalse" (formula "19"))
                                    )
                                    (branch "CUT: b[0] ≤ a[0] FALSE"
                                       (builtin "One Step Simplification" (formula "11"))
                                       (rule "notLeft" (formula "11"))
                                       (rule "replace_known_right" (formula "12") (term "1") (ifseqformula "44"))
                                       (builtin "One Step Simplification" (formula "12"))
                                       (rule "replace_known_right" (formula "11") (term "1") (ifseqformula "44"))
                                       (builtin "One Step Simplification" (formula "11"))
                                       (rule "inEqSimp_leqRight" (formula "44"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                       (rule "mul_literals" (formula "1") (term "0,1"))
                                       (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                       (rule "inEqSimp_contradEq7" (formula "47") (ifseqformula "1"))
                                       (rule "polySimp_mulComm0" (formula "47") (term "1,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "47") (term "0,0"))
                                       (rule "add_literals" (formula "47") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "47") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "47") (term "0,0"))
                                       (rule "leq_literals" (formula "47") (term "0"))
                                       (builtin "One Step Simplification" (formula "47"))
                                       (rule "false_right" (formula "47"))
                                       (rule "inEqSimp_subsumption1" (formula "20") (term "0") (ifseqformula "1"))
                                       (rule "inEqSimp_homoInEq0" (formula "20") (term "0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,0"))
                                       (rule "add_literals" (formula "20") (term "1,1,0,0,0"))
                                       (rule "times_zero_1" (formula "20") (term "1,0,0,0"))
                                       (rule "add_zero_right" (formula "20") (term "0,0,0"))
                                       (rule "qeq_literals" (formula "20") (term "0,0"))
                                       (builtin "One Step Simplification" (formula "20"))
                                       (rule "true_left" (formula "20"))
                                       (rule "inEqSimp_subsumption1" (formula "20") (term "1") (ifseqformula "1"))
                                       (rule "inEqSimp_homoInEq0" (formula "20") (term "0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,1"))
                                       (rule "add_literals" (formula "20") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "20") (term "1,0,0,1"))
                                       (rule "add_literals" (formula "20") (term "0,0,1"))
                                       (rule "qeq_literals" (formula "20") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "20"))
                                       (rule "true_left" (formula "20"))
                                       (rule "inEqSimp_contradInEq0" (formula "12") (ifseqformula "13"))
                                       (rule "qeq_literals" (formula "12") (term "0"))
                                       (builtin "One Step Simplification" (formula "12"))
                                       (rule "closeFalse" (formula "12"))
                                    )
                                 )
                              )
                              (branch "CUT: b[j_9] ≥ a[j_9] FALSE"
                                 (builtin "One Step Simplification" (formula "16"))
                                 (rule "notLeft" (formula "16"))
                                 (rule "replace_known_right" (formula "17") (term "1") (ifseqformula "41"))
                                 (builtin "One Step Simplification" (formula "17"))
                                 (rule "replace_known_right" (formula "16") (term "1") (ifseqformula "41"))
                                 (builtin "One Step Simplification" (formula "16"))
                                 (rule "inEqSimp_geqRight" (formula "41"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                 (rule "mul_literals" (formula "1") (term "0,1"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                 (rule "inEqSimp_contradEq3" (formula "44") (ifseqformula "1"))
                                 (rule "polySimp_mulComm0" (formula "44") (term "1,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "44") (term "0,0"))
                                 (rule "add_literals" (formula "44") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "44") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "44") (term "0,0"))
                                 (rule "qeq_literals" (formula "44") (term "0"))
                                 (builtin "One Step Simplification" (formula "44"))
                                 (rule "false_right" (formula "44"))
                                 (rule "inEqSimp_subsumption0" (formula "11") (term "1") (ifseqformula "1"))
                                 (rule "inEqSimp_homoInEq0" (formula "11") (term "0,1"))
                                 (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1"))
                                 (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1"))
                                 (rule "mul_literals" (formula "11") (term "0,1,0,0,1"))
                                 (rule "polySimp_addAssoc" (formula "11") (term "0,0,1"))
                                 (rule "polySimp_addComm0" (formula "11") (term "0,0,0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,1"))
                                 (rule "add_literals" (formula "11") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "11") (term "1,0,0,1"))
                                 (rule "add_literals" (formula "11") (term "0,0,1"))
                                 (rule "qeq_literals" (formula "11") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "11"))
                                 (rule "true_left" (formula "11"))
                                 (rule "inEqSimp_subsumption0" (formula "10") (term "1") (ifseqformula "1"))
                                 (rule "inEqSimp_homoInEq0" (formula "10") (term "0,1"))
                                 (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1"))
                                 (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1"))
                                 (rule "mul_literals" (formula "10") (term "0,1,0,0,1"))
                                 (rule "polySimp_addAssoc" (formula "10") (term "0,0,1"))
                                 (rule "polySimp_addComm0" (formula "10") (term "0,0,0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1"))
                                 (rule "add_literals" (formula "10") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "10") (term "1,0,0,1"))
                                 (rule "add_literals" (formula "10") (term "0,0,1"))
                                 (rule "qeq_literals" (formula "10") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "10"))
                                 (rule "true_left" (formula "10"))
                                 (rule "inEqSimp_subsumption0" (formula "9") (term "1") (ifseqformula "1"))
                                 (rule "inEqSimp_homoInEq0" (formula "9") (term "0,1"))
                                 (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1"))
                                 (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1"))
                                 (rule "mul_literals" (formula "9") (term "0,1,0,0,1"))
                                 (rule "polySimp_addAssoc" (formula "9") (term "0,0,1"))
                                 (rule "polySimp_addComm0" (formula "9") (term "0,0,0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0,1"))
                                 (rule "add_literals" (formula "9") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "9") (term "1,0,0,1"))
                                 (rule "add_literals" (formula "9") (term "0,0,1"))
                                 (rule "qeq_literals" (formula "9") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "9"))
                                 (rule "true_left" (formula "9"))
                                 (rule "cut_direct" (formula "9") (term "0,0"))
                                 (branch "CUT: res_min ≤ 0 TRUE"
                                    (builtin "One Step Simplification" (formula "10"))
                                    (rule "true_left" (formula "10"))
                                    (rule "replace_known_left" (formula "10") (term "1,0") (ifseqformula "9"))
                                    (builtin "One Step Simplification" (formula "10"))
                                    (rule "true_left" (formula "10"))
                                    (rule "replace_known_left" (formula "16") (term "1,0") (ifseqformula "9"))
                                    (builtin "One Step Simplification" (formula "16"))
                                    (rule "true_left" (formula "16"))
                                    (rule "replace_known_left" (formula "15") (term "0,0") (ifseqformula "9"))
                                    (builtin "One Step Simplification" (formula "15"))
                                    (rule "true_left" (formula "15"))
                                    (rule "replace_known_left" (formula "15") (term "1,0") (ifseqformula "9"))
                                    (builtin "One Step Simplification" (formula "15"))
                                    (rule "true_left" (formula "15"))
                                    (rule "replace_known_left" (formula "10") (term "1,0") (ifseqformula "9"))
                                    (builtin "One Step Simplification" (formula "10"))
                                    (rule "true_left" (formula "10"))
                                    (rule "inEqSimp_antiSymm" (formula "30") (ifseqformula "9"))
                                    (rule "applyEqRigid" (formula "9") (term "0") (ifseqformula "30"))
                                    (rule "leq_literals" (formula "9"))
                                    (rule "true_left" (formula "9"))
                                    (rule "applyEq" (formula "30") (term "0") (ifseqformula "29"))
                                    (rule "qeq_literals" (formula "30"))
                                    (rule "true_left" (formula "30"))
                                    (rule "applyEq" (formula "13") (term "1,1,0,0,0,0,0,0") (ifseqformula "29"))
                                    (rule "applyEqRigid" (formula "13") (term "1,1,0,0,1,0,0") (ifseqformula "29"))
                                    (rule "applyEqRigid" (formula "2") (term "0") (ifseqformula "29"))
                                    (rule "inEqSimp_homoInEq1" (formula "2"))
                                    (rule "times_zero_2" (formula "2") (term "1,0"))
                                    (rule "add_zero_right" (formula "2") (term "0"))
                                    (rule "applyEq" (formula "9") (term "1,1,0,0,1,0,0") (ifseqformula "29"))
                                    (rule "applyEqRigid" (formula "5") (term "0") (ifseqformula "29"))
                                    (rule "inEqSimp_homoInEq1" (formula "5"))
                                    (rule "times_zero_2" (formula "5") (term "1,0"))
                                    (rule "add_zero_right" (formula "5") (term "0"))
                                    (rule "applyEqRigid" (formula "9") (term "1,1,0,0,0,0,0,0") (ifseqformula "29"))
                                    (rule "applyEqRigid" (formula "13") (term "1,1,0,0,1,0,0,0") (ifseqformula "29"))
                                    (rule "applyEq" (formula "9") (term "1,1,0,0,1,0,0,0") (ifseqformula "29"))
                                    (rule "applyEq" (formula "3") (term "1") (ifseqformula "29"))
                                    (rule "applyEqRigid" (formula "30") (term "1") (ifseqformula "29"))
                                    (rule "applyEq" (formula "18") (term "1") (ifseqformula "29"))
                                    (rule "applyEqRigid" (formula "16") (term "1") (ifseqformula "29"))
                                    (rule "applyEq" (formula "17") (term "1") (ifseqformula "29"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                                    (rule "mul_literals" (formula "2") (term "1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                                    (rule "mul_literals" (formula "5") (term "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "6"))
                                    (rule "qeq_literals" (formula "2") (term "0"))
                                    (builtin "One Step Simplification" (formula "2"))
                                    (rule "closeFalse" (formula "2"))
                                 )
                                 (branch "CUT: res_min ≤ 0 FALSE"
                                    (builtin "One Step Simplification" (formula "9"))
                                    (rule "replace_known_right" (formula "18") (term "1,0") (ifseqformula "38"))
                                    (builtin "One Step Simplification" (formula "18"))
                                    (rule "replace_known_right" (formula "16") (term "0,0") (ifseqformula "38"))
                                    (builtin "One Step Simplification" (formula "16"))
                                    (rule "replace_known_right" (formula "17") (term "1,0") (ifseqformula "38"))
                                    (builtin "One Step Simplification" (formula "17"))
                                    (rule "replace_known_right" (formula "10") (term "1,0") (ifseqformula "38"))
                                    (builtin "One Step Simplification" (formula "10"))
                                    (rule "replace_known_right" (formula "11") (term "1,0") (ifseqformula "38"))
                                    (builtin "One Step Simplification" (formula "11"))
                                    (rule "inEqSimp_leqRight" (formula "38"))
                                    (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "1") (term "0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                    (rule "mul_literals" (formula "1") (term "1"))
                                    (rule "inEqSimp_subsumption1" (formula "36") (ifseqformula "1"))
                                    (rule "leq_literals" (formula "36") (term "0"))
                                    (builtin "One Step Simplification" (formula "36"))
                                    (rule "true_left" (formula "36"))
                                    (rule "allLeft" (formula "13") (inst "t=j_20"))
                                    (rule "exLeft" (formula "13") (inst "sk=j_25"))
                                    (rule "andLeft" (formula "13"))
                                    (rule "andLeft" (formula "13"))
                                    (rule "inEqSimp_commuteGeq" (formula "15") (term "1,0,0"))
                                    (rule "inEqSimp_commuteGeq" (formula "14") (term "1,0,0"))
                                    (rule "inEqSimp_commuteGeq" (formula "13") (term "1,0,0"))
                                    (rule "inEqSimp_contradInEq1" (formula "15") (term "0,0,0") (ifseqformula "8"))
                                    (rule "qeq_literals" (formula "15") (term "0,0,0,0"))
                                    (builtin "One Step Simplification" (formula "15"))
                                    (rule "inEqSimp_contradInEq1" (formula "14") (term "0,0,0") (ifseqformula "8"))
                                    (rule "qeq_literals" (formula "14") (term "0,0,0,0"))
                                    (builtin "One Step Simplification" (formula "14"))
                                    (rule "inEqSimp_contradInEq1" (formula "13") (term "0,0,0") (ifseqformula "8"))
                                    (rule "qeq_literals" (formula "13") (term "0,0,0,0"))
                                    (builtin "One Step Simplification" (formula "13"))
                                    (rule "commute_or_2" (formula "15"))
                                    (rule "commute_or_2" (formula "14"))
                                    (rule "commute_or" (formula "15") (term "0"))
                                    (rule "commute_or" (formula "14") (term "0"))
                                    (rule "allLeft" (formula "23") (inst "t=j_20"))
                                    (rule "exLeft" (formula "23") (inst "sk=j_26"))
                                    (rule "andLeft" (formula "23"))
                                    (rule "andLeft" (formula "23"))
                                    (rule "inEqSimp_commuteGeq" (formula "25") (term "1,0,0"))
                                    (rule "inEqSimp_commuteGeq" (formula "23") (term "1,0,0"))
                                    (rule "inEqSimp_commuteGeq" (formula "24") (term "1,0,0"))
                                    (rule "inEqSimp_contradInEq1" (formula "23") (term "0,0,0") (ifseqformula "8"))
                                    (rule "qeq_literals" (formula "23") (term "0,0,0,0"))
                                    (builtin "One Step Simplification" (formula "23"))
                                    (rule "inEqSimp_contradInEq1" (formula "25") (term "0,0,0") (ifseqformula "8"))
                                    (rule "qeq_literals" (formula "25") (term "0,0,0,0"))
                                    (builtin "One Step Simplification" (formula "25"))
                                    (rule "inEqSimp_contradInEq1" (formula "24") (term "0,0,0") (ifseqformula "8"))
                                    (rule "qeq_literals" (formula "24") (term "0,0,0,0"))
                                    (builtin "One Step Simplification" (formula "24"))
                                    (rule "commute_or_2" (formula "25"))
                                    (rule "commute_or_2" (formula "24"))
                                    (rule "commute_or" (formula "25") (term "0"))
                                    (rule "commute_or" (formula "24") (term "0"))
                                    (rule "cut_direct" (formula "10") (term "0"))
                                    (branch "CUT: b[0] ≤ a[0] TRUE"
                                       (builtin "One Step Simplification" (formula "11"))
                                       (rule "true_left" (formula "11"))
                                       (rule "replace_known_left" (formula "12") (term "1") (ifseqformula "10"))
                                       (builtin "One Step Simplification" (formula "12"))
                                       (rule "true_left" (formula "12"))
                                       (rule "replace_known_left" (formula "11") (term "1") (ifseqformula "10"))
                                       (builtin "One Step Simplification" (formula "11"))
                                       (rule "true_left" (formula "11"))
                                       (rule "inEqSimp_strengthen0" (formula "10") (ifseqformula "44"))
                                       (rule "inEqSimp_contradEq3" (formula "44") (ifseqformula "10"))
                                       (rule "polySimp_mulComm0" (formula "44") (term "1,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "44") (term "0,0"))
                                       (rule "add_literals" (formula "44") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "44") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "44") (term "0,0"))
                                       (rule "qeq_literals" (formula "44") (term "0"))
                                       (builtin "One Step Simplification" (formula "44"))
                                       (rule "false_right" (formula "44"))
                                       (rule "inEqSimp_contradInEq0" (formula "19") (term "1") (ifseqformula "10"))
                                       (rule "inEqSimp_homoInEq1" (formula "19") (term "0,1"))
                                       (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1"))
                                       (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1"))
                                       (rule "mul_literals" (formula "19") (term "0,1,0,0,1"))
                                       (rule "polySimp_addAssoc" (formula "19") (term "0,0,1"))
                                       (rule "polySimp_addComm0" (formula "19") (term "0,0,0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,0,1"))
                                       (rule "add_literals" (formula "19") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "19") (term "1,0,0,1"))
                                       (rule "add_zero_right" (formula "19") (term "0,0,1"))
                                       (rule "leq_literals" (formula "19") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "19"))
                                       (rule "inEqSimp_contradInEq0" (formula "20") (term "1") (ifseqformula "10"))
                                       (rule "inEqSimp_homoInEq1" (formula "20") (term "0,1"))
                                       (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1"))
                                       (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1"))
                                       (rule "mul_literals" (formula "20") (term "0,1,0,0,1"))
                                       (rule "polySimp_addAssoc" (formula "20") (term "0,0,1"))
                                       (rule "polySimp_addComm0" (formula "20") (term "0,0,0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,1"))
                                       (rule "add_literals" (formula "20") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "20") (term "1,0,0,1"))
                                       (rule "add_zero_right" (formula "20") (term "0,0,1"))
                                       (rule "leq_literals" (formula "20") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "20"))
                                       (rule "inEqSimp_contradInEq0" (formula "18") (term "0") (ifseqformula "10"))
                                       (rule "inEqSimp_homoInEq1" (formula "18") (term "0,0"))
                                       (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "18") (term "1,0,0,0"))
                                       (rule "mul_literals" (formula "18") (term "0,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "18") (term "0,0,0"))
                                       (rule "polySimp_addComm0" (formula "18") (term "0,0,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0,0"))
                                       (rule "add_literals" (formula "18") (term "1,1,0,0,0"))
                                       (rule "times_zero_1" (formula "18") (term "1,0,0,0"))
                                       (rule "add_zero_right" (formula "18") (term "0,0,0"))
                                       (rule "leq_literals" (formula "18") (term "0,0"))
                                       (builtin "One Step Simplification" (formula "18"))
                                       (rule "notLeft" (formula "18"))
                                       (rule "inEqSimp_contradInEq1" (formula "19") (ifseqformula "18"))
                                       (rule "qeq_literals" (formula "19") (term "0"))
                                       (builtin "One Step Simplification" (formula "19"))
                                       (rule "closeFalse" (formula "19"))
                                    )
                                    (branch "CUT: b[0] ≤ a[0] FALSE"
                                       (builtin "One Step Simplification" (formula "10"))
                                       (rule "notLeft" (formula "10"))
                                       (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "44"))
                                       (builtin "One Step Simplification" (formula "10"))
                                       (rule "replace_known_right" (formula "11") (term "1") (ifseqformula "44"))
                                       (builtin "One Step Simplification" (formula "11"))
                                       (rule "inEqSimp_leqRight" (formula "44"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                       (rule "mul_literals" (formula "1") (term "0,1"))
                                       (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                       (rule "inEqSimp_contradEq7" (formula "47") (ifseqformula "1"))
                                       (rule "polySimp_mulComm0" (formula "47") (term "1,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "47") (term "0,0"))
                                       (rule "add_literals" (formula "47") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "47") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "47") (term "0,0"))
                                       (rule "leq_literals" (formula "47") (term "0"))
                                       (builtin "One Step Simplification" (formula "47"))
                                       (rule "false_right" (formula "47"))
                                       (rule "inEqSimp_subsumption1" (formula "20") (term "0") (ifseqformula "1"))
                                       (rule "inEqSimp_homoInEq0" (formula "20") (term "0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,0"))
                                       (rule "add_literals" (formula "20") (term "1,1,0,0,0"))
                                       (rule "times_zero_1" (formula "20") (term "1,0,0,0"))
                                       (rule "add_zero_right" (formula "20") (term "0,0,0"))
                                       (rule "qeq_literals" (formula "20") (term "0,0"))
                                       (builtin "One Step Simplification" (formula "20"))
                                       (rule "true_left" (formula "20"))
                                       (rule "inEqSimp_subsumption1" (formula "20") (term "1") (ifseqformula "1"))
                                       (rule "inEqSimp_homoInEq0" (formula "20") (term "0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,1"))
                                       (rule "add_literals" (formula "20") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "20") (term "1,0,0,1"))
                                       (rule "add_literals" (formula "20") (term "0,0,1"))
                                       (rule "qeq_literals" (formula "20") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "20"))
                                       (rule "true_left" (formula "20"))
                                       (rule "inEqSimp_subsumption1" (formula "20") (term "1") (ifseqformula "1"))
                                       (rule "inEqSimp_homoInEq0" (formula "20") (term "0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,1"))
                                       (rule "add_literals" (formula "20") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "20") (term "1,0,0,1"))
                                       (rule "add_literals" (formula "20") (term "0,0,1"))
                                       (rule "qeq_literals" (formula "20") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "20"))
                                       (rule "true_left" (formula "20"))
                                       (rule "inEqSimp_contradInEq1" (formula "12") (ifseqformula "11"))
                                       (rule "qeq_literals" (formula "12") (term "0"))
                                       (builtin "One Step Simplification" (formula "12"))
                                       (rule "closeFalse" (formula "12"))
                                    )
                                 )
                              )
                           )
                           (branch "CUT: b[j_10] ≥ a[j_10] FALSE"
                              (builtin "One Step Simplification" (formula "7"))
                              (rule "notLeft" (formula "7"))
                              (rule "replace_known_right" (formula "7") (term "1") (ifseqformula "29"))
                              (builtin "One Step Simplification" (formula "7"))
                              (rule "replace_known_right" (formula "8") (term "1") (ifseqformula "29"))
                              (builtin "One Step Simplification" (formula "8"))
                              (rule "inEqSimp_geqRight" (formula "29"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1"))
                              (rule "polySimp_rightDist" (formula "1") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                              (rule "mul_literals" (formula "1") (term "0,1"))
                              (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                              (rule "inEqSimp_contradEq3" (formula "32") (ifseqformula "1"))
                              (rule "polySimp_mulComm0" (formula "32") (term "1,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0"))
                              (rule "add_literals" (formula "32") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "32") (term "1,0,0"))
                              (rule "add_zero_right" (formula "32") (term "0,0"))
                              (rule "qeq_literals" (formula "32") (term "0"))
                              (builtin "One Step Simplification" (formula "32"))
                              (rule "false_right" (formula "32"))
                              (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "9"))
                              (rule "times_zero_1" (formula "8") (term "0,0"))
                              (rule "add_zero_left" (formula "8") (term "0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                              (rule "mul_literals" (formula "8") (term "1"))
                              (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "8"))
                              (rule "leq_literals" (formula "3") (term "0"))
                              (builtin "One Step Simplification" (formula "3"))
                              (rule "true_left" (formula "3"))
                              (rule "allLeft" (formula "10") (inst "t=j_9"))
                              (rule "exLeft" (formula "10") (inst "sk=j_12"))
                              (rule "andLeft" (formula "10"))
                              (rule "andLeft" (formula "10"))
                              (rule "inEqSimp_commuteGeq" (formula "12") (term "1,0,0"))
                              (rule "inEqSimp_commuteGeq" (formula "10") (term "1,0,0"))
                              (rule "inEqSimp_commuteGeq" (formula "11") (term "1,0,0"))
                              (rule "inEqSimp_homoInEq0" (formula "12") (term "1"))
                              (rule "polySimp_addComm1" (formula "12") (term "0,1"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1"))
                              (rule "polySimp_mulComm0" (formula "12") (term "1,1"))
                              (rule "polySimp_rightDist" (formula "12") (term "1,1"))
                              (rule "mul_literals" (formula "12") (term "0,1,1"))
                              (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1"))
                              (rule "polySimp_elimOne" (formula "12") (term "1,1,1"))
                              (rule "inEqSimp_contradInEq1" (formula "12") (term "0,0,0") (ifseqformula "4"))
                              (rule "qeq_literals" (formula "12") (term "0,0,0,0"))
                              (builtin "One Step Simplification" (formula "12"))
                              (rule "inEqSimp_contradInEq1" (formula "11") (term "0,0,0") (ifseqformula "4"))
                              (rule "qeq_literals" (formula "11") (term "0,0,0,0"))
                              (builtin "One Step Simplification" (formula "11"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (term "0,0,0") (ifseqformula "4"))
                              (rule "qeq_literals" (formula "10") (term "0,0,0,0"))
                              (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "12") (term "0,0") (ifseqformula "5"))
                              (rule "inEqSimp_homoInEq1" (formula "12") (term "0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,0,0"))
                              (rule "add_literals" (formula "12") (term "1,1,0,0,0,0"))
                              (rule "times_zero_1" (formula "12") (term "1,0,0,0,0"))
                              (rule "add_zero_right" (formula "12") (term "0,0,0,0"))
                              (rule "leq_literals" (formula "12") (term "0,0,0"))
                              (builtin "One Step Simplification" (formula "12"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (term "0,0") (ifseqformula "5"))
                              (rule "inEqSimp_homoInEq1" (formula "10") (term "0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,0,0"))
                              (rule "add_literals" (formula "10") (term "1,1,0,0,0,0"))
                              (rule "times_zero_1" (formula "10") (term "1,0,0,0,0"))
                              (rule "add_zero_right" (formula "10") (term "0,0,0,0"))
                              (rule "leq_literals" (formula "10") (term "0,0,0"))
                              (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "11") (term "0,0") (ifseqformula "5"))
                              (rule "inEqSimp_homoInEq1" (formula "11") (term "0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,0,0"))
                              (rule "add_literals" (formula "11") (term "1,1,0,0,0,0"))
                              (rule "times_zero_1" (formula "11") (term "1,0,0,0,0"))
                              (rule "add_zero_right" (formula "11") (term "0,0,0,0"))
                              (rule "leq_literals" (formula "11") (term "0,0,0"))
                              (builtin "One Step Simplification" (formula "11"))
                              (rule "commute_or" (formula "12"))
                              (rule "commute_or" (formula "10"))
                              (rule "commute_or" (formula "11"))
                              (rule "cut_direct" (formula "10") (term "1"))
                              (branch "CUT: b[j_9] ≥ a[j_9] TRUE"
                                 (builtin "One Step Simplification" (formula "11"))
                                 (rule "true_left" (formula "11"))
                                 (rule "replace_known_left" (formula "12") (term "1") (ifseqformula "10"))
                                 (builtin "One Step Simplification" (formula "12"))
                                 (rule "true_left" (formula "12"))
                                 (rule "replace_known_left" (formula "11") (term "1") (ifseqformula "10"))
                                 (builtin "One Step Simplification" (formula "11"))
                                 (rule "true_left" (formula "11"))
                                 (rule "inEqSimp_strengthen1" (formula "10") (ifseqformula "32"))
                                 (rule "inEqSimp_contradEq7" (formula "32") (ifseqformula "10"))
                                 (rule "polySimp_mulComm0" (formula "32") (term "1,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0"))
                                 (rule "add_literals" (formula "32") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "32") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "32") (term "0,0"))
                                 (rule "leq_literals" (formula "32") (term "0"))
                                 (builtin "One Step Simplification" (formula "32"))
                                 (rule "false_right" (formula "32"))
                                 (rule "allLeft" (formula "6") (inst "t=j_9"))
                                 (rule "exLeft" (formula "6") (inst "sk=j_15"))
                                 (rule "andLeft" (formula "6"))
                                 (rule "andLeft" (formula "6"))
                                 (rule "inEqSimp_commuteGeq" (formula "8") (term "1,0,0"))
                                 (rule "inEqSimp_commuteGeq" (formula "7") (term "1,0,0"))
                                 (rule "inEqSimp_commuteGeq" (formula "6") (term "1,0,0"))
                                 (rule "inEqSimp_homoInEq0" (formula "8") (term "1"))
                                 (rule "polySimp_addComm1" (formula "8") (term "0,1"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1"))
                                 (rule "polySimp_mulComm0" (formula "8") (term "1,1"))
                                 (rule "polySimp_rightDist" (formula "8") (term "1,1"))
                                 (rule "mul_literals" (formula "8") (term "0,1,1"))
                                 (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1"))
                                 (rule "polySimp_elimOne" (formula "8") (term "1,1,1"))
                                 (rule "inEqSimp_contradInEq1" (formula "8") (term "1,0") (ifseqformula "13"))
                                 (rule "inEqSimp_homoInEq1" (formula "8") (term "0,1,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0,1,0"))
                                 (rule "add_literals" (formula "8") (term "1,1,0,0,1,0"))
                                 (rule "times_zero_1" (formula "8") (term "1,0,0,1,0"))
                                 (rule "add_zero_right" (formula "8") (term "0,0,1,0"))
                                 (rule "leq_literals" (formula "8") (term "0,1,0"))
                                 (builtin "One Step Simplification" (formula "8"))
                                 (rule "inEqSimp_contradInEq1" (formula "7") (term "0,0,0") (ifseqformula "4"))
                                 (rule "qeq_literals" (formula "7") (term "0,0,0,0"))
                                 (builtin "One Step Simplification" (formula "7"))
                                 (rule "inEqSimp_contradInEq1" (formula "6") (term "1,0") (ifseqformula "13"))
                                 (rule "inEqSimp_homoInEq1" (formula "6") (term "0,1,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0,1,0"))
                                 (rule "add_literals" (formula "6") (term "1,1,0,0,1,0"))
                                 (rule "times_zero_1" (formula "6") (term "1,0,0,1,0"))
                                 (rule "add_zero_right" (formula "6") (term "0,0,1,0"))
                                 (rule "leq_literals" (formula "6") (term "0,1,0"))
                                 (builtin "One Step Simplification" (formula "6"))
                                 (rule "inEqSimp_contradInEq1" (formula "8") (term "1,0") (ifseqformula "5"))
                                 (rule "inEqSimp_homoInEq1" (formula "8") (term "0,1,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0,1,0"))
                                 (rule "add_literals" (formula "8") (term "1,1,0,0,1,0"))
                                 (rule "times_zero_1" (formula "8") (term "1,0,0,1,0"))
                                 (rule "add_zero_right" (formula "8") (term "0,0,1,0"))
                                 (rule "leq_literals" (formula "8") (term "0,1,0"))
                                 (builtin "One Step Simplification" (formula "8"))
                                 (rule "inEqSimp_contradInEq1" (formula "7") (term "1,0") (ifseqformula "13"))
                                 (rule "inEqSimp_homoInEq1" (formula "7") (term "0,1,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0,1,0"))
                                 (rule "add_literals" (formula "7") (term "1,1,0,0,1,0"))
                                 (rule "times_zero_1" (formula "7") (term "1,0,0,1,0"))
                                 (rule "add_zero_right" (formula "7") (term "0,0,1,0"))
                                 (rule "leq_literals" (formula "7") (term "0,1,0"))
                                 (builtin "One Step Simplification" (formula "7"))
                                 (rule "inEqSimp_contradInEq1" (formula "6") (term "0,0") (ifseqformula "4"))
                                 (rule "qeq_literals" (formula "6") (term "0,0,0"))
                                 (builtin "One Step Simplification" (formula "6"))
                                 (rule "inEqSimp_contradInEq1" (formula "8") (term "0") (ifseqformula "4"))
                                 (rule "qeq_literals" (formula "8") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "8"))
                                 (rule "inEqSimp_contradInEq1" (formula "7") (term "0") (ifseqformula "5"))
                                 (rule "inEqSimp_homoInEq1" (formula "7") (term "0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0,0"))
                                 (rule "add_literals" (formula "7") (term "1,1,0,0,0"))
                                 (rule "times_zero_1" (formula "7") (term "1,0,0,0"))
                                 (rule "add_zero_right" (formula "7") (term "0,0,0"))
                                 (rule "leq_literals" (formula "7") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "7"))
                                 (rule "inEqSimp_contradInEq1" (formula "6") (term "0") (ifseqformula "5"))
                                 (rule "inEqSimp_homoInEq1" (formula "6") (term "0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0,0"))
                                 (rule "add_literals" (formula "6") (term "1,1,0,0,0"))
                                 (rule "times_zero_1" (formula "6") (term "1,0,0,0"))
                                 (rule "add_zero_right" (formula "6") (term "0,0,0"))
                                 (rule "leq_literals" (formula "6") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "6"))
                                 (rule "notLeft" (formula "6"))
                                 (rule "allLeft" (formula "13") (inst "t=Z(0(#))"))
                                 (rule "leq_literals" (formula "13") (term "0,0,0,0,0,0"))
                                 (builtin "One Step Simplification" (formula "13"))
                                 (rule "add_literals" (formula "13") (term "1,1,1,0"))
                                 (rule "leq_literals" (formula "13") (term "0,0,0,1,0"))
                                 (builtin "One Step Simplification" (formula "13"))
                                 (rule "leq_literals" (formula "13") (term "0,0,0,1,0,0"))
                                 (builtin "One Step Simplification" (formula "13"))
                                 (rule "exLeft" (formula "13") (inst "sk=j_16"))
                                 (rule "andLeft" (formula "13"))
                                 (rule "andLeft" (formula "13"))
                                 (rule "inEqSimp_commuteGeq" (formula "15") (term "0,0"))
                                 (rule "inEqSimp_commuteGeq" (formula "14") (term "0,0"))
                                 (rule "inEqSimp_commuteGeq" (formula "13") (term "0,0"))
                                 (rule "commute_or_2" (formula "15"))
                                 (rule "commute_or_2" (formula "14"))
                                 (rule "commute_or" (formula "15") (term "0"))
                                 (rule "commute_or" (formula "14") (term "0"))
                                 (rule "allLeft" (formula "8") (inst "t=Z(0(#))"))
                                 (rule "leq_literals" (formula "8") (term "0,0,0,0,0,0"))
                                 (builtin "One Step Simplification" (formula "8"))
                                 (rule "add_literals" (formula "8") (term "1,1,1,0"))
                                 (rule "leq_literals" (formula "8") (term "0,0,0,1,0,0"))
                                 (builtin "One Step Simplification" (formula "8"))
                                 (rule "leq_literals" (formula "8") (term "0,0,0,1,0"))
                                 (builtin "One Step Simplification" (formula "8"))
                                 (rule "exLeft" (formula "8") (inst "sk=j_17"))
                                 (rule "andLeft" (formula "8"))
                                 (rule "andLeft" (formula "8"))
                                 (rule "inEqSimp_commuteGeq" (formula "10") (term "0,0"))
                                 (rule "inEqSimp_commuteGeq" (formula "9") (term "0,0"))
                                 (rule "inEqSimp_commuteGeq" (formula "8") (term "0,0"))
                                 (rule "commute_or_2" (formula "10"))
                                 (rule "commute_or_2" (formula "9"))
                                 (rule "commute_or" (formula "10") (term "0"))
                                 (rule "commute_or" (formula "9") (term "0"))
                                 (rule "cut_direct" (formula "8") (term "0,0"))
                                 (branch "CUT: res_min ≤ 0 TRUE"
                                    (builtin "One Step Simplification" (formula "9"))
                                    (rule "true_left" (formula "9"))
                                    (rule "replace_known_left" (formula "18") (term "1,0") (ifseqformula "8"))
                                    (builtin "One Step Simplification" (formula "18"))
                                    (rule "true_left" (formula "18"))
                                    (rule "replace_known_left" (formula "10") (term "1,0") (ifseqformula "8"))
                                    (builtin "One Step Simplification" (formula "10"))
                                    (rule "true_left" (formula "10"))
                                    (rule "replace_known_left" (formula "15") (term "0,0") (ifseqformula "8"))
                                    (builtin "One Step Simplification" (formula "15"))
                                    (rule "true_left" (formula "15"))
                                    (rule "replace_known_left" (formula "9") (term "1,0") (ifseqformula "8"))
                                    (builtin "One Step Simplification" (formula "9"))
                                    (rule "true_left" (formula "9"))
                                    (rule "replace_known_left" (formula "14") (term "1,0") (ifseqformula "8"))
                                    (builtin "One Step Simplification" (formula "14"))
                                    (rule "true_left" (formula "14"))
                                    (rule "inEqSimp_antiSymm" (formula "30") (ifseqformula "8"))
                                    (rule "applyEqRigid" (formula "14") (term "1,1,0,0,1,0,0,0") (ifseqformula "30"))
                                    (rule "applyEq" (formula "2") (term "0") (ifseqformula "30"))
                                    (rule "inEqSimp_homoInEq1" (formula "2"))
                                    (rule "mul_literals" (formula "2") (term "1,0"))
                                    (rule "add_zero_right" (formula "2") (term "0"))
                                    (rule "applyEqRigid" (formula "8") (term "0") (ifseqformula "30"))
                                    (rule "leq_literals" (formula "8"))
                                    (rule "true_left" (formula "8"))
                                    (rule "applyEq" (formula "8") (term "1,1,0,0,1,0,0") (ifseqformula "29"))
                                    (rule "applyEq" (formula "8") (term "1,1,0,0,1,0,0,0") (ifseqformula "29"))
                                    (rule "applyEq" (formula "13") (term "1,1,0,0,0,0,0,0") (ifseqformula "29"))
                                    (rule "applyEqRigid" (formula "30") (term "0") (ifseqformula "29"))
                                    (rule "qeq_literals" (formula "30"))
                                    (rule "true_left" (formula "30"))
                                    (rule "applyEqRigid" (formula "13") (term "1,1,0,0,1,0,0") (ifseqformula "29"))
                                    (rule "applyEq" (formula "5") (term "0") (ifseqformula "29"))
                                    (rule "inEqSimp_homoInEq1" (formula "5"))
                                    (rule "times_zero_2" (formula "5") (term "1,0"))
                                    (rule "add_zero_right" (formula "5") (term "0"))
                                    (rule "applyEq" (formula "8") (term "1,1,0,0,0,0,0,0") (ifseqformula "29"))
                                    (rule "applyEq" (formula "18") (term "1") (ifseqformula "29"))
                                    (rule "applyEqRigid" (formula "3") (term "1") (ifseqformula "29"))
                                    (rule "applyEq" (formula "17") (term "1") (ifseqformula "29"))
                                    (rule "applyEqRigid" (formula "30") (term "1") (ifseqformula "29"))
                                    (rule "applyEq" (formula "16") (term "1") (ifseqformula "29"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                                    (rule "mul_literals" (formula "2") (term "1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                                    (rule "mul_literals" (formula "5") (term "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "9"))
                                    (rule "qeq_literals" (formula "2") (term "0"))
                                    (builtin "One Step Simplification" (formula "2"))
                                    (rule "closeFalse" (formula "2"))
                                 )
                                 (branch "CUT: res_min ≤ 0 FALSE"
                                    (builtin "One Step Simplification" (formula "8"))
                                    (rule "replace_known_right" (formula "17") (term "1,0") (ifseqformula "38"))
                                    (builtin "One Step Simplification" (formula "17"))
                                    (rule "replace_known_right" (formula "10") (term "1,0") (ifseqformula "38"))
                                    (builtin "One Step Simplification" (formula "10"))
                                    (rule "replace_known_right" (formula "18") (term "1,0") (ifseqformula "38"))
                                    (builtin "One Step Simplification" (formula "18"))
                                    (rule "replace_known_right" (formula "16") (term "0,0") (ifseqformula "38"))
                                    (builtin "One Step Simplification" (formula "16"))
                                    (rule "replace_known_right" (formula "9") (term "1,0") (ifseqformula "38"))
                                    (builtin "One Step Simplification" (formula "9"))
                                    (rule "inEqSimp_leqRight" (formula "38"))
                                    (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "1") (term "0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                    (rule "mul_literals" (formula "1") (term "1"))
                                    (rule "inEqSimp_subsumption1" (formula "36") (ifseqformula "1"))
                                    (rule "leq_literals" (formula "36") (term "0"))
                                    (builtin "One Step Simplification" (formula "36"))
                                    (rule "true_left" (formula "36"))
                                    (rule "allLeft" (formula "20") (inst "t=j_11"))
                                    (rule "exLeft" (formula "20") (inst "sk=j_18"))
                                    (rule "andLeft" (formula "20"))
                                    (rule "andLeft" (formula "20"))
                                    (rule "inEqSimp_commuteGeq" (formula "22") (term "1,0,0"))
                                    (rule "inEqSimp_commuteGeq" (formula "21") (term "1,0,0"))
                                    (rule "inEqSimp_commuteGeq" (formula "20") (term "1,0,0"))
                                    (rule "inEqSimp_contradInEq1" (formula "22") (term "0,0,0") (ifseqformula "14"))
                                    (rule "qeq_literals" (formula "22") (term "0,0,0,0"))
                                    (builtin "One Step Simplification" (formula "22"))
                                    (rule "inEqSimp_contradInEq1" (formula "21") (term "0,0,0") (ifseqformula "14"))
                                    (rule "qeq_literals" (formula "21") (term "0,0,0,0"))
                                    (builtin "One Step Simplification" (formula "21"))
                                    (rule "inEqSimp_contradInEq1" (formula "20") (term "0,0,0") (ifseqformula "14"))
                                    (rule "qeq_literals" (formula "20") (term "0,0,0,0"))
                                    (builtin "One Step Simplification" (formula "20"))
                                    (rule "commute_or_2" (formula "22"))
                                    (rule "commute_or_2" (formula "21"))
                                    (rule "commute_or" (formula "22") (term "0"))
                                    (rule "commute_or" (formula "21") (term "0"))
                                    (rule "allLeft" (formula "12") (inst "t=j_11"))
                                    (rule "exLeft" (formula "12") (inst "sk=j_19"))
                                    (rule "andLeft" (formula "12"))
                                    (rule "andLeft" (formula "12"))
                                    (rule "inEqSimp_commuteGeq" (formula "14") (term "1,0,0"))
                                    (rule "inEqSimp_commuteGeq" (formula "12") (term "1,0,0"))
                                    (rule "inEqSimp_commuteGeq" (formula "13") (term "1,0,0"))
                                    (rule "inEqSimp_contradInEq1" (formula "14") (term "0,0,0") (ifseqformula "17"))
                                    (rule "qeq_literals" (formula "14") (term "0,0,0,0"))
                                    (builtin "One Step Simplification" (formula "14"))
                                    (rule "inEqSimp_contradInEq1" (formula "13") (term "0,0,0") (ifseqformula "17"))
                                    (rule "qeq_literals" (formula "13") (term "0,0,0,0"))
                                    (builtin "One Step Simplification" (formula "13"))
                                    (rule "inEqSimp_contradInEq1" (formula "12") (term "0,0,0") (ifseqformula "17"))
                                    (rule "qeq_literals" (formula "12") (term "0,0,0,0"))
                                    (builtin "One Step Simplification" (formula "12"))
                                    (rule "commute_or_2" (formula "14"))
                                    (rule "commute_or_2" (formula "13"))
                                    (rule "commute_or" (formula "14") (term "0"))
                                    (rule "commute_or" (formula "13") (term "0"))
                                    (rule "cut_direct" (formula "9") (term "0"))
                                    (branch "CUT: b[0] ≤ a[0] TRUE"
                                       (builtin "One Step Simplification" (formula "10"))
                                       (rule "true_left" (formula "10"))
                                       (rule "replace_known_left" (formula "11") (term "1") (ifseqformula "9"))
                                       (builtin "One Step Simplification" (formula "11"))
                                       (rule "true_left" (formula "11"))
                                       (rule "replace_known_left" (formula "10") (term "1") (ifseqformula "9"))
                                       (builtin "One Step Simplification" (formula "10"))
                                       (rule "true_left" (formula "10"))
                                       (rule "inEqSimp_strengthen0" (formula "9") (ifseqformula "44"))
                                       (rule "inEqSimp_contradEq3" (formula "44") (ifseqformula "9"))
                                       (rule "polySimp_mulComm0" (formula "44") (term "1,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "44") (term "0,0"))
                                       (rule "add_literals" (formula "44") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "44") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "44") (term "0,0"))
                                       (rule "qeq_literals" (formula "44") (term "0"))
                                       (builtin "One Step Simplification" (formula "44"))
                                       (rule "false_right" (formula "44"))
                                       (rule "inEqSimp_contradInEq0" (formula "20") (term "1") (ifseqformula "9"))
                                       (rule "inEqSimp_homoInEq1" (formula "20") (term "0,1"))
                                       (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1"))
                                       (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1"))
                                       (rule "mul_literals" (formula "20") (term "0,1,0,0,1"))
                                       (rule "polySimp_addAssoc" (formula "20") (term "0,0,1"))
                                       (rule "polySimp_addComm0" (formula "20") (term "0,0,0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,1"))
                                       (rule "add_literals" (formula "20") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "20") (term "1,0,0,1"))
                                       (rule "add_zero_right" (formula "20") (term "0,0,1"))
                                       (rule "leq_literals" (formula "20") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "20"))
                                       (rule "inEqSimp_contradInEq0" (formula "18") (term "0") (ifseqformula "9"))
                                       (rule "inEqSimp_homoInEq1" (formula "18") (term "0,0"))
                                       (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "18") (term "1,0,0,0"))
                                       (rule "mul_literals" (formula "18") (term "0,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "18") (term "0,0,0"))
                                       (rule "polySimp_addComm0" (formula "18") (term "0,0,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0,0"))
                                       (rule "add_literals" (formula "18") (term "1,1,0,0,0"))
                                       (rule "times_zero_1" (formula "18") (term "1,0,0,0"))
                                       (rule "add_zero_right" (formula "18") (term "0,0,0"))
                                       (rule "leq_literals" (formula "18") (term "0,0"))
                                       (builtin "One Step Simplification" (formula "18"))
                                       (rule "notLeft" (formula "18"))
                                       (rule "inEqSimp_contradInEq0" (formula "18") (term "1") (ifseqformula "9"))
                                       (rule "inEqSimp_homoInEq1" (formula "18") (term "0,1"))
                                       (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1"))
                                       (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1"))
                                       (rule "mul_literals" (formula "18") (term "0,1,0,0,1"))
                                       (rule "polySimp_addAssoc" (formula "18") (term "0,0,1"))
                                       (rule "polySimp_addComm0" (formula "18") (term "0,0,0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0,1"))
                                       (rule "add_literals" (formula "18") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "18") (term "1,0,0,1"))
                                       (rule "add_zero_right" (formula "18") (term "0,0,1"))
                                       (rule "leq_literals" (formula "18") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "18"))
                                       (rule "inEqSimp_contradInEq0" (formula "18") (ifseqformula "19"))
                                       (rule "qeq_literals" (formula "18") (term "0"))
                                       (builtin "One Step Simplification" (formula "18"))
                                       (rule "closeFalse" (formula "18"))
                                    )
                                    (branch "CUT: b[0] ≤ a[0] FALSE"
                                       (builtin "One Step Simplification" (formula "9"))
                                       (rule "notLeft" (formula "9"))
                                       (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "44"))
                                       (builtin "One Step Simplification" (formula "10"))
                                       (rule "replace_known_right" (formula "9") (term "1") (ifseqformula "44"))
                                       (builtin "One Step Simplification" (formula "9"))
                                       (rule "inEqSimp_leqRight" (formula "44"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                       (rule "mul_literals" (formula "1") (term "0,1"))
                                       (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                       (rule "inEqSimp_contradEq7" (formula "47") (ifseqformula "1"))
                                       (rule "polySimp_mulComm0" (formula "47") (term "1,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "47") (term "0,0"))
                                       (rule "add_literals" (formula "47") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "47") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "47") (term "0,0"))
                                       (rule "leq_literals" (formula "47") (term "0"))
                                       (builtin "One Step Simplification" (formula "47"))
                                       (rule "false_right" (formula "47"))
                                       (rule "inEqSimp_subsumption1" (formula "20") (term "0") (ifseqformula "1"))
                                       (rule "inEqSimp_homoInEq0" (formula "20") (term "0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,0"))
                                       (rule "add_literals" (formula "20") (term "1,1,0,0,0"))
                                       (rule "times_zero_1" (formula "20") (term "1,0,0,0"))
                                       (rule "add_zero_right" (formula "20") (term "0,0,0"))
                                       (rule "qeq_literals" (formula "20") (term "0,0"))
                                       (builtin "One Step Simplification" (formula "20"))
                                       (rule "true_left" (formula "20"))
                                       (rule "inEqSimp_subsumption1" (formula "20") (term "1") (ifseqformula "1"))
                                       (rule "inEqSimp_homoInEq0" (formula "20") (term "0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,1"))
                                       (rule "add_literals" (formula "20") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "20") (term "1,0,0,1"))
                                       (rule "add_literals" (formula "20") (term "0,0,1"))
                                       (rule "qeq_literals" (formula "20") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "20"))
                                       (rule "true_left" (formula "20"))
                                       (rule "inEqSimp_contradInEq1" (formula "11") (ifseqformula "10"))
                                       (rule "qeq_literals" (formula "11") (term "0"))
                                       (builtin "One Step Simplification" (formula "11"))
                                       (rule "closeFalse" (formula "11"))
                                    )
                                 )
                              )
                              (branch "CUT: b[j_9] ≥ a[j_9] FALSE"
                                 (builtin "One Step Simplification" (formula "10"))
                                 (rule "notLeft" (formula "10"))
                                 (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "32"))
                                 (builtin "One Step Simplification" (formula "10"))
                                 (rule "replace_known_right" (formula "11") (term "1") (ifseqformula "32"))
                                 (builtin "One Step Simplification" (formula "11"))
                                 (rule "inEqSimp_geqRight" (formula "32"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1"))
                                 (rule "mul_literals" (formula "1") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                 (rule "inEqSimp_contradEq3" (formula "35") (ifseqformula "1"))
                                 (rule "polySimp_mulComm0" (formula "35") (term "1,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,0"))
                                 (rule "add_literals" (formula "35") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "35") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "35") (term "0,0"))
                                 (rule "qeq_literals" (formula "35") (term "0"))
                                 (builtin "One Step Simplification" (formula "35"))
                                 (rule "false_right" (formula "35"))
                                 (rule "allLeft" (formula "13") (inst "t=Z(0(#))"))
                                 (rule "leq_literals" (formula "13") (term "0,0,0,0,0,0"))
                                 (builtin "One Step Simplification" (formula "13"))
                                 (rule "leq_literals" (formula "13") (term "0,0,0,1,0"))
                                 (builtin "One Step Simplification" (formula "13"))
                                 (rule "leq_literals" (formula "13") (term "0,0,0,1,0,0"))
                                 (builtin "One Step Simplification" (formula "13"))
                                 (rule "add_literals" (formula "13") (term "1,1,1,0"))
                                 (rule "exLeft" (formula "13") (inst "sk=j_13"))
                                 (rule "andLeft" (formula "13"))
                                 (rule "andLeft" (formula "13"))
                                 (rule "inEqSimp_commuteGeq" (formula "15") (term "0,0"))
                                 (rule "inEqSimp_commuteGeq" (formula "14") (term "0,0"))
                                 (rule "inEqSimp_commuteGeq" (formula "13") (term "0,0"))
                                 (rule "commute_or_2" (formula "15"))
                                 (rule "commute_or_2" (formula "14"))
                                 (rule "commute_or" (formula "15") (term "0"))
                                 (rule "commute_or" (formula "14") (term "0"))
                                 (rule "allLeft" (formula "7") (inst "t=Z(0(#))"))
                                 (rule "leq_literals" (formula "7") (term "0,0,0,1,0"))
                                 (builtin "One Step Simplification" (formula "7"))
                                 (rule "add_zero_right" (formula "7") (term "1,1,1,0"))
                                 (rule "leq_literals" (formula "7") (term "0,0,0,0,0,0"))
                                 (builtin "One Step Simplification" (formula "7"))
                                 (rule "leq_literals" (formula "7") (term "0,0,0,1,0,0"))
                                 (builtin "One Step Simplification" (formula "7"))
                                 (rule "exLeft" (formula "7") (inst "sk=j_14"))
                                 (rule "andLeft" (formula "7"))
                                 (rule "andLeft" (formula "7"))
                                 (rule "inEqSimp_commuteGeq" (formula "9") (term "0,0"))
                                 (rule "inEqSimp_commuteGeq" (formula "7") (term "0,0"))
                                 (rule "inEqSimp_commuteGeq" (formula "8") (term "0,0"))
                                 (rule "commute_or_2" (formula "9"))
                                 (rule "commute_or_2" (formula "8"))
                                 (rule "commute_or" (formula "9") (term "0"))
                                 (rule "commute_or" (formula "8") (term "0"))
                                 (rule "cut_direct" (formula "9") (term "1,0"))
                                 (branch "CUT: res_min ≤ 0 TRUE"
                                    (builtin "One Step Simplification" (formula "10"))
                                    (rule "true_left" (formula "10"))
                                    (rule "replace_known_left" (formula "18") (term "1,0") (ifseqformula "9"))
                                    (builtin "One Step Simplification" (formula "18"))
                                    (rule "true_left" (formula "18"))
                                    (rule "replace_known_left" (formula "8") (term "1,0") (ifseqformula "9"))
                                    (builtin "One Step Simplification" (formula "8"))
                                    (rule "true_left" (formula "8"))
                                    (rule "replace_known_left" (formula "16") (term "1,0") (ifseqformula "8"))
                                    (builtin "One Step Simplification" (formula "16"))
                                    (rule "true_left" (formula "16"))
                                    (rule "replace_known_left" (formula "15") (term "0,0") (ifseqformula "8"))
                                    (builtin "One Step Simplification" (formula "15"))
                                    (rule "true_left" (formula "15"))
                                    (rule "replace_known_left" (formula "7") (term "0,0") (ifseqformula "8"))
                                    (builtin "One Step Simplification" (formula "7"))
                                    (rule "true_left" (formula "7"))
                                    (rule "inEqSimp_antiSymm" (formula "30") (ifseqformula "7"))
                                    (rule "applyEq" (formula "8") (term "1,1,0,0,1,0,0,0") (ifseqformula "30"))
                                    (rule "applyEq" (formula "14") (term "1,1,0,0,1,0,0,0") (ifseqformula "30"))
                                    (rule "applyEq" (formula "3") (term "0") (ifseqformula "30"))
                                    (rule "inEqSimp_homoInEq1" (formula "3"))
                                    (rule "mul_literals" (formula "3") (term "1,0"))
                                    (rule "add_zero_right" (formula "3") (term "0"))
                                    (rule "applyEq" (formula "8") (term "1,1,0,0,0,0,0,0") (ifseqformula "30"))
                                    (rule "applyEqRigid" (formula "8") (term "1,1,0,0,1,0,0") (ifseqformula "30"))
                                    (rule "applyEqRigid" (formula "31") (term "0") (ifseqformula "30"))
                                    (rule "qeq_literals" (formula "31"))
                                    (rule "true_left" (formula "31"))
                                    (rule "applyEqRigid" (formula "14") (term "1,1,0,0,1,0,0") (ifseqformula "30"))
                                    (rule "applyEq" (formula "7") (term "0") (ifseqformula "30"))
                                    (rule "leq_literals" (formula "7"))
                                    (rule "true_left" (formula "7"))
                                    (rule "applyEq" (formula "6") (term "0") (ifseqformula "29"))
                                    (rule "inEqSimp_homoInEq1" (formula "6"))
                                    (rule "times_zero_2" (formula "6") (term "1,0"))
                                    (rule "add_zero_right" (formula "6") (term "0"))
                                    (rule "applyEq" (formula "13") (term "1,1,0,0,0,0,0,0") (ifseqformula "29"))
                                    (rule "applyEqRigid" (formula "16") (term "1") (ifseqformula "29"))
                                    (rule "applyEqRigid" (formula "4") (term "1") (ifseqformula "29"))
                                    (rule "applyEq" (formula "18") (term "1") (ifseqformula "29"))
                                    (rule "applyEqRigid" (formula "30") (term "1") (ifseqformula "29"))
                                    (rule "applyEqRigid" (formula "17") (term "1") (ifseqformula "29"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                                    (rule "mul_literals" (formula "3") (term "1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "6"))
                                    (rule "mul_literals" (formula "6") (term "1"))
                                    (rule "inEqSimp_contradInEq0" (formula "8") (ifseqformula "3"))
                                    (rule "qeq_literals" (formula "8") (term "0"))
                                    (builtin "One Step Simplification" (formula "8"))
                                    (rule "closeFalse" (formula "8"))
                                 )
                                 (branch "CUT: res_min ≤ 0 FALSE"
                                    (builtin "One Step Simplification" (formula "9"))
                                    (rule "replace_known_right" (formula "8") (term "1,0") (ifseqformula "38"))
                                    (builtin "One Step Simplification" (formula "8"))
                                    (rule "replace_known_right" (formula "18") (term "1,0") (ifseqformula "38"))
                                    (builtin "One Step Simplification" (formula "18"))
                                    (rule "replace_known_right" (formula "16") (term "0,0") (ifseqformula "38"))
                                    (builtin "One Step Simplification" (formula "16"))
                                    (rule "replace_known_right" (formula "17") (term "1,0") (ifseqformula "38"))
                                    (builtin "One Step Simplification" (formula "17"))
                                    (rule "replace_known_right" (formula "7") (term "0,0") (ifseqformula "38"))
                                    (builtin "One Step Simplification" (formula "7"))
                                    (rule "inEqSimp_leqRight" (formula "38"))
                                    (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "1") (term "0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                    (rule "mul_literals" (formula "1") (term "1"))
                                    (rule "inEqSimp_subsumption1" (formula "36") (ifseqformula "1"))
                                    (rule "leq_literals" (formula "36") (term "0"))
                                    (builtin "One Step Simplification" (formula "36"))
                                    (rule "true_left" (formula "36"))
                                    (rule "cut_direct" (formula "17") (term "0"))
                                    (branch "CUT: b[0] ≥ a[0] TRUE"
                                       (builtin "One Step Simplification" (formula "18"))
                                       (rule "true_left" (formula "18"))
                                       (rule "replace_known_left" (formula "18") (term "1") (ifseqformula "17"))
                                       (builtin "One Step Simplification" (formula "18"))
                                       (rule "true_left" (formula "18"))
                                       (rule "replace_known_left" (formula "18") (term "1") (ifseqformula "17"))
                                       (builtin "One Step Simplification" (formula "18"))
                                       (rule "true_left" (formula "18"))
                                       (rule "inEqSimp_strengthen1" (formula "17") (ifseqformula "38"))
                                       (rule "inEqSimp_contradEq7" (formula "38") (ifseqformula "17"))
                                       (rule "polySimp_mulComm0" (formula "38") (term "1,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "38") (term "0,0"))
                                       (rule "add_literals" (formula "38") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "38") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "38") (term "0,0"))
                                       (rule "leq_literals" (formula "38") (term "0"))
                                       (builtin "One Step Simplification" (formula "38"))
                                       (rule "false_right" (formula "38"))
                                       (rule "inEqSimp_contradInEq1" (formula "10") (term "1") (ifseqformula "17"))
                                       (rule "inEqSimp_homoInEq1" (formula "10") (term "0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1"))
                                       (rule "add_literals" (formula "10") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "10") (term "1,0,0,1"))
                                       (rule "add_zero_right" (formula "10") (term "0,0,1"))
                                       (rule "leq_literals" (formula "10") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "10"))
                                       (rule "inEqSimp_contradInEq1" (formula "9") (term "1") (ifseqformula "17"))
                                       (rule "inEqSimp_homoInEq1" (formula "9") (term "0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0,1"))
                                       (rule "add_literals" (formula "9") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "9") (term "1,0,0,1"))
                                       (rule "add_zero_right" (formula "9") (term "0,0,1"))
                                       (rule "leq_literals" (formula "9") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "9"))
                                       (rule "inEqSimp_contradInEq1" (formula "8") (term "0") (ifseqformula "17"))
                                       (rule "inEqSimp_homoInEq1" (formula "8") (term "0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0,0"))
                                       (rule "add_literals" (formula "8") (term "1,1,0,0,0"))
                                       (rule "times_zero_1" (formula "8") (term "1,0,0,0"))
                                       (rule "add_zero_right" (formula "8") (term "0,0,0"))
                                       (rule "leq_literals" (formula "8") (term "0,0"))
                                       (builtin "One Step Simplification" (formula "8"))
                                       (rule "notLeft" (formula "8"))
                                       (rule "inEqSimp_contradInEq0" (formula "8") (ifseqformula "9"))
                                       (rule "qeq_literals" (formula "8") (term "0"))
                                       (builtin "One Step Simplification" (formula "8"))
                                       (rule "closeFalse" (formula "8"))
                                    )
                                    (branch "CUT: b[0] ≥ a[0] FALSE"
                                       (builtin "One Step Simplification" (formula "17"))
                                       (rule "notLeft" (formula "17"))
                                       (rule "replace_known_right" (formula "17") (term "1") (ifseqformula "38"))
                                       (builtin "One Step Simplification" (formula "17"))
                                       (rule "replace_known_right" (formula "18") (term "1") (ifseqformula "38"))
                                       (builtin "One Step Simplification" (formula "18"))
                                       (rule "inEqSimp_geqRight" (formula "38"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                       (rule "mul_literals" (formula "1") (term "0,1"))
                                       (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                       (rule "inEqSimp_contradEq3" (formula "41") (ifseqformula "1"))
                                       (rule "polySimp_mulComm0" (formula "41") (term "1,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "41") (term "0,0"))
                                       (rule "add_literals" (formula "41") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "41") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "41") (term "0,0"))
                                       (rule "qeq_literals" (formula "41") (term "0"))
                                       (builtin "One Step Simplification" (formula "41"))
                                       (rule "false_right" (formula "41"))
                                       (rule "inEqSimp_subsumption0" (formula "11") (term "1") (ifseqformula "1"))
                                       (rule "inEqSimp_homoInEq0" (formula "11") (term "0,1"))
                                       (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1"))
                                       (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1"))
                                       (rule "mul_literals" (formula "11") (term "0,1,0,0,1"))
                                       (rule "polySimp_addAssoc" (formula "11") (term "0,0,1"))
                                       (rule "polySimp_addComm0" (formula "11") (term "0,0,0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,1"))
                                       (rule "add_literals" (formula "11") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "11") (term "1,0,0,1"))
                                       (rule "add_literals" (formula "11") (term "0,0,1"))
                                       (rule "qeq_literals" (formula "11") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "11"))
                                       (rule "true_left" (formula "11"))
                                       (rule "inEqSimp_subsumption0" (formula "10") (term "1") (ifseqformula "1"))
                                       (rule "inEqSimp_homoInEq0" (formula "10") (term "0,1"))
                                       (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1"))
                                       (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1"))
                                       (rule "mul_literals" (formula "10") (term "0,1,0,0,1"))
                                       (rule "polySimp_addAssoc" (formula "10") (term "0,0,1"))
                                       (rule "polySimp_addComm0" (formula "10") (term "0,0,0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1"))
                                       (rule "add_literals" (formula "10") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "10") (term "1,0,0,1"))
                                       (rule "add_literals" (formula "10") (term "0,0,1"))
                                       (rule "qeq_literals" (formula "10") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "10"))
                                       (rule "true_left" (formula "10"))
                                       (rule "inEqSimp_subsumption0" (formula "9") (term "0") (ifseqformula "1"))
                                       (rule "inEqSimp_homoInEq0" (formula "9") (term "0,0"))
                                       (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0"))
                                       (rule "mul_literals" (formula "9") (term "0,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "9") (term "0,0,0"))
                                       (rule "polySimp_addComm0" (formula "9") (term "0,0,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0,0"))
                                       (rule "add_literals" (formula "9") (term "1,1,0,0,0"))
                                       (rule "times_zero_1" (formula "9") (term "1,0,0,0"))
                                       (rule "add_zero_right" (formula "9") (term "0,0,0"))
                                       (rule "qeq_literals" (formula "9") (term "0,0"))
                                       (builtin "One Step Simplification" (formula "9"))
                                       (rule "true_left" (formula "9"))
                                       (rule "inEqSimp_contradInEq1" (formula "16") (ifseqformula "15"))
                                       (rule "qeq_literals" (formula "16") (term "0"))
                                       (builtin "One Step Simplification" (formula "16"))
                                       (rule "closeFalse" (formula "16"))
                                    )
                                 )
                              )
                           )
                        )
                     )
                     (branch "CUT: b.length ≤ a.length FALSE"
                        (builtin "One Step Simplification" (formula "25"))
                        (rule "false_right" (formula "25"))
                        (rule "replace_known_right" (formula "18") (term "0") (ifseqformula "24"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "notLeft" (formula "18"))
                        (rule "replace_known_right" (formula "21") (term "0,1") (ifseqformula "22"))
                        (builtin "One Step Simplification" (formula "21"))
                        (rule "notLeft" (formula "21"))
                        (rule "inEqSimp_leqRight" (formula "24"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "inEqSimp_leqRight" (formula "22"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0"))
                        (rule "add_zero_left" (formula "1") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1"))
                        (rule "polySimp_rightDist" (formula "2") (term "1"))
                        (rule "mul_literals" (formula "2") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                        (rule "replace_known_left" (formula "20") (term "0") (ifseqformula "2"))
                        (builtin "One Step Simplification" (formula "20"))
                        (rule "andLeft" (formula "20"))
                        (rule "notLeft" (formula "21"))
                        (rule "replace_known_left" (formula "22") (term "1") (ifseqformula "20"))
                        (builtin "One Step Simplification" (formula "22"))
                        (rule "replace_known_left" (formula "26") (term "1") (ifseqformula "22"))
                        (builtin "One Step Simplification" (formula "26"))
                        (rule "allRight" (formula "26") (inst "sk=j_2"))
                        (rule "orRight" (formula "26"))
                        (rule "orRight" (formula "26"))
                        (rule "inEqSimp_leqRight" (formula "26"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_geqRight" (formula "27"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "applyEq" (formula "4") (term "1,1") (ifseqformula "22"))
                        (rule "applyEq" (formula "24") (term "1") (ifseqformula "22"))
                        (rule "applyEq" (formula "25") (term "1") (ifseqformula "22"))
                        (rule "applyEq" (formula "3") (term "0,0,0") (ifseqformula "22"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1"))
                        (rule "polySimp_elimOne" (formula "3") (term "1"))
                        (rule "inEqSimp_contradEq7" (formula "24") (ifseqformula "3"))
                        (rule "polySimp_mulComm0" (formula "24") (term "1,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,0"))
                        (rule "add_literals" (formula "24") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "24") (term "1,0,0"))
                        (rule "add_zero_right" (formula "24") (term "0,0"))
                        (rule "leq_literals" (formula "24") (term "0"))
                        (builtin "One Step Simplification" (formula "24"))
                        (rule "false_right" (formula "24"))
                        (rule "inEqSimp_subsumption1" (formula "23") (ifseqformula "3"))
                        (rule "inEqSimp_homoInEq0" (formula "23") (term "0"))
                        (rule "polySimp_pullOutFactor1b" (formula "23") (term "0,0"))
                        (rule "add_literals" (formula "23") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "23") (term "1,0,0"))
                        (rule "add_zero_right" (formula "23") (term "0,0"))
                        (rule "qeq_literals" (formula "23") (term "0"))
                        (builtin "One Step Simplification" (formula "23"))
                        (rule "true_left" (formula "23"))
                        (rule "ex_pull_out3" (formula "5") (term "1,0"))
                        (rule "cnf_rightDist" (formula "5") (term "0,1,0"))
                        (rule "commute_or" (formula "5") (term "1,0,1,0"))
                        (rule "cnf_rightDist" (formula "5") (term "0,0,1,0"))
                        (rule "commute_or" (formula "5") (term "1,0,0,1,0"))
                        (rule "ex_pull_out3" (formula "4") (term "1,0"))
                        (rule "cnf_rightDist" (formula "4") (term "0,1,0"))
                        (rule "commute_or" (formula "4") (term "1,0,1,0"))
                        (rule "cnf_rightDist" (formula "4") (term "0,0,1,0"))
                        (rule "commute_or" (formula "4") (term "1,0,0,1,0"))
                        (rule "ex_pull_out3" (formula "5") (term "0"))
                        (rule "cnf_rightDist" (formula "5") (term "0,0"))
                        (rule "commute_or_2" (formula "5") (term "1,0,0"))
                        (rule "commute_or" (formula "5") (term "0,1,0,0"))
                        (rule "cnf_rightDist" (formula "5") (term "0,0,0"))
                        (rule "commute_or_2" (formula "5") (term "1,0,0,0"))
                        (rule "shift_paren_or" (formula "5") (term "0,0,0,0"))
                        (rule "commute_or" (formula "5") (term "0,1,0,0,0"))
                        (rule "ex_pull_out3" (formula "4") (term "0"))
                        (rule "cnf_rightDist" (formula "4") (term "0,0"))
                        (rule "commute_or_2" (formula "4") (term "1,0,0"))
                        (rule "commute_or" (formula "4") (term "0,1,0,0"))
                        (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                        (rule "commute_or_2" (formula "4") (term "1,0,0,0"))
                        (rule "shift_paren_or" (formula "4") (term "0,0,0,0"))
                        (rule "commute_or" (formula "4") (term "0,1,0,0,0"))
                        (rule "commute_and_2" (formula "5") (term "0,0"))
                        (rule "commute_and_2" (formula "4") (term "0,0"))
                        (rule "commute_and" (formula "5") (term "0,0,0"))
                        (rule "commute_and" (formula "4") (term "0,0,0"))
                        (rule "arrayLengthNotNegative" (formula "3") (term "0"))
                        (rule "arrayLengthIsAShort" (formula "4") (term "0"))
                        (builtin "One Step Simplification" (formula "4"))
                        (rule "true_left" (formula "4"))
                        (rule "arrayLengthIsAShort" (formula "22") (term "0"))
                        (builtin "One Step Simplification" (formula "22"))
                        (rule "true_left" (formula "22"))
                        (rule "arrayLengthNotNegative" (formula "22") (term "0"))
                        (rule "applyEq" (formula "22") (term "0") (ifseqformula "23"))
                        (rule "allLeft" (formula "6") (inst "t=j_2"))
                        (rule "exLeft" (formula "6") (inst "sk=j_3"))
                        (rule "andLeft" (formula "6"))
                        (rule "andLeft" (formula "6"))
                        (rule "inEqSimp_commuteGeq" (formula "8") (term "1,0,0"))
                        (rule "inEqSimp_commuteGeq" (formula "7") (term "1,0,0"))
                        (rule "inEqSimp_commuteGeq" (formula "6") (term "1,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "8") (term "0,0,0") (ifseqformula "2"))
                        (rule "qeq_literals" (formula "8") (term "0,0,0,0"))
                        (builtin "One Step Simplification" (formula "8"))
                        (rule "inEqSimp_contradInEq1" (formula "6") (term "0,0,0") (ifseqformula "2"))
                        (rule "qeq_literals" (formula "6") (term "0,0,0,0"))
                        (builtin "One Step Simplification" (formula "6"))
                        (rule "inEqSimp_contradInEq1" (formula "7") (term "1,0,0") (ifseqformula "1"))
                        (rule "inEqSimp_homoInEq1" (formula "7") (term "0,1,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "7") (term "1,1,0,0,1,0,0"))
                        (rule "times_zero_1" (formula "7") (term "1,0,0,1,0,0"))
                        (rule "add_zero_right" (formula "7") (term "0,0,1,0,0"))
                        (rule "leq_literals" (formula "7") (term "0,1,0,0"))
                        (builtin "One Step Simplification" (formula "7"))
                        (rule "inEqSimp_contradInEq1" (formula "8") (term "0,0") (ifseqformula "1"))
                        (rule "inEqSimp_homoInEq1" (formula "8") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0,0,0"))
                        (rule "add_literals" (formula "8") (term "1,1,0,0,0,0"))
                        (rule "times_zero_1" (formula "8") (term "1,0,0,0,0"))
                        (rule "add_zero_right" (formula "8") (term "0,0,0,0"))
                        (rule "leq_literals" (formula "8") (term "0,0,0"))
                        (builtin "One Step Simplification" (formula "8"))
                        (rule "inEqSimp_contradInEq1" (formula "6") (term "0,0") (ifseqformula "1"))
                        (rule "inEqSimp_homoInEq1" (formula "6") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0,0,0"))
                        (rule "add_literals" (formula "6") (term "1,1,0,0,0,0"))
                        (rule "times_zero_1" (formula "6") (term "1,0,0,0,0"))
                        (rule "add_zero_right" (formula "6") (term "0,0,0,0"))
                        (rule "leq_literals" (formula "6") (term "0,0,0"))
                        (builtin "One Step Simplification" (formula "6"))
                        (rule "inEqSimp_contradInEq1" (formula "7") (term "0,0") (ifseqformula "2"))
                        (rule "qeq_literals" (formula "7") (term "0,0,0"))
                        (builtin "One Step Simplification" (formula "7"))
                        (rule "commute_or" (formula "8"))
                        (rule "commute_or" (formula "7"))
                        (rule "cut_direct" (formula "6") (term "0"))
                        (branch "CUT: b[j_2] ≥ a[j_2] TRUE"
                           (builtin "One Step Simplification" (formula "7"))
                           (rule "true_left" (formula "7"))
                           (rule "replace_known_left" (formula "8") (term "1") (ifseqformula "6"))
                           (builtin "One Step Simplification" (formula "8"))
                           (rule "true_left" (formula "8"))
                           (rule "replace_known_left" (formula "7") (term "1") (ifseqformula "6"))
                           (builtin "One Step Simplification" (formula "7"))
                           (rule "true_left" (formula "7"))
                           (rule "inEqSimp_strengthen1" (formula "6") (ifseqformula "27"))
                           (rule "inEqSimp_contradEq7" (formula "27") (ifseqformula "6"))
                           (rule "polySimp_mulComm0" (formula "27") (term "1,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "27") (term "0,0"))
                           (rule "add_literals" (formula "27") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "27") (term "1,0,0"))
                           (rule "add_zero_right" (formula "27") (term "0,0"))
                           (rule "leq_literals" (formula "27") (term "0"))
                           (builtin "One Step Simplification" (formula "27"))
                           (rule "false_right" (formula "27"))
                           (rule "allLeft" (formula "5") (inst "t=j_2"))
                           (rule "exLeft" (formula "5") (inst "sk=j_6"))
                           (rule "andLeft" (formula "5"))
                           (rule "andLeft" (formula "5"))
                           (rule "inEqSimp_commuteGeq" (formula "7") (term "1,0,0"))
                           (rule "inEqSimp_commuteGeq" (formula "5") (term "1,0,0"))
                           (rule "inEqSimp_commuteGeq" (formula "6") (term "1,0,0"))
                           (rule "inEqSimp_contradInEq1" (formula "7") (term "1,0") (ifseqformula "9"))
                           (rule "inEqSimp_homoInEq1" (formula "7") (term "0,1,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0,1,0"))
                           (rule "add_literals" (formula "7") (term "1,1,0,0,1,0"))
                           (rule "times_zero_1" (formula "7") (term "1,0,0,1,0"))
                           (rule "add_zero_right" (formula "7") (term "0,0,1,0"))
                           (rule "leq_literals" (formula "7") (term "0,1,0"))
                           (builtin "One Step Simplification" (formula "7"))
                           (rule "inEqSimp_contradInEq1" (formula "6") (term "0,0,0") (ifseqformula "2"))
                           (rule "qeq_literals" (formula "6") (term "0,0,0,0"))
                           (builtin "One Step Simplification" (formula "6"))
                           (rule "inEqSimp_contradInEq1" (formula "5") (term "1,0") (ifseqformula "9"))
                           (rule "inEqSimp_homoInEq1" (formula "5") (term "0,1,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "5") (term "0,0,1,0"))
                           (rule "add_literals" (formula "5") (term "1,1,0,0,1,0"))
                           (rule "times_zero_1" (formula "5") (term "1,0,0,1,0"))
                           (rule "add_zero_right" (formula "5") (term "0,0,1,0"))
                           (rule "leq_literals" (formula "5") (term "0,1,0"))
                           (builtin "One Step Simplification" (formula "5"))
                           (rule "inEqSimp_contradInEq1" (formula "7") (term "0,0") (ifseqformula "2"))
                           (rule "qeq_literals" (formula "7") (term "0,0,0"))
                           (builtin "One Step Simplification" (formula "7"))
                           (rule "inEqSimp_contradInEq1" (formula "6") (term "1,0") (ifseqformula "9"))
                           (rule "inEqSimp_homoInEq1" (formula "6") (term "0,1,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0,1,0"))
                           (rule "add_literals" (formula "6") (term "1,1,0,0,1,0"))
                           (rule "times_zero_1" (formula "6") (term "1,0,0,1,0"))
                           (rule "add_zero_right" (formula "6") (term "0,0,1,0"))
                           (rule "leq_literals" (formula "6") (term "0,1,0"))
                           (builtin "One Step Simplification" (formula "6"))
                           (rule "inEqSimp_contradInEq1" (formula "5") (term "1,0") (ifseqformula "1"))
                           (rule "inEqSimp_homoInEq1" (formula "5") (term "0,1,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "5") (term "0,0,1,0"))
                           (rule "add_literals" (formula "5") (term "1,1,0,0,1,0"))
                           (rule "times_zero_1" (formula "5") (term "1,0,0,1,0"))
                           (rule "add_zero_right" (formula "5") (term "0,0,1,0"))
                           (rule "leq_literals" (formula "5") (term "0,1,0"))
                           (builtin "One Step Simplification" (formula "5"))
                           (rule "inEqSimp_contradInEq1" (formula "7") (term "0") (ifseqformula "1"))
                           (rule "inEqSimp_homoInEq1" (formula "7") (term "0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0,0"))
                           (rule "add_literals" (formula "7") (term "1,1,0,0,0"))
                           (rule "times_zero_1" (formula "7") (term "1,0,0,0"))
                           (rule "add_zero_right" (formula "7") (term "0,0,0"))
                           (rule "leq_literals" (formula "7") (term "0,0"))
                           (builtin "One Step Simplification" (formula "7"))
                           (rule "inEqSimp_contradInEq1" (formula "5") (term "0") (ifseqformula "2"))
                           (rule "qeq_literals" (formula "5") (term "0,0"))
                           (builtin "One Step Simplification" (formula "5"))
                           (rule "notLeft" (formula "5"))
                           (rule "inEqSimp_contradInEq1" (formula "5") (term "0") (ifseqformula "1"))
                           (rule "inEqSimp_homoInEq1" (formula "5") (term "0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "5") (term "0,0,0"))
                           (rule "add_literals" (formula "5") (term "1,1,0,0,0"))
                           (rule "times_zero_1" (formula "5") (term "1,0,0,0"))
                           (rule "add_zero_right" (formula "5") (term "0,0,0"))
                           (rule "leq_literals" (formula "5") (term "0,0"))
                           (builtin "One Step Simplification" (formula "5"))
                           (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "6"))
                           (rule "times_zero_1" (formula "5") (term "0,0"))
                           (rule "add_zero_left" (formula "5") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                           (rule "mul_literals" (formula "5") (term "1"))
                           (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "5"))
                           (rule "leq_literals" (formula "2") (term "0"))
                           (builtin "One Step Simplification" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "allLeft" (formula "9") (inst "t=Z(0(#))"))
                           (rule "leq_literals" (formula "9") (term "0,0,0,1,0,0"))
                           (builtin "One Step Simplification" (formula "9"))
                           (rule "leq_literals" (formula "9") (term "0,0,0,0,0,0"))
                           (builtin "One Step Simplification" (formula "9"))
                           (rule "leq_literals" (formula "9") (term "0,0,0,1,0"))
                           (builtin "One Step Simplification" (formula "9"))
                           (rule "add_zero_right" (formula "9") (term "1,1,1,0"))
                           (rule "exLeft" (formula "9") (inst "sk=j_7"))
                           (rule "andLeft" (formula "9"))
                           (rule "andLeft" (formula "9"))
                           (rule "inEqSimp_commuteGeq" (formula "11") (term "0,0"))
                           (rule "inEqSimp_commuteGeq" (formula "10") (term "0,0"))
                           (rule "inEqSimp_commuteGeq" (formula "9") (term "0,0"))
                           (rule "commute_or_2" (formula "11"))
                           (rule "commute_or_2" (formula "10"))
                           (rule "commute_or" (formula "11") (term "0"))
                           (rule "commute_or" (formula "10") (term "0"))
                           (rule "allLeft" (formula "7") (inst "t=Z(0(#))"))
                           (rule "leq_literals" (formula "7") (term "0,0,0,0,0,0"))
                           (builtin "One Step Simplification" (formula "7"))
                           (rule "leq_literals" (formula "7") (term "0,0,0,1,0"))
                           (builtin "One Step Simplification" (formula "7"))
                           (rule "add_zero_right" (formula "7") (term "1,1,1,0"))
                           (rule "leq_literals" (formula "7") (term "0,0,0,1,0,0"))
                           (builtin "One Step Simplification" (formula "7"))
                           (rule "exLeft" (formula "7") (inst "sk=j_8"))
                           (rule "andLeft" (formula "7"))
                           (rule "andLeft" (formula "7"))
                           (rule "inEqSimp_commuteGeq" (formula "9") (term "0,0"))
                           (rule "inEqSimp_commuteGeq" (formula "7") (term "0,0"))
                           (rule "inEqSimp_commuteGeq" (formula "8") (term "0,0"))
                           (rule "commute_or_2" (formula "9"))
                           (rule "commute_or_2" (formula "8"))
                           (rule "commute_or" (formula "9") (term "0"))
                           (rule "commute_or" (formula "8") (term "0"))
                           (rule "cut_direct" (formula "9") (term "1,0"))
                           (branch "CUT: res_min ≤ 0 TRUE"
                              (builtin "One Step Simplification" (formula "10"))
                              (rule "true_left" (formula "10"))
                              (rule "replace_known_left" (formula "13") (term "1,0") (ifseqformula "9"))
                              (builtin "One Step Simplification" (formula "13"))
                              (rule "true_left" (formula "13"))
                              (rule "replace_known_left" (formula "12") (term "0,0") (ifseqformula "9"))
                              (builtin "One Step Simplification" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "replace_known_left" (formula "12") (term "1,0") (ifseqformula "9"))
                              (builtin "One Step Simplification" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "replace_known_left" (formula "8") (term "1,0") (ifseqformula "9"))
                              (builtin "One Step Simplification" (formula "8"))
                              (rule "true_left" (formula "8"))
                              (rule "replace_known_left" (formula "7") (term "0,0") (ifseqformula "8"))
                              (builtin "One Step Simplification" (formula "7"))
                              (rule "true_left" (formula "7"))
                              (rule "inEqSimp_antiSymm" (formula "26") (ifseqformula "7"))
                              (rule "applyEqRigid" (formula "10") (term "1,1,0,0,0,0,0,0") (ifseqformula "26"))
                              (rule "applyEqRigid" (formula "27") (term "0") (ifseqformula "26"))
                              (rule "qeq_literals" (formula "27"))
                              (rule "true_left" (formula "27"))
                              (rule "applyEq" (formula "8") (term "1,1,0,0,0,0,0,0") (ifseqformula "26"))
                              (rule "applyEqRigid" (formula "10") (term "1,1,0,0,1,0,0,0") (ifseqformula "26"))
                              (rule "applyEq" (formula "8") (term "1,1,0,0,1,0,0") (ifseqformula "26"))
                              (rule "applyEq" (formula "3") (term "1,1") (ifseqformula "26"))
                              (rule "add_zero_right" (formula "3") (term "1"))
                              (rule "applyEq" (formula "1") (term "0") (ifseqformula "26"))
                              (rule "inEqSimp_homoInEq1" (formula "1"))
                              (rule "times_zero_2" (formula "1") (term "1,0"))
                              (rule "add_zero_right" (formula "1") (term "0"))
                              (rule "applyEqRigid" (formula "8") (term "1,1,0,0,1,0,0,0") (ifseqformula "26"))
                              (rule "applyEq" (formula "7") (term "0") (ifseqformula "26"))
                              (rule "leq_literals" (formula "7"))
                              (rule "true_left" (formula "7"))
                              (rule "applyEqRigid" (formula "9") (term "1,1,0,0,1,0,0") (ifseqformula "25"))
                              (rule "applyEqRigid" (formula "12") (term "1") (ifseqformula "25"))
                              (rule "applyEq" (formula "26") (term "1") (ifseqformula "25"))
                              (rule "applyEq" (formula "13") (term "1") (ifseqformula "25"))
                              (rule "applyEq" (formula "14") (term "1") (ifseqformula "25"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                              (rule "mul_literals" (formula "1") (term "1"))
                              (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "4"))
                              (rule "qeq_literals" (formula "1") (term "0"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "closeFalse" (formula "1"))
                           )
                           (branch "CUT: res_min ≤ 0 FALSE"
                              (builtin "One Step Simplification" (formula "9"))
                              (rule "replace_known_right" (formula "14") (term "1,0") (ifseqformula "34"))
                              (builtin "One Step Simplification" (formula "14"))
                              (rule "replace_known_right" (formula "12") (term "0,0") (ifseqformula "34"))
                              (builtin "One Step Simplification" (formula "12"))
                              (rule "replace_known_right" (formula "7") (term "0,0") (ifseqformula "34"))
                              (builtin "One Step Simplification" (formula "7"))
                              (rule "replace_known_right" (formula "8") (term "1,0") (ifseqformula "34"))
                              (builtin "One Step Simplification" (formula "8"))
                              (rule "replace_known_right" (formula "13") (term "1,0") (ifseqformula "34"))
                              (builtin "One Step Simplification" (formula "13"))
                              (rule "inEqSimp_leqRight" (formula "34"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_zero_right" (formula "1") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                              (rule "mul_literals" (formula "1") (term "1"))
                              (rule "inEqSimp_subsumption1" (formula "32") (ifseqformula "1"))
                              (rule "leq_literals" (formula "32") (term "0"))
                              (builtin "One Step Simplification" (formula "32"))
                              (rule "true_left" (formula "32"))
                              (rule "cut_direct" (formula "13") (term "0"))
                              (branch "CUT: b[0] ≥ a[0] TRUE"
                                 (builtin "One Step Simplification" (formula "14"))
                                 (rule "true_left" (formula "14"))
                                 (rule "replace_known_left" (formula "15") (term "1") (ifseqformula "13"))
                                 (builtin "One Step Simplification" (formula "15"))
                                 (rule "true_left" (formula "15"))
                                 (rule "replace_known_left" (formula "14") (term "1") (ifseqformula "13"))
                                 (builtin "One Step Simplification" (formula "14"))
                                 (rule "true_left" (formula "14"))
                                 (rule "inEqSimp_strengthen1" (formula "13") (ifseqformula "33"))
                                 (rule "inEqSimp_contradEq7" (formula "33") (ifseqformula "13"))
                                 (rule "polySimp_mulComm0" (formula "33") (term "1,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "33") (term "0,0"))
                                 (rule "add_literals" (formula "33") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "33") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "33") (term "0,0"))
                                 (rule "leq_literals" (formula "33") (term "0"))
                                 (builtin "One Step Simplification" (formula "33"))
                                 (rule "false_right" (formula "33"))
                                 (rule "inEqSimp_contradInEq1" (formula "8") (term "0") (ifseqformula "13"))
                                 (rule "inEqSimp_homoInEq1" (formula "8") (term "0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0,0"))
                                 (rule "add_literals" (formula "8") (term "1,1,0,0,0"))
                                 (rule "times_zero_1" (formula "8") (term "1,0,0,0"))
                                 (rule "add_zero_right" (formula "8") (term "0,0,0"))
                                 (rule "leq_literals" (formula "8") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "8"))
                                 (rule "notLeft" (formula "8"))
                                 (rule "inEqSimp_contradInEq1" (formula "9") (term "1") (ifseqformula "12"))
                                 (rule "inEqSimp_homoInEq1" (formula "9") (term "0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0,1"))
                                 (rule "add_literals" (formula "9") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "9") (term "1,0,0,1"))
                                 (rule "add_zero_right" (formula "9") (term "0,0,1"))
                                 (rule "leq_literals" (formula "9") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "9"))
                                 (rule "inEqSimp_contradInEq1" (formula "8") (term "1") (ifseqformula "12"))
                                 (rule "inEqSimp_homoInEq1" (formula "8") (term "0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0,1"))
                                 (rule "add_literals" (formula "8") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "8") (term "1,0,0,1"))
                                 (rule "add_zero_right" (formula "8") (term "0,0,1"))
                                 (rule "leq_literals" (formula "8") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "8"))
                                 (rule "inEqSimp_contradInEq0" (formula "8") (ifseqformula "9"))
                                 (rule "qeq_literals" (formula "8") (term "0"))
                                 (builtin "One Step Simplification" (formula "8"))
                                 (rule "closeFalse" (formula "8"))
                              )
                              (branch "CUT: b[0] ≥ a[0] FALSE"
                                 (builtin "One Step Simplification" (formula "13"))
                                 (rule "notLeft" (formula "13"))
                                 (rule "replace_known_right" (formula "13") (term "1") (ifseqformula "34"))
                                 (builtin "One Step Simplification" (formula "13"))
                                 (rule "replace_known_right" (formula "14") (term "1") (ifseqformula "34"))
                                 (builtin "One Step Simplification" (formula "14"))
                                 (rule "inEqSimp_geqRight" (formula "34"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                 (rule "mul_literals" (formula "1") (term "0,1"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                 (rule "inEqSimp_contradEq3" (formula "36") (ifseqformula "1"))
                                 (rule "polySimp_mulComm0" (formula "36") (term "1,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "36") (term "0,0"))
                                 (rule "add_literals" (formula "36") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "36") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "36") (term "0,0"))
                                 (rule "qeq_literals" (formula "36") (term "0"))
                                 (builtin "One Step Simplification" (formula "36"))
                                 (rule "false_right" (formula "36"))
                                 (rule "inEqSimp_subsumption0" (formula "11") (term "1") (ifseqformula "1"))
                                 (rule "inEqSimp_homoInEq0" (formula "11") (term "0,1"))
                                 (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1"))
                                 (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1"))
                                 (rule "mul_literals" (formula "11") (term "0,1,0,0,1"))
                                 (rule "polySimp_addAssoc" (formula "11") (term "0,0,1"))
                                 (rule "polySimp_addComm0" (formula "11") (term "0,0,0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,1"))
                                 (rule "add_literals" (formula "11") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "11") (term "1,0,0,1"))
                                 (rule "add_zero_right" (formula "11") (term "0,0,1"))
                                 (rule "qeq_literals" (formula "11") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "11"))
                                 (rule "true_left" (formula "11"))
                                 (rule "inEqSimp_contradInEq0" (formula "13") (ifseqformula "14"))
                                 (rule "qeq_literals" (formula "13") (term "0"))
                                 (builtin "One Step Simplification" (formula "13"))
                                 (rule "closeFalse" (formula "13"))
                              )
                           )
                        )
                        (branch "CUT: b[j_2] ≥ a[j_2] FALSE"
                           (builtin "One Step Simplification" (formula "6"))
                           (rule "notLeft" (formula "6"))
                           (rule "replace_known_right" (formula "7") (term "1") (ifseqformula "28"))
                           (builtin "One Step Simplification" (formula "7"))
                           (rule "replace_known_right" (formula "6") (term "1") (ifseqformula "28"))
                           (builtin "One Step Simplification" (formula "6"))
                           (rule "inEqSimp_geqRight" (formula "28"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1"))
                           (rule "polySimp_rightDist" (formula "1") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                           (rule "mul_literals" (formula "1") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                           (rule "inEqSimp_contradEq3" (formula "30") (ifseqformula "1"))
                           (rule "polySimp_mulComm0" (formula "30") (term "1,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "30") (term "0,0"))
                           (rule "add_literals" (formula "30") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "30") (term "1,0,0"))
                           (rule "add_zero_right" (formula "30") (term "0,0"))
                           (rule "qeq_literals" (formula "30") (term "0"))
                           (builtin "One Step Simplification" (formula "30"))
                           (rule "false_right" (formula "30"))
                           (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "8"))
                           (rule "times_zero_1" (formula "7") (term "0,0"))
                           (rule "add_zero_left" (formula "7") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                           (rule "mul_literals" (formula "7") (term "1"))
                           (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "7"))
                           (rule "leq_literals" (formula "3") (term "0"))
                           (builtin "One Step Simplification" (formula "3"))
                           (rule "true_left" (formula "3"))
                           (rule "allLeft" (formula "9") (inst "t=Z(0(#))"))
                           (rule "leq_literals" (formula "9") (term "0,0,0,1,0,0"))
                           (builtin "One Step Simplification" (formula "9"))
                           (rule "leq_literals" (formula "9") (term "0,0,0,1,0"))
                           (builtin "One Step Simplification" (formula "9"))
                           (rule "add_zero_right" (formula "9") (term "1,1,1,0"))
                           (rule "leq_literals" (formula "9") (term "0,0,0,0,0,0"))
                           (builtin "One Step Simplification" (formula "9"))
                           (rule "exLeft" (formula "9") (inst "sk=j_4"))
                           (rule "andLeft" (formula "9"))
                           (rule "andLeft" (formula "9"))
                           (rule "inEqSimp_commuteGeq" (formula "11") (term "0,0"))
                           (rule "inEqSimp_commuteGeq" (formula "10") (term "0,0"))
                           (rule "inEqSimp_commuteGeq" (formula "9") (term "0,0"))
                           (rule "commute_or_2" (formula "11"))
                           (rule "commute_or_2" (formula "10"))
                           (rule "commute_or" (formula "11") (term "0"))
                           (rule "commute_or" (formula "10") (term "0"))
                           (rule "cut_direct" (formula "9") (term "0,0"))
                           (branch "CUT: res_min ≤ 0 TRUE"
                              (builtin "One Step Simplification" (formula "10"))
                              (rule "true_left" (formula "10"))
                              (rule "replace_known_left" (formula "10") (term "1,0") (ifseqformula "9"))
                              (builtin "One Step Simplification" (formula "10"))
                              (rule "true_left" (formula "10"))
                              (rule "replace_known_left" (formula "10") (term "1,0") (ifseqformula "9"))
                              (builtin "One Step Simplification" (formula "10"))
                              (rule "true_left" (formula "10"))
                              (rule "inEqSimp_antiSymm" (formula "26") (ifseqformula "9"))
                              (rule "applyEqRigid" (formula "9") (term "0") (ifseqformula "26"))
                              (rule "leq_literals" (formula "9"))
                              (rule "true_left" (formula "9"))
                              (rule "applyEqRigid" (formula "9") (term "1,1,0,0,1,0,0,0") (ifseqformula "25"))
                              (rule "applyEq" (formula "5") (term "1,1,0,0,0,0,0,0") (ifseqformula "25"))
                              (rule "applyEqRigid" (formula "5") (term "1,1,0,0,1,0,0") (ifseqformula "25"))
                              (rule "applyEq" (formula "9") (term "1,1,0,0,0,0,0,0") (ifseqformula "25"))
                              (rule "applyEqRigid" (formula "4") (term "1,1") (ifseqformula "25"))
                              (rule "add_zero_right" (formula "4") (term "1"))
                              (rule "applyEq" (formula "2") (term "0") (ifseqformula "25"))
                              (rule "inEqSimp_homoInEq1" (formula "2"))
                              (rule "times_zero_2" (formula "2") (term "1,0"))
                              (rule "add_zero_right" (formula "2") (term "0"))
                              (rule "applyEqRigid" (formula "9") (term "1,1,0,0,1,0,0") (ifseqformula "25"))
                              (rule "applyEqRigid" (formula "5") (term "1,1,0,0,1,0,0,0") (ifseqformula "25"))
                              (rule "applyEqRigid" (formula "26") (term "0") (ifseqformula "25"))
                              (rule "qeq_literals" (formula "26"))
                              (rule "true_left" (formula "26"))
                              (rule "applyEqRigid" (formula "13") (term "1") (ifseqformula "25"))
                              (rule "applyEq" (formula "26") (term "1") (ifseqformula "25"))
                              (rule "applyEqRigid" (formula "14") (term "1") (ifseqformula "25"))
                              (rule "applyEqRigid" (formula "12") (term "1") (ifseqformula "25"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                              (rule "mul_literals" (formula "2") (term "1"))
                              (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "4"))
                              (rule "leq_literals" (formula "3") (term "0"))
                              (builtin "One Step Simplification" (formula "3"))
                              (rule "true_left" (formula "3"))
                              (rule "inEqSimp_contradInEq0" (formula "5") (ifseqformula "2"))
                              (rule "qeq_literals" (formula "5") (term "0"))
                              (builtin "One Step Simplification" (formula "5"))
                              (rule "closeFalse" (formula "5"))
                           )
                           (branch "CUT: res_min ≤ 0 FALSE"
                              (builtin "One Step Simplification" (formula "9"))
                              (rule "replace_known_right" (formula "10") (term "1,0") (ifseqformula "31"))
                              (builtin "One Step Simplification" (formula "10"))
                              (rule "replace_known_right" (formula "11") (term "1,0") (ifseqformula "31"))
                              (builtin "One Step Simplification" (formula "11"))
                              (rule "inEqSimp_leqRight" (formula "31"))
                              (rule "times_zero_1" (formula "1") (term "1,0,0"))
                              (rule "add_zero_right" (formula "1") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                              (rule "mul_literals" (formula "1") (term "1"))
                              (rule "inEqSimp_subsumption1" (formula "29") (ifseqformula "1"))
                              (rule "leq_literals" (formula "29") (term "0"))
                              (builtin "One Step Simplification" (formula "29"))
                              (rule "true_left" (formula "29"))
                              (rule "cut_direct" (formula "10") (term "0"))
                              (branch "CUT: b[0] ≥ a[0] TRUE"
                                 (builtin "One Step Simplification" (formula "11"))
                                 (rule "true_left" (formula "11"))
                                 (rule "replace_known_left" (formula "11") (term "1") (ifseqformula "10"))
                                 (builtin "One Step Simplification" (formula "11"))
                                 (rule "true_left" (formula "11"))
                                 (rule "replace_known_left" (formula "11") (term "1") (ifseqformula "10"))
                                 (builtin "One Step Simplification" (formula "11"))
                                 (rule "true_left" (formula "11"))
                                 (rule "inEqSimp_strengthen1" (formula "10") (ifseqformula "30"))
                                 (rule "inEqSimp_contradEq7" (formula "30") (ifseqformula "10"))
                                 (rule "polySimp_mulComm0" (formula "30") (term "1,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "30") (term "0,0"))
                                 (rule "add_literals" (formula "30") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "30") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "30") (term "0,0"))
                                 (rule "leq_literals" (formula "30") (term "0"))
                                 (builtin "One Step Simplification" (formula "30"))
                                 (rule "false_right" (formula "30"))
                                 (rule "allLeft" (formula "6") (inst "t=Z(0(#))"))
                                 (rule "add_zero_right" (formula "6") (term "1,1,1,0"))
                                 (rule "leq_literals" (formula "6") (term "0,0,0,0,0,0"))
                                 (builtin "One Step Simplification" (formula "6"))
                                 (rule "leq_literals" (formula "6") (term "0,0,0,1,0"))
                                 (builtin "One Step Simplification" (formula "6"))
                                 (rule "leq_literals" (formula "6") (term "0,0,0,1,0,0"))
                                 (builtin "One Step Simplification" (formula "6"))
                                 (rule "exLeft" (formula "6") (inst "sk=j_5"))
                                 (rule "andLeft" (formula "6"))
                                 (rule "andLeft" (formula "6"))
                                 (rule "inEqSimp_commuteGeq" (formula "8") (term "0,0"))
                                 (rule "inEqSimp_commuteGeq" (formula "7") (term "0,0"))
                                 (rule "inEqSimp_commuteGeq" (formula "6") (term "0,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "6") (term "1,0") (ifseqformula "13"))
                                 (rule "inEqSimp_homoInEq1" (formula "6") (term "0,1,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0,1,0"))
                                 (rule "add_literals" (formula "6") (term "1,1,0,0,1,0"))
                                 (rule "times_zero_1" (formula "6") (term "1,0,0,1,0"))
                                 (rule "add_zero_right" (formula "6") (term "0,0,1,0"))
                                 (rule "leq_literals" (formula "6") (term "0,1,0"))
                                 (builtin "One Step Simplification" (formula "6"))
                                 (rule "inEqSimp_contradInEq1" (formula "8") (term "0,0") (ifseqformula "1"))
                                 (rule "qeq_literals" (formula "8") (term "0,0,0"))
                                 (builtin "One Step Simplification" (formula "8"))
                                 (rule "inEqSimp_contradInEq1" (formula "7") (term "1,0") (ifseqformula "13"))
                                 (rule "inEqSimp_homoInEq1" (formula "7") (term "0,1,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0,1,0"))
                                 (rule "add_literals" (formula "7") (term "1,1,0,0,1,0"))
                                 (rule "times_zero_1" (formula "7") (term "1,0,0,1,0"))
                                 (rule "add_zero_right" (formula "7") (term "0,0,1,0"))
                                 (rule "leq_literals" (formula "7") (term "0,1,0"))
                                 (builtin "One Step Simplification" (formula "7"))
                                 (rule "inEqSimp_contradInEq1" (formula "7") (term "0") (ifseqformula "1"))
                                 (rule "qeq_literals" (formula "7") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "7"))
                                 (rule "inEqSimp_contradInEq1" (formula "6") (term "0") (ifseqformula "1"))
                                 (rule "qeq_literals" (formula "6") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "6"))
                                 (rule "notLeft" (formula "6"))
                                 (rule "inEqSimp_contradInEq1" (formula "7") (term "0") (ifseqformula "12"))
                                 (rule "inEqSimp_homoInEq1" (formula "7") (term "0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0,0"))
                                 (rule "add_literals" (formula "7") (term "1,1,0,0,0"))
                                 (rule "times_zero_1" (formula "7") (term "1,0,0,0"))
                                 (rule "add_zero_right" (formula "7") (term "0,0,0"))
                                 (rule "leq_literals" (formula "7") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "7"))
                                 (rule "inEqSimp_contradInEq1" (formula "7") (ifseqformula "6"))
                                 (rule "qeq_literals" (formula "7") (term "0"))
                                 (builtin "One Step Simplification" (formula "7"))
                                 (rule "closeFalse" (formula "7"))
                              )
                              (branch "CUT: b[0] ≥ a[0] FALSE"
                                 (builtin "One Step Simplification" (formula "10"))
                                 (rule "notLeft" (formula "10"))
                                 (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "31"))
                                 (builtin "One Step Simplification" (formula "10"))
                                 (rule "replace_known_right" (formula "11") (term "1") (ifseqformula "31"))
                                 (builtin "One Step Simplification" (formula "11"))
                                 (rule "inEqSimp_geqRight" (formula "31"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                 (rule "mul_literals" (formula "1") (term "0,1"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                 (rule "inEqSimp_contradEq3" (formula "33") (ifseqformula "1"))
                                 (rule "polySimp_mulComm0" (formula "33") (term "1,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "33") (term "0,0"))
                                 (rule "add_literals" (formula "33") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "33") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "33") (term "0,0"))
                                 (rule "qeq_literals" (formula "33") (term "0"))
                                 (builtin "One Step Simplification" (formula "33"))
                                 (rule "false_right" (formula "33"))
                                 (rule "inEqSimp_contradInEq0" (formula "11") (ifseqformula "12"))
                                 (rule "qeq_literals" (formula "11") (term "0"))
                                 (builtin "One Step Simplification" (formula "11"))
                                 (rule "closeFalse" (formula "11"))
                              )
                           )
                        )
                     )
                  )
               )
               (branch "CUT: res_min = res_min_0 FALSE"
                  (rule "eqSymm" (formula "14") (term "1"))
                  (rule "eqSymm" (formula "17") (term "1"))
                  (rule "eqSymm" (formula "15") (term "0,1"))
                  (rule "eqSymm" (formula "22") (term "1,0,1,1,0"))
                  (rule "eqSymm" (formula "19"))
                  (rule "eqSymm" (formula "18") (term "0,1"))
                  (rule "eqSymm" (formula "18") (term "0,1,1"))
                  (rule "eqSymm" (formula "23") (term "1,0,0"))
                  (rule "replace_known_right" (formula "7") (term "0") (ifseqformula "25"))
                  (builtin "One Step Simplification" (formula "7"))
                  (rule "replace_known_right" (formula "8") (term "0") (ifseqformula "26"))
                  (builtin "One Step Simplification" (formula "8"))
                  (rule "inEqSimp_leqRight" (formula "27"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0"))
                  (rule "add_zero_right" (formula "1") (term "0,0"))
                  (rule "inEqSimp_leqRight" (formula "25"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0"))
                  (rule "add_zero_right" (formula "1") (term "0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0,0"))
                  (rule "inEqSimp_gtToGeq" (formula "17") (term "0"))
                  (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0,1,1,0"))
                  (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0,1,1,0"))
                  (rule "inEqSimp_gtToGeq" (formula "12"))
                  (rule "times_zero_1" (formula "12") (term "1,0,0"))
                  (rule "add_zero_right" (formula "12") (term "0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "23") (term "0,1,0"))
                  (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0,1,0"))
                  (rule "polySimp_addComm1" (formula "23") (term "0,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0,1,1,0"))
                  (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0,1,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "21") (term "0,1,0"))
                  (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,1,0"))
                  (rule "inEqSimp_gtToGeq" (formula "19") (term "0"))
                  (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0"))
                  (rule "polySimp_addComm1" (formula "19") (term "0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0,1,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0,1,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "18") (term "0"))
                  (rule "inEqSimp_commuteLeq" (formula "24") (term "1"))
                  (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0,0"))
                  (rule "applyEq" (formula "19") (term "1,0,1") (ifseqformula "3"))
                  (rule "applyEq" (formula "18") (term "1,1") (ifseqformula "3"))
                  (rule "applyEq" (formula "16") (term "1,0,1") (ifseqformula "4"))
                  (rule "applyEq" (formula "15") (term "1,1") (ifseqformula "4"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                  (rule "mul_literals" (formula "2") (term "1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                  (rule "mul_literals" (formula "1") (term "1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0,0"))
                  (rule "mul_literals" (formula "22") (term "0,1,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "0"))
                  (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "16") (term "1,0"))
                  (rule "mul_literals" (formula "16") (term "0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0"))
                  (rule "polySimp_elimOne" (formula "16") (term "1,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0,0"))
                  (rule "mul_literals" (formula "24") (term "0,1,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0,1,1,0"))
                  (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0,1,1,0"))
                  (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0,1,1,0"))
                  (rule "mul_literals" (formula "21") (term "0,1,1,0,0,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0,1,1,0"))
                  (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0,1,1,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "23") (term "0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "23") (term "0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "23") (term "0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0,1,1,0"))
                  (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0,1,1,0"))
                  (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0,1,1,0"))
                  (rule "mul_literals" (formula "23") (term "0,1,1,0,0,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0,1,1,0"))
                  (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0,1,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "21") (term "0,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,1,0"))
                  (rule "polySimp_mulComm0" (formula "21") (term "1,0,1,0"))
                  (rule "polySimp_rightDist" (formula "21") (term "1,0,1,0"))
                  (rule "mul_literals" (formula "21") (term "0,1,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,1,0"))
                  (rule "polySimp_elimOne" (formula "21") (term "1,1,0,1,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "19") (term "0"))
                  (rule "polySimp_mulLiterals" (formula "19") (term "0,0"))
                  (rule "polySimp_elimOne" (formula "19") (term "0,0"))
                  (rule "nnf_ex2all" (formula "23"))
                  (rule "nnf_ex2all" (formula "22"))
                  (rule "nnf_imp2or" (formula "23") (term "0,0"))
                  (rule "nnf_imp2or" (formula "24") (term "0,0"))
                  (rule "nnf_notAnd" (formula "2") (term "0"))
                  (rule "nnf_notAnd" (formula "1") (term "0"))
                  (rule "nnf_notAnd" (formula "2") (term "1,0"))
                  (rule "inEqSimp_notGeq" (formula "2") (term "0,1,0"))
                  (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,1,0"))
                  (rule "mul_literals" (formula "2") (term "0,1,0,0,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,1,0"))
                  (rule "add_literals" (formula "2") (term "0,0,0,0,1,0"))
                  (rule "add_zero_left" (formula "2") (term "0,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,0"))
                  (rule "polySimp_elimOne" (formula "2") (term "1,0,1,0"))
                  (rule "nnf_notAnd" (formula "2") (term "0,0"))
                  (rule "inEqSimp_notGeq" (formula "2") (term "0,0,0"))
                  (rule "times_zero_1" (formula "2") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "2") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "0,0,0"))
                  (rule "mul_literals" (formula "2") (term "1,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "2") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "2") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "2") (term "0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "2") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "2") (term "1,1,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "1,0"))
                  (rule "inEqSimp_notLeq" (formula "1") (term "0,1,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0,1,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,0,0,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,1,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0,0,1,0"))
                  (rule "add_zero_left" (formula "1") (term "0,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,0,1,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0"))
                  (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                  (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
                  (rule "nnf_notAnd" (formula "23") (term "0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0,0"))
                  (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0,0"))
                  (rule "add_literals" (formula "23") (term "0,0,0,1,0,0,0"))
                  (rule "add_zero_left" (formula "23") (term "0,0,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0,0"))
                  (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0,0"))
                  (rule "mul_literals" (formula "23") (term "1,0,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "23") (term "0,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0,0"))
                  (rule "mul_literals" (formula "23") (term "1,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "24") (term "0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0,0"))
                  (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0,0"))
                  (rule "add_literals" (formula "24") (term "0,0,0,1,0,0,0"))
                  (rule "add_zero_left" (formula "24") (term "0,0,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0,0"))
                  (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0,0"))
                  (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "24") (term "0,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0,0"))
                  (rule "mul_literals" (formula "24") (term "1,0,0,0,0"))
                  (rule "nnf_notAll" (formula "2") (term "1,1,0"))
                  (rule "nnf_notAll" (formula "1") (term "1,1,0"))
                  (rule "nnf_imp2or" (formula "2") (term "0,0,1,1,0"))
                  (rule "nnf_notOr" (formula "2") (term "0,1,1,0"))
                  (builtin "One Step Simplification" (formula "2"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,1,1,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,1,0"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "cut_direct" (formula "23") (term "1"))
                  (branch "CUT: b.length ≤ a.length TRUE"
                     (builtin "One Step Simplification" (formula "24"))
                     (rule "allRight" (formula "24") (inst "sk=j_0"))
                     (rule "orRight" (formula "24"))
                     (rule "orRight" (formula "24"))
                     (rule "replace_known_left" (formula "18") (term "0") (ifseqformula "1"))
                     (builtin "One Step Simplification" (formula "18"))
                     (rule "inEqSimp_geqRight" (formula "25"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0"))
                     (rule "inEqSimp_leqRight" (formula "25"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "applyEq" (formula "21") (term "0,0") (ifseqformula "20"))
                     (rule "inEqSimp_homoInEq1" (formula "21") (term "0"))
                     (rule "polySimp_addComm1" (formula "21") (term "0,0"))
                     (rule "applyEq" (formula "24") (term "0,0,1,1") (ifseqformula "20"))
                     (rule "eqSymm" (formula "24") (term "0,1,1"))
                     (rule "applyEq" (formula "24") (term "0,0,1") (ifseqformula "20"))
                     (rule "eqSymm" (formula "24") (term "0,1"))
                     (rule "replace_known_right" (formula "24") (term "0,1") (ifseqformula "25"))
                     (builtin "One Step Simplification" (formula "24"))
                     (rule "notLeft" (formula "24"))
                     (rule "inEqSimp_leqRight" (formula "24"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0"))
                     (rule "add_zero_left" (formula "1") (term "0,0"))
                     (rule "applyEq" (formula "27") (term "0,1") (ifseqformula "21"))
                     (rule "inEqSimp_commuteGeq" (formula "27") (term "1"))
                     (rule "applyEq" (formula "24") (term "0,0") (ifseqformula "21"))
                     (rule "inEqSimp_commuteGeq" (formula "24") (term "0"))
                     (rule "applyEq" (formula "4") (term "0") (ifseqformula "21"))
                     (rule "inEqSimp_commuteLeq" (formula "4"))
                     (rule "applyEq" (formula "22") (term "0,0,1,1") (ifseqformula "21"))
                     (rule "eqSymm" (formula "22") (term "0,1,1"))
                     (builtin "One Step Simplification" (formula "22"))
                     (rule "notLeft" (formula "22"))
                     (rule "inEqSimp_leqRight" (formula "24"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0"))
                     (rule "add_zero_left" (formula "1") (term "0,0"))
                     (rule "applyEq" (formula "2") (term "1,0") (ifseqformula "22"))
                     (rule "polySimp_addComm0" (formula "2") (term "0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                     (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                     (rule "polySimp_elimOne" (formula "4") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                     (rule "polySimp_elimOne" (formula "1") (term "1"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0"))
                     (rule "replace_known_left" (formula "23") (term "0") (ifseqformula "1"))
                     (builtin "One Step Simplification" (formula "23"))
                     (rule "replace_known_left" (formula "26") (term "1") (ifseqformula "1"))
                     (builtin "One Step Simplification" (formula "26"))
                     (rule "allRight" (formula "26") (inst "sk=j_1"))
                     (rule "orRight" (formula "26"))
                     (rule "orRight" (formula "26"))
                     (rule "inEqSimp_leqRight" (formula "26"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "inEqSimp_geqRight" (formula "27"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0"))
                     (rule "applyEq" (formula "6") (term "0") (ifseqformula "25"))
                     (rule "applyEq" (formula "3") (term "0") (ifseqformula "25"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0"))
                     (rule "inEqSimp_strengthen0" (formula "3") (ifseqformula "26"))
                     (rule "inEqSimp_contradEq3" (formula "26") (ifseqformula "3"))
                     (rule "polySimp_mulComm0" (formula "26") (term "1,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0"))
                     (rule "add_literals" (formula "26") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "26") (term "1,0,0"))
                     (rule "add_zero_right" (formula "26") (term "0,0"))
                     (rule "qeq_literals" (formula "26") (term "0"))
                     (builtin "One Step Simplification" (formula "26"))
                     (rule "false_right" (formula "26"))
                     (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "6"))
                     (rule "andLeft" (formula "3"))
                     (rule "inEqSimp_homoInEq1" (formula "3"))
                     (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                     (rule "mul_literals" (formula "3") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "3") (term "0"))
                     (rule "polySimp_addComm0" (formula "3") (term "0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                     (rule "add_literals" (formula "3") (term "1,1,0"))
                     (rule "times_zero_1" (formula "3") (term "1,0"))
                     (rule "add_zero_right" (formula "3") (term "0"))
                     (rule "leq_literals" (formula "3"))
                     (rule "closeFalse" (formula "3"))
                  )
                  (branch "CUT: b.length ≤ a.length FALSE"
                     (builtin "One Step Simplification" (formula "24"))
                     (rule "false_right" (formula "24"))
                     (rule "replace_known_right" (formula "17") (term "0") (ifseqformula "23"))
                     (builtin "One Step Simplification" (formula "17"))
                     (rule "notLeft" (formula "17"))
                     (rule "inEqSimp_leqRight" (formula "23"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1"))
                     (rule "polySimp_rightDist" (formula "1") (term "1"))
                     (rule "mul_literals" (formula "1") (term "0,1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                     (rule "replace_known_left" (formula "18") (term "0") (ifseqformula "1"))
                     (builtin "One Step Simplification" (formula "18"))
                     (rule "andLeft" (formula "18"))
                     (rule "notLeft" (formula "19"))
                     (rule "replace_known_right" (formula "21") (term "0,1,1") (ifseqformula "22"))
                     (builtin "One Step Simplification" (formula "21"))
                     (rule "applyEq" (formula "20") (term "0,1") (ifseqformula "18"))
                     (rule "eqSymm" (formula "20") (term "1"))
                     (rule "replace_known_right" (formula "20") (term "1") (ifseqformula "24"))
                     (builtin "One Step Simplification" (formula "20"))
                     (rule "notLeft" (formula "20"))
                     (rule "replace_known_right" (formula "25") (term "1") (ifseqformula "21"))
                     (builtin "One Step Simplification" (formula "25"))
                     (rule "false_right" (formula "25"))
                     (rule "inEqSimp_geqRight" (formula "21"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "applyEq" (formula "21") (term "1,1,0") (ifseqformula "19"))
                     (rule "applyEq" (formula "2") (term "1,1") (ifseqformula "19"))
                     (rule "applyEq" (formula "1") (term "0,1,0,0") (ifseqformula "19"))
                     (rule "applyEq" (formula "22") (term "1") (ifseqformula "19"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1"))
                     (rule "polySimp_rightDist" (formula "1") (term "1"))
                     (rule "mul_literals" (formula "1") (term "0,1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                     (rule "replace_known_left" (formula "21") (term "0") (ifseqformula "1"))
                     (builtin "One Step Simplification" (formula "21"))
                     (rule "applyEq" (formula "22") (term "0") (ifseqformula "21"))
                     (rule "applyEq" (formula "1") (term "0") (ifseqformula "21"))
                     (rule "applyEq" (formula "2") (term "0") (ifseqformula "21"))
                     (rule "inEqSimp_contradEq3" (formula "22") (ifseqformula "1"))
                     (rule "polySimp_mulComm0" (formula "22") (term "1,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "22") (term "0,0"))
                     (rule "add_literals" (formula "22") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "22") (term "1,0,0"))
                     (rule "add_zero_right" (formula "22") (term "0,0"))
                     (rule "qeq_literals" (formula "22") (term "0"))
                     (builtin "One Step Simplification" (formula "22"))
                     (rule "false_right" (formula "22"))
                     (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "1"))
                     (rule "andLeft" (formula "2"))
                     (rule "inEqSimp_homoInEq1" (formula "2"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                     (rule "mul_literals" (formula "2") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "2") (term "0"))
                     (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                     (rule "add_literals" (formula "2") (term "0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                     (rule "add_literals" (formula "2") (term "1,1,0"))
                     (rule "times_zero_1" (formula "2") (term "1,0"))
                     (rule "add_zero_right" (formula "2") (term "0"))
                     (rule "leq_literals" (formula "2"))
                     (rule "closeFalse" (formula "2"))
                  )
               )
            )
            (branch "Exceptional Post (min)"
               (builtin "One Step Simplification" (formula "15"))
               (builtin "One Step Simplification" (formula "16"))
               (rule "replaceKnownQuery_verif_selectvoting_system_core_Utils_min(heap,length(a),length(b))_0010_3" (formula "19") (term "1,1,0,0"))
               (rule "replaceKnownQuery_verif_selectvoting_system_core_Utils_min(heap,length(a),length(b))_0010_3" (formula "20") (term "1,1,0,0,0"))
               (rule "andLeft" (formula "15"))
               (rule "andLeft" (formula "15"))
               (rule "andLeft" (formula "17"))
               (rule "notLeft" (formula "15"))
               (rule "close" (formula "18") (ifseqformula "17"))
            )
            (branch "Pre (min)"
               (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "4")))
               (rule "closeTrue" (formula "15"))
            )
         )
         (branch "Exceptional Post (min)"
            (builtin "One Step Simplification" (formula "11"))
            (builtin "One Step Simplification" (formula "12"))
            (rule "replaceKnownQuery_verif_selectvoting_system_core_Utils_min(heap,length(b),length(a))_010_2" (formula "13") (term "1,1,0,0"))
            (rule "replaceKnownQuery_verif_selectvoting_system_core_Utils_min(heap,length(b),length(a))_010_2" (formula "14") (term "1,1,0,0,0"))
            (rule "andLeft" (formula "11"))
            (rule "andLeft" (formula "11"))
            (rule "andLeft" (formula "13"))
            (rule "notLeft" (formula "11"))
            (rule "close" (formula "14") (ifseqformula "13"))
         )
         (branch "Pre (min)"
            (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "3")))
            (rule "closeTrue" (formula "11"))
         )
      )
      (branch "Exceptional Post (compare)"
         (builtin "One Step Simplification" (formula "9"))
         (builtin "One Step Simplification" (formula "10"))
         (rule "replaceKnownQuery_verif_selectvoting_system_core_Utils_compare(heap,b,a)_10_1" (formula "16") (term "0"))
         (rule "andLeft" (formula "9"))
         (rule "andLeft" (formula "10"))
         (rule "andLeft" (formula "9"))
         (rule "notLeft" (formula "9"))
         (rule "close" (formula "12") (ifseqformula "11"))
      )
      (branch "Pre (compare)"
         (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "14")) (ifInst ""  (formula "13")) (ifInst ""  (formula "2")) (ifInst ""  (formula "14")) (ifInst ""  (formula "13")))
         (rule "replaceKnownQuery_verif_selectvoting_system_core_Utils_compare(heap,b,a)_10_1" (formula "15") (term "0"))
         (rule "eqSymm" (formula "10") (term "1,0,1,1,0"))
         (rule "eqSymm" (formula "11") (term "1,0,0"))
         (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "14"))
         (builtin "One Step Simplification" (formula "5"))
         (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "13"))
         (builtin "One Step Simplification" (formula "4"))
         (rule "replace_known_left" (formula "9") (term "0") (ifseqformula "5"))
         (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "4")))
         (rule "closeTrue" (formula "9"))
      )
   )
)
(branch "Exceptional Post (compare)"
   (builtin "One Step Simplification" (formula "7"))
   (builtin "One Step Simplification" (formula "8"))
   (rule "replaceKnownQuery_verif_selectvoting_system_core_Utils_compare(heap,a,b)__0" (formula "6") (term "0"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "9"))
   (rule "notLeft" (formula "7"))
   (rule "close" (formula "10") (ifseqformula "9"))
)
(branch "Pre (compare)"
   (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "8")) (ifInst ""  (formula "9")) (ifInst ""  (formula "1")) (ifInst ""  (formula "8")) (ifInst ""  (formula "9")))
   (rule "replaceKnownQuery_verif_selectvoting_system_core_Utils_compare(heap,a,b)__0" (formula "6") (term "0"))
   (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "9"))
   (builtin "One Step Simplification" (formula "4"))
   (rule "replace_known_right" (formula "3") (term "0") (ifseqformula "8"))
   (builtin "One Step Simplification" (formula "3"))
   (rule "replace_known_left" (formula "7") (term "1") (ifseqformula "4"))
   (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "3")))
   (rule "closeTrue" (formula "7"))
)
)

}
