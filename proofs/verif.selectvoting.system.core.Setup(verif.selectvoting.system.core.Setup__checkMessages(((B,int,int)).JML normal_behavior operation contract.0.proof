\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Mon Mar 21 17:12:52 CET 2016
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=80000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:allow , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\javaSource "../src";

\proofObligation "#Proof Obligation Settings
#Mon Mar 21 17:12:52 CET 2016
name=verif.selectvoting.system.core.Setup[verif.selectvoting.system.core.Setup\\:\\:checkMessages([[B,int,int)].JML normal_behavior operation contract.0
contract=verif.selectvoting.system.core.Setup[verif.selectvoting.system.core.Setup\\:\\:checkMessages([[B,int,int)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "mihai" ) (keyVersion "6bc7ade97061383f11985e24decf735b7f2f0af2"))

(autoModeTime "848")

(branch "dummy ID"
(builtin "One Step Simplification" (formula "1") (newnames "msg,numberOfMessages,lengthOfMessages,exc,heapAtPre,o,f"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "3"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "eqSymm" (formula "7") (term "0,0,1,0,1"))
(rule "replace_known_right" (formula "2") (term "0") (ifseqformula "6"))
(builtin "One Step Simplification" (formula "2"))
(rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,0"))
(rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0"))
(rule "assignment" (formula "7") (term "1"))
(builtin "One Step Simplification" (formula "7"))
(rule "applyEq" (formula "5") (term "0,1,0,0,1,0,0") (ifseqformula "4"))
(rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "5") (term "1,1,0,0"))
(rule "polySimp_rightDist" (formula "5") (term "1,1,0,0"))
(rule "mul_literals" (formula "5") (term "0,1,1,0,0"))
(rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,0"))
(rule "polySimp_elimOne" (formula "5") (term "1,1,1,0,0"))
(rule "nnf_imp2or" (formula "5") (term "0"))
(rule "nnf_notAnd" (formula "5") (term "0,0"))
(rule "inEqSimp_notGeq" (formula "5") (term "0,0,0"))
(rule "times_zero_1" (formula "5") (term "1,0,0,0,0,0"))
(rule "add_zero_right" (formula "5") (term "0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0"))
(rule "mul_literals" (formula "5") (term "1,0,0,0"))
(rule "inEqSimp_notLeq" (formula "5") (term "1,0,0"))
(rule "polySimp_rightDist" (formula "5") (term "1,0,0,1,0,0"))
(rule "mul_literals" (formula "5") (term "0,1,0,0,1,0,0"))
(rule "polySimp_addAssoc" (formula "5") (term "0,0,1,0,0"))
(rule "add_literals" (formula "5") (term "0,0,0,1,0,0"))
(rule "add_zero_left" (formula "5") (term "0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "5") (term "1,0,0"))
(rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0"))
(rule "polySimp_elimOne" (formula "5") (term "1,1,0,0"))
(rule "cnf_rightDist" (formula "5") (term "0"))
(rule "distr_forallAnd" (formula "5"))
(rule "andLeft" (formula "5"))
(rule "commute_or_2" (formula "5") (term "0"))
(rule "commute_or" (formula "6") (term "0"))
(rule "commute_or" (formula "5") (term "0,0"))
(rule "methodBodyExpand" (formula "8") (term "1") (newnames "heapBefore_checkMessages,savedHeapBefore_checkMessages,_lengthOfMessagesBefore_checkMessages,_msgBefore_checkMessages,_numberOfMessagesBefore_checkMessages"))
(builtin "One Step Simplification" (formula "8"))
(rule "ifUnfold" (formula "8") (term "1") (inst "#boolv=x"))
(rule "variableDeclaration" (formula "8") (term "1") (newnames "x"))
(rule "compound_assignment_5_nonsimple" (formula "8") (term "1"))
(rule "ifElseUnfold" (formula "8") (term "1") (inst "#boolv=x_1"))
(rule "variableDeclaration" (formula "8") (term "1") (newnames "x_1"))
(rule "equality_comparison_simple" (formula "8") (term "1"))
(builtin "One Step Simplification" (formula "8"))
(rule "replace_known_right" (formula "8") (term "0,0,1,0") (ifseqformula "7"))
(builtin "One Step Simplification" (formula "8"))
(rule "ifElseSplit" (formula "8"))
(branch "if x_1 true"
   (builtin "One Step Simplification" (formula "9"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "closeFalse" (formula "1"))
)
(branch "if x_1 false"
   (builtin "One Step Simplification" (formula "9"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "true_left" (formula "1"))
   (rule "compound_inequality_comparison_1" (formula "8") (term "1") (inst "#v0=x_1"))
   (rule "variableDeclarationAssign" (formula "8") (term "1"))
   (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_2"))
   (rule "assignment_read_length" (formula "8") (term "1"))
   (branch "Normal Execution (_msg != null)"
      (builtin "One Step Simplification" (formula "9"))
      (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "7")))
      (rule "false_right" (formula "8"))
      (rule "applyEq" (formula "8") (term "0,1,0") (ifseqformula "4"))
      (rule "inequality_comparison_simple" (formula "8") (term "1"))
      (builtin "One Step Simplification" (formula "8"))
      (rule "blockEmpty" (formula "8") (term "1"))
      (rule "arrayLengthIsAShort" (formula "4") (term "0"))
      (builtin "One Step Simplification" (formula "4"))
      (rule "true_left" (formula "4"))
      (rule "arrayLengthNotNegative" (formula "4") (term "0"))
      (rule "applyEq" (formula "4") (term "0") (ifseqformula "5"))
      (rule "ifSplit" (formula "9"))
      (branch "if x true"
         (builtin "One Step Simplification" (formula "10"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "closeFalse" (formula "1"))
      )
      (branch "if x false"
         (builtin "One Step Simplification" (formula "10"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "true_left" (formula "1"))
         (rule "for_to_while" (formula "9") (term "1") (inst "#outerLabel=_label1") (inst "#innerLabel=_label0"))
         (rule "variableDeclarationAssign" (formula "9") (term "1"))
         (rule "variableDeclaration" (formula "9") (term "1") (newnames "i"))
         (rule "assignment" (formula "9") (term "1"))
         (builtin "One Step Simplification" (formula "9"))
         (builtin "Loop Invariant" (formula "9") (newnames "variant,b,heapBefore_LOOP,iBefore_LOOP,i_0,heap_After_LOOP,anon_heap_LOOP,o,f"))
         (branch "Invariant Initially Valid"
            (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "1")))
            (rule "leq_literals" (formula "9") (term "0,0,0"))
            (builtin "One Step Simplification" (formula "9"))
            (rule "eqSymm" (formula "9") (term "1,0"))
            (rule "replace_known_left" (formula "9") (term "1,0") (ifseqformula "5"))
            (builtin "One Step Simplification" (formula "9"))
            (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0,1"))
            (rule "times_zero_1" (formula "9") (term "1,0,0,1,0,0,1"))
            (rule "add_zero_right" (formula "9") (term "0,0,1,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "9") (term "0"))
            (rule "replace_known_left" (formula "9") (term "0") (ifseqformula "4"))
            (builtin "One Step Simplification" (formula "9"))
            (rule "allRight" (formula "9") (inst "sk=j_1"))
            (rule "impRight" (formula "9"))
            (rule "andLeft" (formula "1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "2"))
            (rule "mul_literals" (formula "2") (term "1"))
            (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "2"))
            (rule "qeq_literals" (formula "1") (term "0"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
         (branch "Body Preserves Invariant"
            (builtin "One Step Simplification" (formula "11"))
            (builtin "One Step Simplification" (formula "9"))
            (rule "translateJavaSubInt" (formula "11") (term "0,1,1,1,0,1,1"))
            (rule "translateJavaSubInt" (formula "11") (term "0,1,1,1,0,1"))
            (rule "andLeft" (formula "9"))
            (rule "impRight" (formula "12"))
            (rule "andLeft" (formula "10"))
            (rule "andLeft" (formula "10"))
            (rule "eqSymm" (formula "15") (term "0,0,1,0,1,1,0,1"))
            (rule "eqSymm" (formula "15") (term "1,0,0,0,1,1,0,1"))
            (rule "eqSymm" (formula "12"))
            (rule "polySimp_elimSub" (formula "14") (term "0,1,1,1,0,1"))
            (rule "polySimp_elimSub" (formula "14") (term "0,1,1,1,0"))
            (rule "polySimp_addComm0" (formula "14") (term "0,1,1,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0,1,0,0,1,1,0,1"))
            (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0,1,0,0,1,1,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0,1,0,0,1,1,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0,0,0,1,1,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "10"))
            (rule "inEqSimp_commuteLeq" (formula "11"))
            (rule "variableDeclarationAssign" (formula "1") (term "1"))
            (rule "variableDeclarationAssign" (formula "14") (term "1"))
            (rule "variableDeclaration" (formula "1") (term "1") (newnames "b_2"))
            (rule "variableDeclaration" (formula "14") (term "1") (newnames "exc_1"))
            (rule "assignment" (formula "14") (term "1"))
            (builtin "One Step Simplification" (formula "14"))
            (rule "variableDeclaration" (formula "14") (term "1") (newnames "thrownExc"))
            (rule "blockThrow" (formula "14") (term "1,0,0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
            (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,1,0,0,1,1,0,1"))
            (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0,1,0,0,1,1,0,1"))
            (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0,1,0,0,1,1,0,1"))
            (rule "mul_literals" (formula "14") (term "0,1,1,0,0,1,0,0,1,1,0,1"))
            (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0,1,0,0,1,1,0,1"))
            (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0,1,0,0,1,1,0,1"))
            (rule "boxToDiamond" (formula "1") (term "1"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "notLeft" (formula "1"))
            (rule "nnf_imp2or" (formula "11") (term "0"))
            (rule "nnf_notAnd" (formula "11") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
            (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "11") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
            (rule "mul_literals" (formula "11") (term "1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "11") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
            (rule "nnf_imp2or" (formula "14") (term "0,1,0,0,1,1,0,1"))
            (rule "nnf_notAnd" (formula "14") (term "0,0,1,0,0,1,1,0,1"))
            (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0,1,0,0,1,1,0,1"))
            (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0,1,0,0,1,1,0,1"))
            (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0,1,0,0,1,1,0,1"))
            (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0,1,0,0,1,1,0,1"))
            (rule "add_literals" (formula "14") (term "0,0,0,1,0,0,1,0,0,1,1,0,1"))
            (rule "add_zero_left" (formula "14") (term "0,0,1,0,0,1,0,0,1,1,0,1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0,1,0,0,1,1,0,1"))
            (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,1,0,0,1,1,0,1"))
            (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,1,0,0,1,1,0,1"))
            (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0,1,0,0,1,1,0,1"))
            (rule "times_zero_1" (formula "14") (term "1,0,0,0,0,0,1,0,0,1,1,0,1"))
            (rule "add_literals" (formula "14") (term "0,0,0,0,0,1,0,0,1,1,0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,1,0,0,1,1,0,1"))
            (rule "mul_literals" (formula "14") (term "1,0,0,0,1,0,0,1,1,0,1"))
            (rule "cnf_rightDist" (formula "11") (term "0"))
            (rule "distr_forallAnd" (formula "11"))
            (rule "andLeft" (formula "11"))
            (rule "commute_or" (formula "12") (term "0"))
            (rule "commute_or_2" (formula "11") (term "0"))
            (rule "commute_or" (formula "11") (term "0,0"))
            (rule "less_than_comparison_simple" (formula "13") (term "1"))
            (builtin "One Step Simplification" (formula "13"))
            (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0"))
            (rule "polySimp_addComm1" (formula "13") (term "0,0,0,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,0,0"))
            (rule "polySimp_mulLiterals" (formula "13") (term "0,0,0,0"))
            (rule "polySimp_elimOne" (formula "13") (term "0,0,0,0"))
            (rule "methodCallEmpty" (formula "13") (term "1"))
            (rule "emptyModality" (formula "13") (term "1"))
            (builtin "One Step Simplification" (formula "13"))
            (rule "notRight" (formula "13"))
            (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "1"))
            (rule "inEqSimp_homoInEq0" (formula "11") (term "0"))
            (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0"))
            (rule "add_literals" (formula "11") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "11") (term "1,0,0"))
            (rule "add_zero_right" (formula "11") (term "0,0"))
            (rule "qeq_literals" (formula "11") (term "0"))
            (builtin "One Step Simplification" (formula "11"))
            (rule "true_left" (formula "11"))
            (rule "ifUnfold" (formula "14") (term "1") (inst "#boolv=x"))
            (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_3"))
            (rule "less_than_comparison_simple" (formula "14") (term "1"))
            (builtin "One Step Simplification" (formula "14"))
            (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,1,0"))
            (rule "polySimp_addComm1" (formula "14") (term "0,0,0,1,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "14") (term "0,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "14") (term "0,0,0,1,0"))
            (rule "replace_known_left" (formula "14") (term "0,0,1,0") (ifseqformula "1"))
            (builtin "One Step Simplification" (formula "14"))
            (rule "ifSplit" (formula "14"))
            (branch "if x_3 true"
               (builtin "One Step Simplification" (formula "15"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "ifUnfold" (formula "14") (term "1") (inst "#boolv=x"))
               (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_4"))
               (rule "compound_equality_comparison_1" (formula "14") (term "1") (inst "#v0=x_arr"))
               (rule "variableDeclarationAssign" (formula "14") (term "1"))
               (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_arr"))
               (rule "assignment_array2" (formula "14") (term "1"))
               (branch "Normal Execution (_msg != null)"
                  (builtin "One Step Simplification" (formula "15"))
                  (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "13")))
                  (rule "orRight" (formula "14"))
                  (rule "inEqSimp_ltRight" (formula "15"))
                  (rule "times_zero_1" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "inEqSimp_leqRight" (formula "14"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "7"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1"))
                  (rule "polySimp_rightDist" (formula "1") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                  (rule "mul_literals" (formula "1") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                  (rule "equality_comparison_simple" (formula "14") (term "1"))
                  (builtin "One Step Simplification" (formula "14"))
                  (rule "ifSplit" (formula "14"))
                  (branch "if x_4 true"
                     (builtin "One Step Simplification" (formula "15"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "blockThrow" (formula "15") (term "1"))
                     (rule "blockThrow" (formula "15") (term "1"))
                     (rule "throwUnfold" (formula "15") (term "1") (inst "#v0=t"))
                     (rule "variableDeclarationAssign" (formula "15") (term "1"))
                     (rule "variableDeclaration" (formula "15") (term "1") (newnames "t"))
                     (builtin "Use Operation Contract" (formula "15") (newnames "heapBefore_Throwable,self,exc_0,heapAfter_Throwable,anon_heap_Throwable") (contract "java.lang.Throwable[java.lang.Throwable::Throwable()].JML normal_behavior operation contract.0"))
                     (branch "Post (Throwable)"
                        (builtin "One Step Simplification" (formula "15"))
                        (builtin "One Step Simplification" (formula "17"))
                        (rule "andLeft" (formula "15"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "16") (term "1,1,0,1,0") (ifseqformula "15"))
                        (rule "andLeft" (formula "16"))
                        (rule "andLeft" (formula "16"))
                        (rule "andLeft" (formula "18"))
                        (rule "andLeft" (formula "17"))
                        (rule "andLeft" (formula "19"))
                        (rule "andLeft" (formula "17"))
                        (rule "andLeft" (formula "20"))
                        (rule "andLeft" (formula "18"))
                        (rule "notLeft" (formula "17"))
                        (rule "notLeft" (formula "17"))
                        (rule "replace_known_right" (formula "17") (term "0") (ifseqformula "22"))
                        (builtin "One Step Simplification" (formula "17"))
                        (rule "assignment" (formula "25") (term "1"))
                        (builtin "One Step Simplification" (formula "25"))
                        (rule "pullOutSelect" (formula "19") (term "0") (inst "selectSK=java_lang_Throwable_message_0"))
                        (rule "simplifySelectOfAnonEQ" (formula "19") (ifseqformula "15"))
                        (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "24")) (ifInst ""  (formula "23")))
                        (rule "applyEqReverse" (formula "20") (term "0") (ifseqformula "19"))
                        (rule "hideAuxiliaryEq" (formula "19"))
                        (rule "pullOutSelect" (formula "20") (term "0") (inst "selectSK=java_lang_Throwable_cause_0"))
                        (rule "simplifySelectOfAnonEQ" (formula "20") (ifseqformula "15"))
                        (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "24")) (ifInst ""  (formula "23")))
                        (rule "applyEqReverse" (formula "21") (term "0") (ifseqformula "20"))
                        (rule "hideAuxiliaryEq" (formula "20"))
                        (rule "commuteUnion" (formula "15") (term "1,0"))
                        (rule "tryCatchThrow" (formula "25") (term "1"))
                        (rule "ifElseUnfold" (formula "25") (term "1") (inst "#boolv=x"))
                        (rule "variableDeclaration" (formula "25") (term "1") (newnames "x_8"))
                        (rule "equality_comparison_simple" (formula "25") (term "1"))
                        (builtin "One Step Simplification" (formula "25"))
                        (rule "replace_known_right" (formula "25") (term "0,0,1,0") (ifseqformula "23"))
                        (builtin "One Step Simplification" (formula "25"))
                        (rule "allLeft" (formula "8") (inst "t=i_0"))
                        (rule "replace_known_left" (formula "8") (term "0,0,0") (ifseqformula "1"))
                        (builtin "One Step Simplification" (formula "8"))
                        (rule "inEqSimp_commuteGeq" (formula "8") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "8") (term "1") (ifseqformula "2"))
                        (rule "inEqSimp_homoInEq1" (formula "8") (term "0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0,1"))
                        (rule "add_literals" (formula "8") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "8") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "8") (term "0,0,1"))
                        (rule "leq_literals" (formula "8") (term "0,1"))
                        (builtin "One Step Simplification" (formula "8"))
                        (rule "inEqSimp_contradInEq0" (formula "12") (ifseqformula "8"))
                        (rule "qeq_literals" (formula "12") (term "0"))
                        (builtin "One Step Simplification" (formula "12"))
                        (rule "closeFalse" (formula "12"))
                     )
                     (branch "Exceptional Post (Throwable)"
                        (builtin "One Step Simplification" (formula "17"))
                        (builtin "One Step Simplification" (formula "15"))
                        (rule "andLeft" (formula "15"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "16") (term "1,0,0") (ifseqformula "15"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "16") (term "1,1,0,1,0") (ifseqformula "15"))
                        (rule "andLeft" (formula "16"))
                        (rule "andLeft" (formula "16"))
                        (rule "andLeft" (formula "18"))
                        (rule "andLeft" (formula "17"))
                        (rule "andLeft" (formula "16"))
                        (rule "andLeft" (formula "20"))
                        (rule "andLeft" (formula "18"))
                        (rule "notLeft" (formula "16"))
                        (rule "close" (formula "23") (ifseqformula "22"))
                     )
                     (branch "Pre (Throwable)"
                        (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "3")))
                        (rule "closeTrue" (formula "15"))
                     )
                  )
                  (branch "if x_4 false"
                     (builtin "One Step Simplification" (formula "15"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "notLeft" (formula "1"))
                     (rule "ifUnfold" (formula "15") (term "1") (inst "#boolv=x"))
                     (rule "variableDeclaration" (formula "15") (term "1") (newnames "x_5"))
                     (rule "compound_inequality_comparison_1" (formula "15") (term "1") (inst "#v0=x_6"))
                     (rule "variableDeclarationAssign" (formula "15") (term "1"))
                     (rule "variableDeclaration" (formula "15") (term "1") (newnames "x_6"))
                     (rule "eval_order_array_access6" (formula "15") (term "1") (inst "#v0=x_arr"))
                     (rule "variableDeclarationAssign" (formula "15") (term "1"))
                     (rule "variableDeclaration" (formula "15") (term "1") (newnames "x_arr_1"))
                     (rule "assignment_array2" (formula "15") (term "1"))
                     (branch "Normal Execution (_msg != null)"
                        (builtin "One Step Simplification" (formula "16"))
                        (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "14")))
                        (rule "orRight" (formula "15"))
                        (rule "inEqSimp_ltRight" (formula "16"))
                        (rule "times_zero_1" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_leqRight" (formula "15"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "assignment_read_length" (formula "16") (term "1"))
                        (branch "Normal Execution (x_arr_1 != null)"
                           (builtin "One Step Simplification" (formula "17"))
                           (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "14")))
                           (rule "false_right" (formula "16"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1"))
                           (rule "polySimp_rightDist" (formula "1") (term "1"))
                           (rule "mul_literals" (formula "1") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                           (rule "applyEq" (formula "1") (term "0") (ifseqformula "7"))
                           (rule "inequality_comparison_simple" (formula "15") (term "1"))
                           (builtin "One Step Simplification" (formula "15"))
                           (rule "allLeft" (formula "8") (inst "t=i_0"))
                           (rule "inEqSimp_commuteGeq" (formula "8") (term "1,0"))
                           (rule "inEqSimp_contradInEq1" (formula "8") (term "0,0") (ifseqformula "11"))
                           (rule "qeq_literals" (formula "8") (term "0,0,0"))
                           (builtin "One Step Simplification" (formula "8"))
                           (rule "inEqSimp_contradInEq1" (formula "8") (term "0") (ifseqformula "1"))
                           (rule "inEqSimp_homoInEq1" (formula "8") (term "0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0,0"))
                           (rule "add_literals" (formula "8") (term "1,1,0,0,0"))
                           (rule "times_zero_1" (formula "8") (term "1,0,0,0"))
                           (rule "add_literals" (formula "8") (term "0,0,0"))
                           (rule "leq_literals" (formula "8") (term "0,0"))
                           (builtin "One Step Simplification" (formula "8"))
                           (rule "replace_known_left" (formula "16") (term "0,0,1,0") (ifseqformula "8"))
                           (builtin "One Step Simplification" (formula "16"))
                           (rule "ifSplit" (formula "16"))
                           (branch "if x_5 true"
                              (builtin "One Step Simplification" (formula "17"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "closeFalse" (formula "1"))
                           )
                           (branch "if x_5 false"
                              (builtin "One Step Simplification" (formula "17"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "true_left" (formula "1"))
                              (rule "blockEmpty" (formula "16") (term "1"))
                              (rule "preincrement" (formula "16") (term "1"))
                              (rule "compound_int_cast_expression" (formula "16") (term "1") (inst "#v=x"))
                              (rule "variableDeclarationAssign" (formula "16") (term "1"))
                              (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_7"))
                              (rule "remove_parentheses_right" (formula "16") (term "1"))
                              (rule "assignmentAdditionInt" (formula "16") (term "1"))
                              (builtin "One Step Simplification" (formula "16"))
                              (rule "translateJavaAddInt" (formula "16") (term "0,1,0"))
                              (rule "polySimp_addComm0" (formula "16") (term "0,1,0"))
                              (rule "widening_identity_cast_5" (formula "16") (term "1"))
                              (rule "assignment" (formula "16") (term "1"))
                              (builtin "One Step Simplification" (formula "16"))
                              (rule "tryEmpty" (formula "16") (term "1"))
                              (rule "methodCallEmpty" (formula "16") (term "1"))
                              (rule "emptyModality" (formula "16") (term "1"))
                              (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "6")))
                              (rule "polySimp_mulComm0" (formula "16") (term "1,0,1"))
                              (rule "polySimp_rightDist" (formula "16") (term "1,0,1"))
                              (rule "mul_literals" (formula "16") (term "0,1,0,1"))
                              (rule "polySimp_addComm0" (formula "16") (term "0,1"))
                              (rule "precOfInt" (formula "16") (term "1"))
                              (rule "inEqSimp_ltToLeq" (formula "16") (term "1,1"))
                              (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,1"))
                              (rule "polySimp_mulAssoc" (formula "16") (term "0,1,0,0,1,1"))
                              (rule "polySimp_mulComm0" (formula "16") (term "0,0,1,0,0,1,1"))
                              (rule "polySimp_mulLiterals" (formula "16") (term "0,1,0,0,1,1"))
                              (rule "polySimp_elimOne" (formula "16") (term "0,1,0,0,1,1"))
                              (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,1"))
                              (rule "polySimp_addAssoc" (formula "16") (term "0,1,1"))
                              (rule "polySimp_addComm1" (formula "16") (term "0,0,1,1"))
                              (rule "polySimp_pullOutFactor2b" (formula "16") (term "0,1,1"))
                              (rule "add_literals" (formula "16") (term "1,1,0,1,1"))
                              (rule "times_zero_1" (formula "16") (term "1,0,1,1"))
                              (rule "add_zero_right" (formula "16") (term "0,1,1"))
                              (rule "polySimp_addAssoc" (formula "16") (term "0,1,1"))
                              (rule "polySimp_addComm1" (formula "16") (term "0,0,1,1"))
                              (rule "add_literals" (formula "16") (term "0,0,0,1,1"))
                              (rule "add_zero_left" (formula "16") (term "0,0,1,1"))
                              (rule "polySimp_pullOutFactor1" (formula "16") (term "0,1,1"))
                              (rule "add_literals" (formula "16") (term "1,0,1,1"))
                              (rule "times_zero_1" (formula "16") (term "0,1,1"))
                              (rule "leq_literals" (formula "16") (term "1,1"))
                              (builtin "One Step Simplification" (formula "16"))
                              (rule "inEqSimp_commuteLeq" (formula "16") (term "1,0,0"))
                              (rule "replace_known_left" (formula "16") (term "1,0,0") (ifseqformula "1"))
                              (builtin "One Step Simplification" (formula "16"))
                              (rule "inEqSimp_homoInEq0" (formula "16") (term "1"))
                              (rule "times_zero_2" (formula "16") (term "1,0,1"))
                              (rule "add_zero_right" (formula "16") (term "0,1"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "0,0"))
                              (rule "mul_literals" (formula "16") (term "1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1"))
                              (rule "polySimp_mulComm0" (formula "16") (term "1,1"))
                              (rule "polySimp_rightDist" (formula "16") (term "1,1"))
                              (rule "mul_literals" (formula "16") (term "0,1,1"))
                              (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1"))
                              (rule "polySimp_elimOne" (formula "16") (term "1,1,1"))
                              (rule "replace_known_left" (formula "16") (term "1") (ifseqformula "1"))
                              (builtin "One Step Simplification" (formula "16"))
                              (rule "inEqSimp_subsumption1" (formula "16") (term "0") (ifseqformula "11"))
                              (rule "leq_literals" (formula "16") (term "0,0"))
                              (builtin "One Step Simplification" (formula "16"))
                              (rule "allRight" (formula "16") (inst "sk=j_0"))
                              (rule "orRight" (formula "16"))
                              (rule "orRight" (formula "16"))
                              (rule "inEqSimp_leqRight" (formula "16"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "inEqSimp_geqRight" (formula "17"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0"))
                              (rule "add_zero_left" (formula "1") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                              (rule "polySimp_elimOne" (formula "1") (term "1"))
                              (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "1"))
                              (rule "times_zero_1" (formula "2") (term "0,0"))
                              (rule "add_zero_left" (formula "2") (term "0"))
                              (rule "arrayLengthNotNegative" (formula "10") (term "0"))
                              (rule "applyEq" (formula "10") (term "0") (ifseqformula "11"))
                              (rule "arrayLengthIsAShort" (formula "11") (term "0"))
                              (builtin "One Step Simplification" (formula "11"))
                              (rule "true_left" (formula "11"))
                              (rule "cut_direct" (formula "19") (term "0,0"))
                              (branch "CUT: msg[j_0] = null TRUE"
                                 (builtin "One Step Simplification" (formula "20"))
                                 (rule "false_right" (formula "20"))
                                 (rule "allLeft" (formula "10") (inst "t=j_0"))
                                 (rule "replace_known_left" (formula "10") (term "0,0,0") (ifseqformula "1"))
                                 (builtin "One Step Simplification" (formula "10"))
                                 (rule "inEqSimp_commuteGeq" (formula "10") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "10") (term "0") (ifseqformula "3"))
                                 (rule "qeq_literals" (formula "10") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "10"))
                                 (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "10"))
                                 (rule "times_zero_1" (formula "8") (term "0,0"))
                                 (rule "add_zero_left" (formula "8") (term "0"))
                                 (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "10"))
                                 (rule "polySimp_rightDist" (formula "4") (term "0,0"))
                                 (rule "mul_literals" (formula "4") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                                 (rule "polySimp_mulComm0" (formula "4") (term "1"))
                                 (rule "polySimp_rightDist" (formula "4") (term "1"))
                                 (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                                 (rule "mul_literals" (formula "4") (term "0,1"))
                                 (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                                 (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "4"))
                                 (rule "andLeft" (formula "2"))
                                 (rule "inEqSimp_homoInEq1" (formula "2"))
                                 (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                 (rule "add_literals" (formula "2") (term "1,1,0"))
                                 (rule "times_zero_1" (formula "2") (term "1,0"))
                                 (rule "add_zero_right" (formula "2") (term "0"))
                                 (rule "leq_literals" (formula "2"))
                                 (rule "closeFalse" (formula "2"))
                              )
                              (branch "CUT: msg[j_0] = null FALSE"
                                 (builtin "One Step Simplification" (formula "20"))
                                 (rule "allLeft" (formula "12") (inst "t=j_0"))
                                 (rule "replace_known_right" (formula "12") (term "1") (ifseqformula "21"))
                                 (builtin "One Step Simplification" (formula "12"))
                                 (rule "inEqSimp_commuteGeq" (formula "12") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "12") (term "0") (ifseqformula "2"))
                                 (rule "qeq_literals" (formula "12") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "12"))
                                 (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "12"))
                                 (rule "times_zero_1" (formula "7") (term "0,0"))
                                 (rule "add_zero_left" (formula "7") (term "0"))
                                 (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "12"))
                                 (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                                 (rule "mul_literals" (formula "3") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                                 (rule "polySimp_mulComm0" (formula "3") (term "1"))
                                 (rule "polySimp_rightDist" (formula "3") (term "1"))
                                 (rule "mul_literals" (formula "3") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                                 (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                                 (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "1"))
                                 (rule "andLeft" (formula "3"))
                                 (rule "inEqSimp_homoInEq1" (formula "3"))
                                 (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                                 (rule "add_literals" (formula "3") (term "1,1,0"))
                                 (rule "times_zero_1" (formula "3") (term "1,0"))
                                 (rule "add_literals" (formula "3") (term "0"))
                                 (rule "leq_literals" (formula "3"))
                                 (rule "closeFalse" (formula "3"))
                              )
                           )
                        )
                        (branch "Null Reference (x_arr_1 = null)"
                           (builtin "One Step Simplification" (formula "17"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "15")))
                           (rule "closeFalse" (formula "1"))
                        )
                     )
                     (branch "Null Reference (_msg = null)"
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "15")))
                        (rule "closeFalse" (formula "1"))
                     )
                     (branch "Index Out of Bounds (_msg != null, but i Out of Bounds!)"
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "15")))
                        (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                        (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                        (rule "add_literals" (formula "1") (term "0,0,1"))
                        (rule "applyEq" (formula "1") (term "0,0") (ifseqformula "7"))
                        (rule "blockThrow" (formula "16") (term "1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                        (rule "mul_literals" (formula "1") (term "1,1"))
                        (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "11"))
                        (rule "qeq_literals" (formula "1") (term "0,1"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "2"))
                        (rule "andLeft" (formula "1"))
                        (rule "inEqSimp_homoInEq1" (formula "1"))
                        (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                        (rule "add_literals" (formula "1") (term "1,1,0"))
                        (rule "times_zero_1" (formula "1") (term "1,0"))
                        (rule "add_literals" (formula "1") (term "0"))
                        (rule "leq_literals" (formula "1"))
                        (rule "closeFalse" (formula "1"))
                     )
                  )
               )
               (branch "Null Reference (_msg = null)"
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")))
                  (rule "closeFalse" (formula "1"))
               )
               (branch "Index Out of Bounds (_msg != null, but i Out of Bounds!)"
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")))
                  (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "1") (term "0,0,1"))
                  (rule "applyEq" (formula "1") (term "0,0") (ifseqformula "7"))
                  (rule "blockThrow" (formula "15") (term "1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                  (rule "mul_literals" (formula "1") (term "1,1"))
                  (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "2"))
                  (rule "inEqSimp_homoInEq1" (formula "1") (term "0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
                  (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                  (rule "add_zero_right" (formula "1") (term "0,0,0"))
                  (rule "leq_literals" (formula "1") (term "0,0"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "inEqSimp_contradInEq0" (formula "11") (ifseqformula "1"))
                  (rule "qeq_literals" (formula "11") (term "0"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "closeFalse" (formula "11"))
               )
            )
            (branch "if x_3 false"
               (builtin "One Step Simplification" (formula "15"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
         )
         (branch "Use Case"
            (builtin "One Step Simplification" (formula "11"))
            (builtin "One Step Simplification" (formula "9"))
            (rule "andLeft" (formula "9"))
            (rule "andLeft" (formula "9"))
            (rule "andLeft" (formula "9"))
            (rule "eqSymm" (formula "11"))
            (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "9"))
            (rule "inEqSimp_commuteLeq" (formula "10"))
            (rule "variableDeclarationAssign" (formula "13") (term "1"))
            (rule "variableDeclaration" (formula "13") (term "1") (newnames "b_1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
            (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
            (rule "nnf_imp2or" (formula "11") (term "0"))
            (rule "nnf_notAnd" (formula "11") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
            (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "11") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
            (rule "mul_literals" (formula "11") (term "1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "11") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
            (rule "cnf_rightDist" (formula "11") (term "0"))
            (rule "distr_forallAnd" (formula "11"))
            (rule "andLeft" (formula "11"))
            (rule "commute_or" (formula "12") (term "0"))
            (rule "commute_or_2" (formula "11") (term "0"))
            (rule "commute_or" (formula "11") (term "0,0"))
            (rule "less_than_comparison_simple" (formula "14") (term "1"))
            (builtin "One Step Simplification" (formula "14"))
            (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,1,0"))
            (rule "polySimp_addComm1" (formula "14") (term "0,0,0,1,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "14") (term "0,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "14") (term "0,0,0,1,0"))
            (rule "methodCallEmpty" (formula "14") (term "1"))
            (rule "emptyModality" (formula "14") (term "1"))
            (builtin "One Step Simplification" (formula "14"))
            (rule "impRight" (formula "14"))
            (rule "notLeft" (formula "1"))
            (rule "inEqSimp_geqRight" (formula "13"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
            (rule "mul_literals" (formula "1") (term "0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
            (rule "add_literals" (formula "1") (term "0,0,0"))
            (rule "add_zero_left" (formula "1") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1"))
            (rule "polySimp_elimOne" (formula "1") (term "1"))
            (rule "inEqSimp_antiSymm" (formula "11") (ifseqformula "1"))
            (rule "applyEq" (formula "8") (term "1,1,0,0") (ifseqformula "11"))
            (rule "applyEq" (formula "11") (term "0") (ifseqformula "10"))
            (rule "inEqSimp_homoInEq1" (formula "11"))
            (rule "polySimp_pullOutFactor1" (formula "11") (term "0"))
            (rule "add_literals" (formula "11") (term "1,0"))
            (rule "times_zero_1" (formula "11") (term "0"))
            (rule "leq_literals" (formula "11"))
            (rule "true_left" (formula "11"))
            (rule "applyEq" (formula "1") (term "0") (ifseqformula "10"))
            (rule "inEqSimp_homoInEq0" (formula "1"))
            (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
            (rule "add_literals" (formula "1") (term "1,0"))
            (rule "times_zero_1" (formula "1") (term "0"))
            (rule "qeq_literals" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "applyEq" (formula "4") (term "0") (ifseqformula "9"))
            (rule "applyEq" (formula "5") (term "1,1,0") (ifseqformula "8"))
            (rule "applyEq" (formula "4") (term "1") (ifseqformula "7"))
            (rule "methodCallEmpty" (formula "11") (term "1"))
            (rule "tryEmpty" (formula "11") (term "1"))
            (rule "emptyModality" (formula "11") (term "1"))
            (builtin "One Step Simplification" (formula "11"))
            (rule "closeTrue" (formula "11"))
         )
      )
   )
   (branch "Null Reference (_msg = null)"
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")))
      (rule "closeFalse" (formula "1"))
   )
)
)

}
