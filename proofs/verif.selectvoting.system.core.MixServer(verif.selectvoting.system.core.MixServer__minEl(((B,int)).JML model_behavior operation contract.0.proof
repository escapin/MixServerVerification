\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Sat Mar 19 22:56:30 CET 2016
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=4000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:allow , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\javaSource "../src";

\proofObligation "#Proof Obligation Settings
#Sat Mar 19 22:56:30 CET 2016
name=verif.selectvoting.system.core.MixServer[verif.selectvoting.system.core.MixServer\\:\\:minEl([[B,int)].JML model_behavior operation contract.0
contract=verif.selectvoting.system.core.MixServer[verif.selectvoting.system.core.MixServer\\:\\:minEl([[B,int)].JML model_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "mihai" ) (keyVersion "6bc7ade97061383f11985e24decf735b7f2f0af2"))

(autoModeTime "7905")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "a,j,result,heapAtPre,heapBefore,heapAtPreBefore,o,f,o,f"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(builtin "One Step Simplification" (formula "10"))
(rule "andRight" (formula "10") (userinteraction))
(branch "Case 1"
   (rule "int_induction" (inst "b=   leq(j, x) & lt(x, length(a))
-> leq(verif.selectvoting.system.core.Utils::compare(heap,
                                                     byte[]::select(heap,
                                                                    a,
                                                                    arr(j)),
                                                     byte[]::select(heap,
                                                                    a,
                                                                    arr(x))),
       Z(0(#)))") (inst "nv=x") (userinteraction))
   (branch "Base Case"
      (rule "impRight" (formula "10") (userinteraction))
      (rule "cut" (inst "cutFormula=j = Z(0(#))") (userinteraction))
      (branch "CUT: j = 0 TRUE"
         (rule "applyEq" (formula "12") (term "0,2,1,0") (ifseqformula "1") (userinteraction))
         (rule "cut" (inst "cutFormula=  verif.selectvoting.system.core.MixServer::refl(heap,
                                                 heapAtPre,
                                                 byte[]::select(heap,
                                                                a,
                                                                arr(Z(0(#)))))
= TRUE") (userinteraction))
         (branch "CUT: verif.selectvoting.system.core.MixServer::refl(heap, heapAtPre, a[0]) = TRUE TRUE"
            (rule "Contract_axiom_for_refl_in_MixServer" (formula "1") (term "0") (userinteraction))
            (rule "impLeft" (formula "1") (userinteraction))
            (branch "Case 1"
               (builtin "One Step Simplification" (formula "11"))
               (builtin "One Step Simplification" (formula "7"))
               (rule "true_left" (formula "7"))
               (rule "translateJavaSubInt" (formula "10") (term "1,1,0,0"))
               (rule "translateJavaAddInt" (formula "10") (term "0,2,2,0,1,0"))
               (rule "andLeft" (formula "3"))
               (rule "allRight" (formula "15") (inst "sk=i_12"))
               (rule "impRight" (formula "15"))
               (rule "andLeft" (formula "1"))
               (rule "replace_known_left" (formula "15") (term "0,1") (ifseqformula "7"))
               (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "8")))
               (rule "notRight" (formula "15"))
               (rule "polySimp_elimSub" (formula "14") (term "1,1,0,0"))
               (rule "mul_literals" (formula "14") (term "1,1,1,0,0"))
               (rule "polySimp_addComm0" (formula "14") (term "0,2,2,0,1,0"))
               (rule "polySimp_addComm0" (formula "14") (term "1,1,0,0"))
               (rule "inEqSimp_leqRight" (formula "16"))
               (rule "times_zero_1" (formula "1") (term "1,0,0"))
               (rule "add_zero_right" (formula "1") (term "0,0"))
               (rule "inEqSimp_leqRight" (formula "17"))
               (rule "times_zero_1" (formula "1") (term "1,0,0"))
               (rule "add_zero_right" (formula "1") (term "0,0"))
               (rule "inEqSimp_ltToLeq" (formula "15"))
               (rule "polySimp_mulComm0" (formula "15") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "15") (term "0"))
               (rule "inEqSimp_ltToLeq" (formula "9"))
               (rule "add_zero_right" (formula "9") (term "0"))
               (rule "polySimp_mulComm0" (formula "9") (term "1,0"))
               (rule "inEqSimp_ltToLeq" (formula "5"))
               (rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "5") (term "0"))
               (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "16") (term "0,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "14"))
               (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
               (rule "applyEq" (formula "1") (term "0,2,1,1,0") (ifseqformula "7"))
               (rule "applyEq" (formula "8") (term "0") (ifseqformula "7"))
               (rule "leq_literals" (formula "8"))
               (rule "true_left" (formula "8"))
               (rule "applyEq" (formula "6") (term "2,0") (ifseqformula "3"))
               (rule "applyEq" (formula "4") (term "0") (ifseqformula "7"))
               (rule "inEqSimp_commuteLeq" (formula "4"))
               (rule "applyEq" (formula "13") (term "0") (ifseqformula "7"))
               (rule "qeq_literals" (formula "13"))
               (rule "true_left" (formula "13"))
               (rule "applyEq" (formula "2") (term "2,1,0") (ifseqformula "3"))
               (rule "applyEq" (formula "2") (term "1,1,0") (ifseqformula "3"))
               (rule "applyEq" (formula "13") (term "1,0,0") (ifseqformula "7"))
               (rule "add_zero_right" (formula "13") (term "0,0"))
               (rule "applyEq" (formula "1") (term "1,1,0") (ifseqformula "3"))
               (rule "inEqSimp_sepNegMonomial0" (formula "8"))
               (rule "polySimp_mulLiterals" (formula "8") (term "0"))
               (rule "polySimp_elimOne" (formula "8") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "5"))
               (rule "polySimp_mulLiterals" (formula "5") (term "0"))
               (rule "polySimp_elimOne" (formula "5") (term "0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0"))
               (rule "mul_literals" (formula "13") (term "0,1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "2"))
               (rule "mul_literals" (formula "2") (term "1"))
               (rule "inEqSimp_sepPosMonomial1" (formula "1"))
               (rule "mul_literals" (formula "1") (term "1"))
               (rule "nonNull" (formula "14") (inst "i=i"))
               (rule "greater_literals" (formula "14") (term "0,1"))
               (builtin "One Step Simplification" (formula "14"))
               (rule "sub_literals" (formula "14") (term "2,1,0,1"))
               (builtin "One Step Simplification" (formula "14"))
               (rule "andLeft" (formula "14"))
               (rule "notLeft" (formula "14"))
               (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "15"))
               (builtin "One Step Simplification" (formula "11"))
               (rule "narrowSelectArrayType" (formula "14") (term "0,0,1,0") (ifseqformula "9") (ifseqformula "15"))
               (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
               (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
               (rule "nnf_imp2or" (formula "13") (term "0"))
               (rule "nnf_imp2or" (formula "14") (term "0"))
               (rule "nnf_notAnd" (formula "13") (term "0,0"))
               (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0"))
               (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "13") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
               (rule "mul_literals" (formula "13") (term "1,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "13") (term "0,0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0"))
               (rule "mul_literals" (formula "13") (term "0,1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0"))
               (rule "nnf_notAnd" (formula "14") (term "0,0"))
               (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "14") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "14") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0"))
               (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0"))
               (rule "times_zero_1" (formula "14") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "14") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0"))
               (rule "mul_literals" (formula "14") (term "1,0,0,0"))
               (rule "Contract_axiom_for_refl_in_MixServer" (formula "6") (term "0"))
               (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "10")) (ifInst ""  (formula "11")) (ifInst ""  (formula "7")))
               (rule "true_left" (formula "6"))
               (rule "commute_or_2" (formula "14") (term "0"))
               (rule "commute_or" (formula "14") (term "0,0"))
               (rule "allLeft" (formula "14") (inst "t=Z(0(#))"))
               (rule "leq_literals" (formula "14") (term "1,0"))
               (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "3")))
               (rule "inEqSimp_commuteGeq" (formula "14"))
               (rule "inEqSimp_contradInEq1" (formula "14") (ifseqformula "8"))
               (rule "qeq_literals" (formula "14") (term "0"))
               (builtin "One Step Simplification" (formula "14"))
               (rule "closeFalse" (formula "14"))
            )
            (branch "Case 2"
               (builtin "One Step Simplification" (formula "12"))
               (builtin "One Step Simplification" (formula "8"))
               (rule "true_left" (formula "8"))
               (rule "translateJavaSubInt" (formula "11") (term "1,1,0,0"))
               (rule "translateJavaAddInt" (formula "11") (term "0,2,2,0,1,0"))
               (rule "andLeft" (formula "4"))
               (rule "andLeft" (formula "1"))
               (rule "close" (formula "14") (ifseqformula "1"))
            )
         )
         (branch "CUT: verif.selectvoting.system.core.MixServer::refl(heap, heapAtPre, a[0]) = TRUE FALSE"
            (builtin "One Step Simplification" (formula "10"))
            (builtin "One Step Simplification" (formula "6"))
            (rule "true_left" (formula "6"))
            (rule "translateJavaAddInt" (formula "9") (term "0,2,2,0,1,0"))
            (rule "translateJavaSubInt" (formula "9") (term "1,1,0,0"))
            (rule "andLeft" (formula "2"))
            (rule "allRight" (formula "14") (inst "sk=i_11"))
            (rule "impRight" (formula "14"))
            (rule "andLeft" (formula "1"))
            (rule "polySimp_elimSub" (formula "12") (term "1,1,0,0"))
            (rule "mul_literals" (formula "12") (term "1,1,1,0,0"))
            (rule "polySimp_addComm0" (formula "12") (term "0,2,2,0,1,0"))
            (rule "polySimp_addComm0" (formula "12") (term "1,1,0,0"))
            (rule "inEqSimp_leqRight" (formula "15"))
            (rule "times_zero_1" (formula "1") (term "1,0,0"))
            (rule "add_zero_right" (formula "1") (term "0,0"))
            (rule "inEqSimp_leqRight" (formula "16"))
            (rule "times_zero_1" (formula "1") (term "1,0,0"))
            (rule "add_zero_right" (formula "1") (term "0,0"))
            (rule "inEqSimp_ltToLeq" (formula "13"))
            (rule "polySimp_mulComm0" (formula "13") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "13") (term "0"))
            (rule "inEqSimp_ltToLeq" (formula "7"))
            (rule "add_zero_right" (formula "7") (term "0"))
            (rule "polySimp_mulComm0" (formula "7") (term "1,0"))
            (rule "inEqSimp_ltToLeq" (formula "4"))
            (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "4") (term "0"))
            (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "14") (term "0,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "12"))
            (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
            (rule "applyEq" (formula "1") (term "0,2,1,1,0") (ifseqformula "5"))
            (rule "applyEq" (formula "12") (term "0") (ifseqformula "5"))
            (rule "qeq_literals" (formula "12"))
            (rule "true_left" (formula "12"))
            (rule "applyEq" (formula "3") (term "0") (ifseqformula "5"))
            (rule "inEqSimp_commuteLeq" (formula "3"))
            (rule "applyEq" (formula "6") (term "0") (ifseqformula "5"))
            (rule "leq_literals" (formula "6"))
            (rule "true_left" (formula "6"))
            (rule "applyEq" (formula "11") (term "1,0,0") (ifseqformula "5"))
            (rule "add_zero_right" (formula "11") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "2"))
            (rule "mul_literals" (formula "2") (term "1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "6"))
            (rule "polySimp_mulLiterals" (formula "6") (term "0"))
            (rule "polySimp_elimOne" (formula "6") (term "0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "4"))
            (rule "polySimp_mulLiterals" (formula "4") (term "0"))
            (rule "polySimp_elimOne" (formula "4") (term "0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
            (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "1"))
            (rule "mul_literals" (formula "1") (term "1"))
            (rule "nonNull" (formula "12") (inst "i=i"))
            (rule "sub_literals" (formula "12") (term "2,1,0,1,1"))
            (builtin "One Step Simplification" (formula "12"))
            (rule "greater_literals" (formula "12") (term "0,1"))
            (builtin "One Step Simplification" (formula "12"))
            (rule "andLeft" (formula "12"))
            (rule "notLeft" (formula "12"))
            (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "13"))
            (builtin "One Step Simplification" (formula "9"))
            (rule "narrowSelectArrayType" (formula "12") (term "0,0,1,0") (ifseqformula "7") (ifseqformula "13"))
            (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
            (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
            (rule "nnf_imp2or" (formula "11") (term "0"))
            (rule "nnf_imp2or" (formula "12") (term "0"))
            (rule "nnf_notAnd" (formula "11") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
            (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "11") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
            (rule "mul_literals" (formula "11") (term "1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
            (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
            (rule "nnf_notAnd" (formula "12") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0"))
            (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "12") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
            (rule "mul_literals" (formula "12") (term "1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "12") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0"))
            (rule "Contract_axiom_for_refl_in_MixServer" (formula "14") (term "0"))
            (rule "replace_known_left" (formula "1") (term "0,1,0") (ifseqformula "8"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "9")) (ifInst ""  (formula "15")))
            (rule "applyEq" (formula "15") (term "2,0") (ifseqformula "1"))
            (rule "applyEq" (formula "2") (term "1,0") (ifseqformula "1"))
            (rule "applyEq" (formula "3") (term "2,0") (ifseqformula "1"))
            (rule "applyEq" (formula "3") (term "1,0") (ifseqformula "1"))
            (rule "Contract_axiom_for_refl_in_MixServer" (formula "15") (term "0"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "9")) (ifInst ""  (formula "10")) (ifInst ""  (formula "16")))
            (rule "true_left" (formula "1"))
            (rule "commute_or_2" (formula "13") (term "0"))
            (rule "commute_or" (formula "13") (term "0,0"))
            (rule "allLeft" (formula "13") (inst "t=Z(0(#))"))
            (rule "leq_literals" (formula "13") (term "1,0"))
            (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "1")))
            (rule "inEqSimp_commuteGeq" (formula "13"))
            (rule "inEqSimp_contradInEq1" (formula "13") (ifseqformula "7"))
            (rule "qeq_literals" (formula "13") (term "0"))
            (builtin "One Step Simplification" (formula "13"))
            (rule "closeFalse" (formula "13"))
         )
      )
      (branch "CUT: j = 0 FALSE"
         (builtin "One Step Simplification" (formula "9"))
         (builtin "One Step Simplification" (formula "5"))
         (rule "true_left" (formula "5"))
         (rule "translateJavaAddInt" (formula "8") (term "0,2,2,0,1,0"))
         (rule "translateJavaSubInt" (formula "8") (term "1,1,0,0"))
         (rule "andLeft" (formula "1"))
         (rule "allRight" (formula "13") (inst "sk=i_10"))
         (rule "impRight" (formula "13"))
         (rule "andLeft" (formula "1"))
         (rule "polySimp_elimSub" (formula "11") (term "1,1,0,0"))
         (rule "mul_literals" (formula "11") (term "1,1,1,0,0"))
         (rule "polySimp_addComm0" (formula "11") (term "0,2,2,0,1,0"))
         (rule "polySimp_addComm0" (formula "11") (term "1,1,0,0"))
         (rule "inEqSimp_leqRight" (formula "14"))
         (rule "times_zero_1" (formula "1") (term "1,0,0"))
         (rule "add_zero_right" (formula "1") (term "0,0"))
         (rule "inEqSimp_leqRight" (formula "15"))
         (rule "times_zero_1" (formula "1") (term "1,0,0"))
         (rule "add_zero_right" (formula "1") (term "0,0"))
         (rule "inEqSimp_ltToLeq" (formula "12"))
         (rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "12") (term "0"))
         (rule "inEqSimp_ltToLeq" (formula "6"))
         (rule "add_zero_right" (formula "6") (term "0"))
         (rule "polySimp_mulComm0" (formula "6") (term "1,0"))
         (rule "inEqSimp_ltToLeq" (formula "4"))
         (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "4") (term "0"))
         (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "13") (term "0,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "11"))
         (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "2"))
         (rule "mul_literals" (formula "2") (term "1"))
         (rule "inEqSimp_sepPosMonomial1" (formula "1"))
         (rule "mul_literals" (formula "1") (term "1"))
         (rule "inEqSimp_sepNegMonomial0" (formula "12"))
         (rule "polySimp_mulLiterals" (formula "12") (term "0"))
         (rule "polySimp_elimOne" (formula "12") (term "0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "6"))
         (rule "polySimp_mulLiterals" (formula "6") (term "0"))
         (rule "polySimp_elimOne" (formula "6") (term "0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "4"))
         (rule "polySimp_mulLiterals" (formula "4") (term "0"))
         (rule "polySimp_elimOne" (formula "4") (term "0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0"))
         (rule "mul_literals" (formula "13") (term "0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0"))
         (rule "inEqSimp_strengthen1" (formula "11") (ifseqformula "15"))
         (rule "add_zero_right" (formula "11") (term "1"))
         (rule "inEqSimp_contradEq7" (formula "15") (ifseqformula "11"))
         (rule "times_zero_1" (formula "15") (term "1,0,0"))
         (rule "add_zero_right" (formula "15") (term "0,0"))
         (rule "leq_literals" (formula "15") (term "0"))
         (builtin "One Step Simplification" (formula "15"))
         (rule "false_right" (formula "15"))
         (rule "inEqSimp_contradInEq1" (formula "5") (ifseqformula "11"))
         (rule "qeq_literals" (formula "5") (term "0"))
         (builtin "One Step Simplification" (formula "5"))
         (rule "closeFalse" (formula "5"))
      )
   )
   (branch "Step Case"
      (rule "allRight" (formula "10") (inst "sk=x_0") (userinteraction))
      (rule "impRight" (formula "10") (userinteraction))
      (rule "impRight" (formula "11") (userinteraction))
      (rule "andLeft" (formula "2") (userinteraction))
      (rule "impLeft" (formula "3") (userinteraction))
      (branch "Case 1"
         (rule "andLeft" (formula "1") (userinteraction))
         (rule "andRight" (formula "13") (userinteraction))
         (branch
            (rule "leq_to_gt" (formula "13") (userinteraction))
            (rule "notRight" (formula "13") (userinteraction))
            (rule "cut" (inst "cutFormula=j = add(x_0, Z(1(#)))") (userinteraction))
            (branch "CUT: j = x_0 + 1 TRUE"
               (rule "applyEq" (formula "15") (term "0,2,1,0") (ifseqformula "1") (userinteraction))
               (rule "cut" (inst "cutFormula=  verif.selectvoting.system.core.MixServer::refl(heap,
                                                 heapAtPre,
                                                 byte[]::select(heap,
                                                                a,
                                                                arr(add(x_0,
                                                                        Z(1(#))))))
= TRUE") (userinteraction))
               (branch "CUT: verif.selectvoting.system.core.MixServer::refl(heap, heapAtPre, a[ x_0 + 1]) = TRUE TRUE"
                  (rule "Contract_axiom_for_refl_in_MixServer" (formula "1") (term "0") (userinteraction))
                  (rule "impLeft" (formula "1") (userinteraction))
                  (branch "Case 1"
                     (builtin "One Step Simplification" (formula "14"))
                     (builtin "One Step Simplification" (formula "10"))
                     (rule "true_left" (formula "10"))
                     (rule "translateJavaAddInt" (formula "13") (term "0,2,2,0,1,0"))
                     (rule "translateJavaSubInt" (formula "13") (term "1,1,0,0"))
                     (rule "allRight" (formula "17") (inst "sk=i_4"))
                     (rule "impRight" (formula "17"))
                     (rule "andLeft" (formula "1"))
                     (rule "replace_known_left" (formula "17") (term "0,1") (ifseqformula "9"))
                     (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "10")))
                     (rule "notRight" (formula "17"))
                     (rule "polySimp_homoEq" (formula "5"))
                     (rule "polySimp_elimSub" (formula "16") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "16") (term "1,1,1,0,0"))
                     (rule "polySimp_addComm0" (formula "8") (term "0"))
                     (rule "polySimp_addComm0" (formula "4") (term "0,2,2,0"))
                     (rule "polySimp_addComm0" (formula "18") (term "0,2,2,0"))
                     (rule "polySimp_addComm0" (formula "7") (term "1"))
                     (rule "polySimp_addComm0" (formula "18") (term "0,2,1,0"))
                     (rule "polySimp_addComm0" (formula "16") (term "0,2,2,0,1,0"))
                     (rule "polySimp_addComm0" (formula "1") (term "0,2,0"))
                     (rule "polySimp_addComm0" (formula "5") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "16") (term "1,1,0,0"))
                     (rule "polySimp_addComm1" (formula "5") (term "0"))
                     (rule "inEqSimp_leqRight" (formula "19"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0"))
                     (rule "add_zero_right" (formula "1") (term "0,0"))
                     (rule "inEqSimp_gtToGeq" (formula "7"))
                     (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "7") (term "0"))
                     (rule "inEqSimp_ltToLeq" (formula "16"))
                     (rule "polySimp_mulComm0" (formula "16") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "16") (term "0"))
                     (rule "inEqSimp_ltToLeq" (formula "4"))
                     (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "4") (term "0"))
                     (rule "inEqSimp_leqRight" (formula "19"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0"))
                     (rule "add_zero_right" (formula "1") (term "0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "10"))
                     (rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "10") (term "0"))
                     (rule "polySimp_addAssoc" (formula "10") (term "0,0"))
                     (rule "add_literals" (formula "10") (term "0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "18") (term "0,0,0,1,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "16"))
                     (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
                     (rule "inEqSimp_homoInEq0" (formula "9"))
                     (rule "polySimp_addComm1" (formula "9") (term "0"))
                     (rule "applyEq" (formula "1") (term "2,1,0") (ifseqformula "3"))
                     (rule "applyEq" (formula "6") (term "2,0") (ifseqformula "3"))
                     (rule "applyEq" (formula "1") (term "1,1,0") (ifseqformula "3"))
                     (rule "polySimp_sepPosMonomial" (formula "7"))
                     (rule "polySimp_mulComm0" (formula "7") (term "1"))
                     (rule "polySimp_rightDist" (formula "7") (term "1"))
                     (rule "mul_literals" (formula "7") (term "0,1"))
                     (rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "7") (term "1,1"))
                     (rule "applyEq" (formula "8") (term "0,1,0") (ifseqformula "7"))
                     (rule "polySimp_pullOutFactor1" (formula "8") (term "0"))
                     (rule "add_literals" (formula "8") (term "1,0"))
                     (rule "times_zero_1" (formula "8") (term "0"))
                     (rule "qeq_literals" (formula "8"))
                     (rule "true_left" (formula "8"))
                     (rule "applyEq" (formula "8") (term "1,0") (ifseqformula "7"))
                     (rule "polySimp_addAssoc" (formula "8") (term "0"))
                     (rule "polySimp_addComm1" (formula "8") (term "0,0"))
                     (rule "add_literals" (formula "8") (term "0,0,0"))
                     (rule "add_zero_left" (formula "8") (term "0,0"))
                     (rule "polySimp_pullOutFactor2" (formula "8") (term "0"))
                     (rule "add_literals" (formula "8") (term "1,0"))
                     (rule "times_zero_1" (formula "8") (term "0"))
                     (rule "qeq_literals" (formula "8"))
                     (rule "true_left" (formula "8"))
                     (rule "applyEq" (formula "9") (term "0") (ifseqformula "7"))
                     (rule "applyEq" (formula "3") (term "1,0,2,0") (ifseqformula "7"))
                     (rule "polySimp_addAssoc" (formula "3") (term "0,2,0"))
                     (rule "add_literals" (formula "3") (term "0,0,2,0"))
                     (rule "add_zero_left" (formula "3") (term "0,2,0"))
                     (rule "applyEq" (formula "8") (term "1,0,0") (ifseqformula "7"))
                     (rule "polySimp_addAssoc" (formula "8") (term "0,0"))
                     (rule "add_literals" (formula "8") (term "0,0,0"))
                     (rule "applyEq" (formula "2") (term "1,1,0") (ifseqformula "3"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "14"))
                     (rule "polySimp_mulLiterals" (formula "14") (term "0"))
                     (rule "polySimp_elimOne" (formula "14") (term "0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "5"))
                     (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                     (rule "polySimp_elimOne" (formula "5") (term "0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                     (rule "mul_literals" (formula "1") (term "1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                     (rule "mul_literals" (formula "8") (term "1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                     (rule "mul_literals" (formula "2") (term "1"))
                     (rule "inEqSimp_subsumption1" (formula "13") (ifseqformula "8"))
                     (rule "leq_literals" (formula "13") (term "0"))
                     (builtin "One Step Simplification" (formula "13"))
                     (rule "true_left" (formula "13"))
                     (rule "nonNull" (formula "15") (inst "i=i"))
                     (rule "greater_literals" (formula "15") (term "0,1"))
                     (builtin "One Step Simplification" (formula "15"))
                     (rule "sub_literals" (formula "15") (term "2,1,0,1"))
                     (builtin "One Step Simplification" (formula "15"))
                     (rule "andLeft" (formula "15"))
                     (rule "notLeft" (formula "15"))
                     (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "16"))
                     (builtin "One Step Simplification" (formula "11"))
                     (rule "narrowSelectArrayType" (formula "15") (term "0,0,1,0") (ifseqformula "9") (ifseqformula "16"))
                     (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
                     (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "4"))
                     (rule "mul_literals" (formula "8") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                     (rule "mul_literals" (formula "8") (term "1"))
                     (rule "nnf_imp2or" (formula "15") (term "0"))
                     (rule "nnf_imp2or" (formula "16") (term "0"))
                     (rule "nnf_notAnd" (formula "15") (term "0,0"))
                     (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "15") (term "0,0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
                     (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0"))
                     (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "15") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
                     (rule "mul_literals" (formula "15") (term "1,0,0,0"))
                     (rule "nnf_notAnd" (formula "16") (term "0,0"))
                     (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "16") (term "0,0,0,1,0,0"))
                     (rule "add_zero_left" (formula "16") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0"))
                     (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0"))
                     (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "16") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
                     (rule "mul_literals" (formula "16") (term "1,0,0,0"))
                     (rule "Contract_axiom_for_refl_in_MixServer" (formula "6") (term "0"))
                     (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "11")) (ifInst ""  (formula "12")) (ifInst ""  (formula "7")))
                     (rule "true_left" (formula "6"))
                     (rule "commute_or_2" (formula "16") (term "0"))
                     (rule "commute_or" (formula "16") (term "0,0"))
                     (rule "allLeft" (formula "16") (inst "t=j"))
                     (rule "replace_known_left" (formula "16") (term "0,0,0") (ifseqformula "3"))
                     (builtin "One Step Simplification" (formula "16"))
                     (rule "inEqSimp_commuteGeq" (formula "16") (term "1"))
                     (rule "inEqSimp_contradInEq1" (formula "16") (term "1") (ifseqformula "14"))
                     (rule "inEqSimp_homoInEq1" (formula "16") (term "0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,1"))
                     (rule "add_literals" (formula "16") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "16") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "16") (term "0,0,1"))
                     (rule "leq_literals" (formula "16") (term "0,1"))
                     (builtin "One Step Simplification" (formula "16"))
                     (rule "inEqSimp_contradInEq1" (formula "16") (ifseqformula "9"))
                     (rule "qeq_literals" (formula "16") (term "0"))
                     (builtin "One Step Simplification" (formula "16"))
                     (rule "closeFalse" (formula "16"))
                  )
                  (branch "Case 2"
                     (rule "andLeft" (formula "1") (userinteraction))
                     (rule "closeAntec" (formula "1") (ifseqformula "17") (userinteraction))
                  )
               )
               (branch "CUT: verif.selectvoting.system.core.MixServer::refl(heap, heapAtPre, a[ x_0 + 1]) = TRUE FALSE"
                  (builtin "One Step Simplification" (formula "13"))
                  (builtin "One Step Simplification" (formula "9"))
                  (rule "true_left" (formula "9"))
                  (rule "translateJavaAddInt" (formula "12") (term "0,2,2,0,1,0"))
                  (rule "translateJavaSubInt" (formula "12") (term "1,1,0,0"))
                  (rule "allRight" (formula "16") (inst "sk=i_3"))
                  (rule "impRight" (formula "16"))
                  (rule "andLeft" (formula "1"))
                  (rule "polySimp_homoEq" (formula "3"))
                  (rule "polySimp_elimSub" (formula "14") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "14") (term "1,1,1,0,0"))
                  (rule "polySimp_addComm0" (formula "16") (term "0,2,2,0"))
                  (rule "polySimp_addComm0" (formula "6") (term "0"))
                  (rule "polySimp_addComm0" (formula "17") (term "0,2,1,0"))
                  (rule "polySimp_addComm0" (formula "5") (term "1"))
                  (rule "polySimp_addComm0" (formula "17") (term "0,2,2,0"))
                  (rule "polySimp_addComm0" (formula "14") (term "0,2,2,0,1,0"))
                  (rule "polySimp_addComm0" (formula "3") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "14") (term "1,1,0,0"))
                  (rule "polySimp_addComm1" (formula "3") (term "0"))
                  (rule "inEqSimp_leqRight" (formula "18"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0"))
                  (rule "add_zero_right" (formula "1") (term "0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "14"))
                  (rule "polySimp_mulComm0" (formula "14") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "14") (term "0"))
                  (rule "inEqSimp_gtToGeq" (formula "5"))
                  (rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "5") (term "0"))
                  (rule "inEqSimp_leqRight" (formula "18"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0"))
                  (rule "add_zero_right" (formula "1") (term "0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "4"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "4") (term "0"))
                  (rule "inEqSimp_ltToLeq" (formula "8"))
                  (rule "polySimp_mulComm0" (formula "8") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "8") (term "0"))
                  (rule "polySimp_addAssoc" (formula "8") (term "0,0"))
                  (rule "add_literals" (formula "8") (term "0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "16") (term "0,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "14"))
                  (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
                  (rule "inEqSimp_homoInEq0" (formula "7"))
                  (rule "polySimp_addComm1" (formula "7") (term "0"))
                  (rule "polySimp_sepPosMonomial" (formula "5"))
                  (rule "polySimp_mulComm0" (formula "5") (term "1"))
                  (rule "polySimp_rightDist" (formula "5") (term "1"))
                  (rule "mul_literals" (formula "5") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "5") (term "1,1"))
                  (rule "applyEq" (formula "6") (term "0,1,0") (ifseqformula "5"))
                  (rule "polySimp_pullOutFactor1" (formula "6") (term "0"))
                  (rule "add_literals" (formula "6") (term "1,0"))
                  (rule "times_zero_1" (formula "6") (term "0"))
                  (rule "qeq_literals" (formula "6"))
                  (rule "true_left" (formula "6"))
                  (rule "applyEq" (formula "17") (term "1,0,2,2,0") (ifseqformula "5"))
                  (rule "polySimp_addAssoc" (formula "17") (term "0,2,2,0"))
                  (rule "add_literals" (formula "17") (term "0,0,2,2,0"))
                  (rule "add_zero_left" (formula "17") (term "0,2,2,0"))
                  (rule "applyEq" (formula "1") (term "1,0,2,2,1,0") (ifseqformula "5"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,2,2,1,0"))
                  (rule "add_literals" (formula "1") (term "0,0,2,2,1,0"))
                  (rule "add_zero_left" (formula "1") (term "0,2,2,1,0"))
                  (rule "applyEq" (formula "6") (term "1,0") (ifseqformula "5"))
                  (rule "polySimp_addAssoc" (formula "6") (term "0"))
                  (rule "polySimp_addComm1" (formula "6") (term "0,0"))
                  (rule "add_literals" (formula "6") (term "0,0,0"))
                  (rule "add_zero_left" (formula "6") (term "0,0"))
                  (rule "polySimp_pullOutFactor2" (formula "6") (term "0"))
                  (rule "add_literals" (formula "6") (term "1,0"))
                  (rule "times_zero_1" (formula "6") (term "0"))
                  (rule "qeq_literals" (formula "6"))
                  (rule "true_left" (formula "6"))
                  (rule "applyEq" (formula "1") (term "1,0,2,1,1,0") (ifseqformula "5"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,2,1,1,0"))
                  (rule "add_literals" (formula "1") (term "0,0,2,1,1,0"))
                  (rule "add_zero_left" (formula "1") (term "0,2,1,1,0"))
                  (rule "applyEq" (formula "7") (term "0") (ifseqformula "5"))
                  (rule "applyEq" (formula "6") (term "1,0,0") (ifseqformula "5"))
                  (rule "polySimp_addAssoc" (formula "6") (term "0,0"))
                  (rule "add_literals" (formula "6") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                  (rule "mul_literals" (formula "2") (term "1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "12"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "0"))
                  (rule "polySimp_elimOne" (formula "12") (term "0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                  (rule "polySimp_elimOne" (formula "4") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "13") (term "0,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                  (rule "mul_literals" (formula "1") (term "1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "6"))
                  (rule "mul_literals" (formula "6") (term "1"))
                  (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "6"))
                  (rule "leq_literals" (formula "11") (term "0"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "true_left" (formula "11"))
                  (rule "nonNull" (formula "13") (inst "i=i"))
                  (rule "greater_literals" (formula "13") (term "0,1"))
                  (builtin "One Step Simplification" (formula "13"))
                  (rule "sub_literals" (formula "13") (term "2,1,0,1"))
                  (builtin "One Step Simplification" (formula "13"))
                  (rule "andLeft" (formula "13"))
                  (rule "notLeft" (formula "13"))
                  (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "14"))
                  (builtin "One Step Simplification" (formula "9"))
                  (rule "narrowSelectArrayType" (formula "13") (term "0,0,1,0") (ifseqformula "7") (ifseqformula "14"))
                  (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "13") (term "0,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0"))
                  (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "3"))
                  (rule "mul_literals" (formula "6") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "6"))
                  (rule "mul_literals" (formula "6") (term "1"))
                  (rule "nnf_imp2or" (formula "13") (term "0"))
                  (rule "nnf_imp2or" (formula "14") (term "0"))
                  (rule "nnf_notAnd" (formula "13") (term "0,0"))
                  (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "13") (term "0,0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "13") (term "0,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0"))
                  (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0"))
                  (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "13") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
                  (rule "mul_literals" (formula "13") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "14") (term "0,0"))
                  (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0"))
                  (rule "times_zero_1" (formula "14") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "14") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0"))
                  (rule "mul_literals" (formula "14") (term "1,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "14") (term "0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "14") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0"))
                  (rule "Contract_axiom_for_refl_in_MixServer" (formula "16") (term "0"))
                  (rule "replace_known_left" (formula "1") (term "0,1,0") (ifseqformula "9"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "10")) (ifInst ""  (formula "17")))
                  (rule "applyEq" (formula "2") (term "1,0") (ifseqformula "1"))
                  (rule "applyEq" (formula "2") (term "2,0") (ifseqformula "1"))
                  (rule "applyEq" (formula "3") (term "1,0") (ifseqformula "1"))
                  (rule "applyEq" (formula "17") (term "2,0") (ifseqformula "1"))
                  (rule "Contract_axiom_for_refl_in_MixServer" (formula "17") (term "0"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "10")) (ifInst ""  (formula "11")) (ifInst ""  (formula "18")))
                  (rule "true_left" (formula "1"))
                  (rule "commute_or_2" (formula "15") (term "0"))
                  (rule "commute_or" (formula "15") (term "0,0"))
                  (rule "allLeft" (formula "15") (inst "t=j"))
                  (rule "replace_known_left" (formula "15") (term "0,0,0") (ifseqformula "1"))
                  (builtin "One Step Simplification" (formula "15"))
                  (rule "inEqSimp_commuteGeq" (formula "15") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "15") (term "1") (ifseqformula "13"))
                  (rule "inEqSimp_homoInEq1" (formula "15") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,1"))
                  (rule "add_literals" (formula "15") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "15") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "15") (term "0,0,1"))
                  (rule "leq_literals" (formula "15") (term "0,1"))
                  (builtin "One Step Simplification" (formula "15"))
                  (rule "inEqSimp_contradInEq1" (formula "15") (ifseqformula "8"))
                  (rule "qeq_literals" (formula "15") (term "0"))
                  (builtin "One Step Simplification" (formula "15"))
                  (rule "closeFalse" (formula "15"))
               )
            )
            (branch "CUT: j = x_0 + 1 FALSE"
               (builtin "One Step Simplification" (formula "12"))
               (builtin "One Step Simplification" (formula "8"))
               (rule "true_left" (formula "8"))
               (rule "translateJavaAddInt" (formula "11") (term "0,2,2,0,1,0"))
               (rule "translateJavaSubInt" (formula "11") (term "1,1,0,0"))
               (rule "allRight" (formula "15") (inst "sk=i_2"))
               (rule "impRight" (formula "15"))
               (rule "andLeft" (formula "1"))
               (rule "polySimp_homoEq" (formula "15"))
               (rule "polySimp_elimSub" (formula "13") (term "1,1,0,0"))
               (rule "mul_literals" (formula "13") (term "1,1,1,0,0"))
               (rule "polySimp_addComm0" (formula "4") (term "1"))
               (rule "polySimp_addComm0" (formula "16") (term "0,2,2,0"))
               (rule "polySimp_addComm0" (formula "5") (term "0"))
               (rule "polySimp_addComm0" (formula "13") (term "0,2,2,0,1,0"))
               (rule "polySimp_addComm0" (formula "15") (term "0,0"))
               (rule "polySimp_addComm0" (formula "13") (term "1,1,0,0"))
               (rule "polySimp_addComm1" (formula "15") (term "0"))
               (rule "inEqSimp_leqRight" (formula "17"))
               (rule "times_zero_1" (formula "1") (term "1,0,0"))
               (rule "add_zero_right" (formula "1") (term "0,0"))
               (rule "inEqSimp_gtToGeq" (formula "4"))
               (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "4") (term "0"))
               (rule "inEqSimp_ltToLeq" (formula "13"))
               (rule "polySimp_mulComm0" (formula "13") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "13") (term "0"))
               (rule "inEqSimp_leqRight" (formula "17"))
               (rule "times_zero_1" (formula "1") (term "1,0,0"))
               (rule "add_zero_right" (formula "1") (term "0,0"))
               (rule "inEqSimp_ltToLeq" (formula "4"))
               (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "4") (term "0"))
               (rule "inEqSimp_ltToLeq" (formula "7"))
               (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "7") (term "0"))
               (rule "polySimp_addAssoc" (formula "7") (term "0,0"))
               (rule "add_literals" (formula "7") (term "0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "15") (term "0,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "13"))
               (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
               (rule "inEqSimp_homoInEq0" (formula "6"))
               (rule "polySimp_addComm1" (formula "6") (term "0"))
               (rule "polySimp_sepPosMonomial" (formula "17"))
               (rule "polySimp_mulComm0" (formula "17") (term "1"))
               (rule "polySimp_rightDist" (formula "17") (term "1"))
               (rule "mul_literals" (formula "17") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "17") (term "1,1"))
               (rule "polySimp_elimOne" (formula "17") (term "1,1"))
               (rule "inEqSimp_sepPosMonomial1" (formula "2"))
               (rule "mul_literals" (formula "2") (term "1"))
               (rule "inEqSimp_sepNegMonomial1" (formula "5"))
               (rule "polySimp_mulLiterals" (formula "5") (term "0"))
               (rule "polySimp_elimOne" (formula "5") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "14"))
               (rule "polySimp_mulLiterals" (formula "14") (term "0"))
               (rule "polySimp_elimOne" (formula "14") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "1"))
               (rule "mul_literals" (formula "1") (term "1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "4"))
               (rule "polySimp_mulLiterals" (formula "4") (term "0"))
               (rule "polySimp_elimOne" (formula "4") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "7"))
               (rule "polySimp_mulLiterals" (formula "7") (term "0"))
               (rule "polySimp_elimOne" (formula "7") (term "0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
               (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "6"))
               (rule "polySimp_mulComm0" (formula "6") (term "1"))
               (rule "polySimp_rightDist" (formula "6") (term "1"))
               (rule "mul_literals" (formula "6") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
               (rule "polySimp_elimOne" (formula "6") (term "1,1"))
               (rule "inEqSimp_strengthen1" (formula "6") (ifseqformula "17"))
               (rule "polySimp_addAssoc" (formula "6") (term "1"))
               (rule "add_literals" (formula "6") (term "0,1"))
               (rule "add_zero_left" (formula "6") (term "1"))
               (rule "inEqSimp_contradEq7" (formula "17") (ifseqformula "6"))
               (rule "polySimp_rightDist" (formula "17") (term "1,0,0"))
               (rule "mul_literals" (formula "17") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "17") (term "0,0"))
               (rule "polySimp_addComm0" (formula "17") (term "0,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,0"))
               (rule "add_literals" (formula "17") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "17") (term "1,0,0"))
               (rule "add_zero_right" (formula "17") (term "0,0"))
               (rule "leq_literals" (formula "17") (term "0"))
               (builtin "One Step Simplification" (formula "17"))
               (rule "false_right" (formula "17"))
               (rule "inEqSimp_contradInEq1" (formula "5") (ifseqformula "6"))
               (rule "andLeft" (formula "5"))
               (rule "inEqSimp_homoInEq1" (formula "5"))
               (rule "polySimp_mulComm0" (formula "5") (term "1,0"))
               (rule "polySimp_rightDist" (formula "5") (term "1,0"))
               (rule "mul_literals" (formula "5") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "5") (term "0"))
               (rule "polySimp_addComm0" (formula "5") (term "0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "5") (term "0"))
               (rule "add_literals" (formula "5") (term "1,1,0"))
               (rule "times_zero_1" (formula "5") (term "1,0"))
               (rule "add_zero_right" (formula "5") (term "0"))
               (rule "leq_literals" (formula "5"))
               (rule "closeFalse" (formula "5"))
            )
         )
         (branch "Case 2"
            (builtin "One Step Simplification" (formula "11"))
            (builtin "One Step Simplification" (formula "7"))
            (rule "true_left" (formula "7"))
            (rule "translateJavaAddInt" (formula "10") (term "0,2,2,0,1,0"))
            (rule "translateJavaSubInt" (formula "10") (term "1,1,0,0"))
            (rule "allRight" (formula "14") (inst "sk=i_5"))
            (rule "impRight" (formula "14"))
            (rule "andLeft" (formula "1"))
            (rule "polySimp_elimSub" (formula "12") (term "1,1,0,0"))
            (rule "mul_literals" (formula "12") (term "1,1,1,0,0"))
            (rule "polySimp_addComm0" (formula "3") (term "1"))
            (rule "polySimp_addComm0" (formula "4") (term "0"))
            (rule "polySimp_addComm0" (formula "15") (term "0,2,2,0"))
            (rule "polySimp_addComm0" (formula "12") (term "0,2,2,0,1,0"))
            (rule "polySimp_addComm0" (formula "12") (term "1,1,0,0"))
            (rule "inEqSimp_ltRight" (formula "14"))
            (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
            (rule "polySimp_addComm0" (formula "1") (term "0"))
            (rule "inEqSimp_leqRight" (formula "16"))
            (rule "times_zero_1" (formula "1") (term "1,0,0"))
            (rule "add_zero_right" (formula "1") (term "0,0"))
            (rule "inEqSimp_ltToLeq" (formula "13"))
            (rule "polySimp_mulComm0" (formula "13") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "13") (term "0"))
            (rule "inEqSimp_leqRight" (formula "16"))
            (rule "times_zero_1" (formula "1") (term "1,0,0"))
            (rule "add_zero_right" (formula "1") (term "0,0"))
            (rule "inEqSimp_ltToLeq" (formula "5"))
            (rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "5") (term "0"))
            (rule "inEqSimp_ltToLeq" (formula "7"))
            (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "7") (term "0"))
            (rule "polySimp_addAssoc" (formula "7") (term "0,0"))
            (rule "add_literals" (formula "7") (term "0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "15") (term "0,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "13"))
            (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
            (rule "inEqSimp_homoInEq0" (formula "6"))
            (rule "polySimp_addComm1" (formula "6") (term "0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "3"))
            (rule "polySimp_mulLiterals" (formula "3") (term "0"))
            (rule "polySimp_elimOne" (formula "3") (term "0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "2"))
            (rule "mul_literals" (formula "2") (term "1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "14"))
            (rule "polySimp_mulLiterals" (formula "14") (term "0"))
            (rule "polySimp_elimOne" (formula "14") (term "0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "1"))
            (rule "mul_literals" (formula "1") (term "1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "5"))
            (rule "polySimp_mulLiterals" (formula "5") (term "0"))
            (rule "polySimp_elimOne" (formula "5") (term "0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "7"))
            (rule "polySimp_mulLiterals" (formula "7") (term "0"))
            (rule "polySimp_elimOne" (formula "7") (term "0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
            (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "6"))
            (rule "polySimp_mulComm0" (formula "6") (term "1"))
            (rule "polySimp_rightDist" (formula "6") (term "1"))
            (rule "mul_literals" (formula "6") (term "0,1"))
            (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
            (rule "polySimp_elimOne" (formula "6") (term "1,1"))
            (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "7"))
            (rule "andLeft" (formula "3"))
            (rule "inEqSimp_homoInEq1" (formula "3"))
            (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
            (rule "add_literals" (formula "3") (term "1,1,0"))
            (rule "times_zero_1" (formula "3") (term "1,0"))
            (rule "add_zero_right" (formula "3") (term "0"))
            (rule "leq_literals" (formula "3"))
            (rule "closeFalse" (formula "3"))
         )
      )
      (branch "Case 2"
         (rule "andLeft" (formula "1") (userinteraction))
         (rule "translateJavaSubInt" (formula "12") (term "1,1,0,0,0") (userinteraction))
         (rule "translateJavaAddInt" (formula "12") (term "0,2,2,0,1,0") (userinteraction))
         (rule "instAll" (formula "14") (term "0,0,2,2,0") (ifseqformula "12") (userinteraction))
         (rule "impLeft" (formula "1") (userinteraction))
         (branch "Case 1"
            (builtin "One Step Simplification" (formula "12"))
            (builtin "One Step Simplification" (formula "8"))
            (builtin "One Step Simplification" (formula "14"))
            (rule "true_left" (formula "8"))
            (rule "allRight" (formula "15") (inst "sk=i_6"))
            (rule "impRight" (formula "15"))
            (rule "andLeft" (formula "1"))
            (rule "polySimp_elimSub" (formula "13") (term "1,1,0,0"))
            (rule "mul_literals" (formula "13") (term "1,1,1,0,0"))
            (rule "polySimp_elimSub" (formula "15") (term "1,1"))
            (rule "mul_literals" (formula "15") (term "1,1,1"))
            (rule "polySimp_addComm0" (formula "16") (term "0,2,2,0"))
            (rule "polySimp_addComm0" (formula "4") (term "0"))
            (rule "polySimp_addComm0" (formula "3") (term "1"))
            (rule "polySimp_addComm0" (formula "13") (term "0,2,2,0,1,0"))
            (rule "polySimp_addComm0" (formula "13") (term "1,1,0,0"))
            (rule "polySimp_addComm0" (formula "15") (term "1,1"))
            (rule "inEqSimp_leqRight" (formula "17"))
            (rule "times_zero_1" (formula "1") (term "1,0,0"))
            (rule "add_zero_right" (formula "1") (term "0,0"))
            (rule "inEqSimp_ltToLeq" (formula "13"))
            (rule "polySimp_mulComm0" (formula "13") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "13") (term "0"))
            (rule "inEqSimp_leqRight" (formula "17"))
            (rule "times_zero_1" (formula "1") (term "1,0,0"))
            (rule "add_zero_right" (formula "1") (term "0,0"))
            (rule "inEqSimp_ltToLeq" (formula "4"))
            (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "4") (term "0"))
            (rule "inEqSimp_ltToLeq" (formula "6"))
            (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "6") (term "0"))
            (rule "polySimp_addAssoc" (formula "6") (term "0,0"))
            (rule "add_literals" (formula "6") (term "0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "15") (term "0,0,0,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "17") (term "1"))
            (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1"))
            (rule "mul_literals" (formula "17") (term "0,1,0,0,1"))
            (rule "polySimp_addAssoc" (formula "17") (term "0,0,1"))
            (rule "add_literals" (formula "17") (term "0,0,0,1"))
            (rule "polySimp_addComm1" (formula "17") (term "0,1"))
            (rule "replace_known_left" (formula "17") (term "1") (ifseqformula "6"))
            (builtin "One Step Simplification" (formula "17"))
            (rule "inEqSimp_leqRight" (formula "17"))
            (rule "add_zero_right" (formula "1") (term "0"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
            (rule "inEqSimp_commuteLeq" (formula "14"))
            (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
            (rule "inEqSimp_homoInEq0" (formula "6"))
            (rule "polySimp_addComm1" (formula "6") (term "0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "3"))
            (rule "mul_literals" (formula "3") (term "1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "15"))
            (rule "polySimp_mulLiterals" (formula "15") (term "0"))
            (rule "polySimp_elimOne" (formula "15") (term "0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "2"))
            (rule "mul_literals" (formula "2") (term "1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "5"))
            (rule "polySimp_mulLiterals" (formula "5") (term "0"))
            (rule "polySimp_elimOne" (formula "5") (term "0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "7"))
            (rule "polySimp_mulLiterals" (formula "7") (term "0"))
            (rule "polySimp_elimOne" (formula "7") (term "0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0"))
            (rule "mul_literals" (formula "16") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0"))
            (rule "polySimp_elimOne" (formula "1") (term "0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "6"))
            (rule "polySimp_mulComm0" (formula "6") (term "1"))
            (rule "polySimp_rightDist" (formula "6") (term "1"))
            (rule "mul_literals" (formula "6") (term "0,1"))
            (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
            (rule "polySimp_elimOne" (formula "6") (term "1,1"))
            (rule "inEqSimp_contradInEq0" (formula "8") (ifseqformula "1"))
            (rule "qeq_literals" (formula "8") (term "0"))
            (builtin "One Step Simplification" (formula "8"))
            (rule "closeFalse" (formula "8"))
         )
         (branch "Case 2"
            (rule "cut" (inst "cutFormula=  verif.selectvoting.system.core.MixServer::trans(heap,
                                                  heapAtPre,
                                                  byte[]::select(heap,
                                                                 a,
                                                                 arr(j)),
                                                  byte[]::select(heap,
                                                                 a,
                                                                 arr(x_0)),
                                                  byte[]::select(heap,
                                                                 a,
                                                                 arr(add(x_0,
                                                                         Z(1(#))))))
= TRUE") (userinteraction))
            (branch "CUT: verif.selectvoting.system.core.MixServer::trans(heap, heapAtPre, a[j], a[x_0], a[ x_0 + 1]) = TRUE TRUE"
               (rule "Contract_axiom_for_trans_in_MixServer" (formula "1") (term "0") (userinteraction))
               (rule "impLeft" (formula "1") (userinteraction))
               (branch "Case 1"
                  (builtin "One Step Simplification" (formula "14"))
                  (builtin "One Step Simplification" (formula "10"))
                  (rule "true_left" (formula "10"))
                  (rule "allRight" (formula "17") (inst "sk=i_8"))
                  (rule "impRight" (formula "17"))
                  (rule "andLeft" (formula "1"))
                  (rule "replace_known_left" (formula "17") (term "0,1") (ifseqformula "9"))
                  (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "8")) (ifInst ""  (formula "4")) (ifInst ""  (formula "10")))
                  (rule "polySimp_elimSub" (formula "15") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "15") (term "1,1,1,0,0"))
                  (rule "polySimp_addComm0" (formula "4") (term "0,2,2,0"))
                  (rule "polySimp_addComm0" (formula "6") (term "0"))
                  (rule "polySimp_addComm0" (formula "5") (term "1"))
                  (rule "polySimp_addComm0" (formula "18") (term "0,2,2,0"))
                  (rule "polySimp_addComm0" (formula "3") (term "0,2,4,0"))
                  (rule "polySimp_addComm0" (formula "15") (term "0,2,2,0,1,0"))
                  (rule "polySimp_addComm0" (formula "17") (term "0,2,0,0,1,1"))
                  (rule "polySimp_addComm0" (formula "15") (term "1,1,0,0"))
                  (rule "inEqSimp_leqRight" (formula "19"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0"))
                  (rule "add_zero_right" (formula "1") (term "0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "15"))
                  (rule "polySimp_mulComm0" (formula "15") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "15") (term "0"))
                  (rule "inEqSimp_leqRight" (formula "19"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0"))
                  (rule "add_zero_right" (formula "1") (term "0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "4"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "4") (term "0"))
                  (rule "inEqSimp_ltToLeq" (formula "8"))
                  (rule "polySimp_mulComm0" (formula "8") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "8") (term "0"))
                  (rule "polySimp_addAssoc" (formula "8") (term "0,0"))
                  (rule "add_literals" (formula "8") (term "0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "17") (term "0,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "15"))
                  (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
                  (rule "inEqSimp_homoInEq0" (formula "7"))
                  (rule "polySimp_addComm1" (formula "7") (term "0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                  (rule "mul_literals" (formula "2") (term "1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "16"))
                  (rule "polySimp_mulLiterals" (formula "16") (term "0"))
                  (rule "polySimp_elimOne" (formula "16") (term "0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                  (rule "mul_literals" (formula "1") (term "1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                  (rule "polySimp_elimOne" (formula "4") (term "0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "8"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                  (rule "polySimp_elimOne" (formula "8") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "17") (term "0,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                  (rule "polySimp_mulComm0" (formula "7") (term "1"))
                  (rule "polySimp_rightDist" (formula "7") (term "1"))
                  (rule "mul_literals" (formula "7") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "7") (term "1,1"))
                  (rule "nonNull" (formula "18") (inst "i=i"))
                  (rule "greater_literals" (formula "18") (term "0,1"))
                  (builtin "One Step Simplification" (formula "18"))
                  (rule "sub_literals" (formula "18") (term "2,1,0,1"))
                  (builtin "One Step Simplification" (formula "18"))
                  (rule "andLeft" (formula "18"))
                  (rule "notLeft" (formula "18"))
                  (rule "replace_known_right" (formula "13") (term "0") (ifseqformula "19"))
                  (builtin "One Step Simplification" (formula "13"))
                  (rule "narrowSelectArrayType" (formula "18") (term "0,0,1,0") (ifseqformula "11") (ifseqformula "19"))
                  (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0"))
                  (rule "mul_literals" (formula "18") (term "0,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0"))
                  (rule "inEqSimp_exactShadow3" (formula "15") (ifseqformula "3"))
                  (rule "times_zero_1" (formula "15") (term "0,0"))
                  (rule "add_zero_left" (formula "15") (term "0"))
                  (rule "nnf_imp2or" (formula "18") (term "0"))
                  (rule "nnf_imp2or" (formula "19") (term "0"))
                  (rule "nnf_notAnd" (formula "18") (term "0,0"))
                  (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0"))
                  (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "18") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0"))
                  (rule "mul_literals" (formula "18") (term "1,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "18") (term "0,0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "18") (term "0,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0"))
                  (rule "nnf_notAnd" (formula "19") (term "0,0"))
                  (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0"))
                  (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "19") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0"))
                  (rule "mul_literals" (formula "19") (term "1,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "19") (term "0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "19") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0"))
                  (rule "Contract_axiom_for_trans_in_MixServer" (formula "5") (term "0"))
                  (rule "replace_known_left" (formula "5") (term "1,1,0") (ifseqformula "13"))
                  (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "11")) (ifInst ""  (formula "7")) (ifInst ""  (formula "22")) (ifInst ""  (formula "12")) (ifInst ""  (formula "6")))
                  (rule "true_left" (formula "5"))
                  (rule "shift_paren_and" (formula "21"))
                  (rule "commute_or_2" (formula "19") (term "0"))
                  (rule "commute_or" (formula "19") (term "0,0"))
                  (rule "allLeft" (formula "19") (inst "t=j"))
                  (rule "inEqSimp_commuteGeq" (formula "19") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "19") (term "1,0") (ifseqformula "16"))
                  (rule "qeq_literals" (formula "19") (term "0,1,0"))
                  (builtin "One Step Simplification" (formula "19"))
                  (rule "inEqSimp_contradInEq1" (formula "19") (term "1") (ifseqformula "17"))
                  (rule "inEqSimp_homoInEq1" (formula "19") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,0,1"))
                  (rule "add_literals" (formula "19") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "19") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "19") (term "0,0,1"))
                  (rule "leq_literals" (formula "19") (term "0,1"))
                  (builtin "One Step Simplification" (formula "19"))
                  (rule "notLeft" (formula "19"))
                  (rule "replace_known_right" (formula "22") (term "0,0,0") (ifseqformula "20"))
                  (builtin "One Step Simplification" (formula "22"))
                  (rule "allLeft" (formula "19") (inst "t=x_0"))
                  (rule "inEqSimp_commuteGeq" (formula "19") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "19") (term "1,0") (ifseqformula "9"))
                  (rule "qeq_literals" (formula "19") (term "0,1,0"))
                  (builtin "One Step Simplification" (formula "19"))
                  (rule "inEqSimp_contradInEq1" (formula "19") (term "1") (ifseqformula "8"))
                  (rule "inEqSimp_homoInEq1" (formula "19") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,0,1"))
                  (rule "add_literals" (formula "19") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "19") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "19") (term "0,0,1"))
                  (rule "leq_literals" (formula "19") (term "0,1"))
                  (builtin "One Step Simplification" (formula "19"))
                  (rule "notLeft" (formula "19"))
                  (rule "replace_known_right" (formula "23") (term "0,0") (ifseqformula "20"))
                  (builtin "One Step Simplification" (formula "23"))
                  (rule "notRight" (formula "23"))
                  (rule "applyEq" (formula "6") (term "4,0") (ifseqformula "1"))
                  (rule "applyEq" (formula "2") (term "2,0") (ifseqformula "1"))
                  (rule "applyEq" (formula "7") (term "2,0") (ifseqformula "1"))
                  (rule "Contract_axiom_for_trans_in_MixServer" (formula "6") (term "0"))
                  (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "12")) (ifInst ""  (formula "8")) (ifInst ""  (formula "23")) (ifInst ""  (formula "22")) (ifInst ""  (formula "13")) (ifInst ""  (formula "14")) (ifInst ""  (formula "7")))
                  (rule "true_left" (formula "6"))
                  (rule "allLeft" (formula "20") (inst "t=add(Z(1(#)), x_0)"))
                  (rule "replace_known_left" (formula "20") (term "0,0,0") (ifseqformula "1"))
                  (builtin "One Step Simplification" (formula "20"))
                  (rule "inEqSimp_commuteGeq" (formula "20") (term "1"))
                  (rule "inEqSimp_homoInEq0" (formula "20") (term "0"))
                  (rule "polySimp_mulComm0" (formula "20") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "20") (term "1,0,0"))
                  (rule "mul_literals" (formula "20") (term "0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "20") (term "0,0"))
                  (rule "add_literals" (formula "20") (term "0,0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "20") (term "0"))
                  (rule "polySimp_mulLiterals" (formula "20") (term "0,0"))
                  (rule "polySimp_elimOne" (formula "20") (term "0,0"))
                  (rule "inEqSimp_contradInEq1" (formula "20") (term "0") (ifseqformula "10"))
                  (rule "qeq_literals" (formula "20") (term "0,0"))
                  (builtin "One Step Simplification" (formula "20"))
                  (rule "inEqSimp_contradInEq0" (formula "9") (ifseqformula "20"))
                  (rule "andLeft" (formula "9"))
                  (rule "inEqSimp_homoInEq1" (formula "9"))
                  (rule "polySimp_mulComm0" (formula "9") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "9") (term "1,0"))
                  (rule "mul_literals" (formula "9") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "9") (term "0"))
                  (rule "polySimp_addComm1" (formula "9") (term "0,0"))
                  (rule "add_literals" (formula "9") (term "0,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "9") (term "0"))
                  (rule "add_literals" (formula "9") (term "1,1,0"))
                  (rule "times_zero_1" (formula "9") (term "1,0"))
                  (rule "add_zero_right" (formula "9") (term "0"))
                  (rule "leq_literals" (formula "9"))
                  (rule "closeFalse" (formula "9"))
               )
               (branch "Case 2"
                  (builtin "One Step Simplification" (formula "15"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "true_left" (formula "11"))
                  (rule "andLeft" (formula "1"))
                  (rule "close" (formula "16") (ifseqformula "1"))
               )
            )
            (branch "CUT: verif.selectvoting.system.core.MixServer::trans(heap, heapAtPre, a[j], a[x_0], a[ x_0 + 1]) = TRUE FALSE"
               (builtin "One Step Simplification" (formula "13"))
               (builtin "One Step Simplification" (formula "9"))
               (rule "true_left" (formula "9"))
               (rule "allRight" (formula "16") (inst "sk=i_7"))
               (rule "impRight" (formula "16"))
               (rule "andLeft" (formula "1"))
               (rule "polySimp_elimSub" (formula "14") (term "1,1,0,0"))
               (rule "mul_literals" (formula "14") (term "1,1,1,0,0"))
               (rule "polySimp_addComm0" (formula "5") (term "0"))
               (rule "polySimp_addComm0" (formula "16") (term "0,2,4,0"))
               (rule "polySimp_addComm0" (formula "4") (term "1"))
               (rule "polySimp_addComm0" (formula "17") (term "0,2,2,0"))
               (rule "polySimp_addComm0" (formula "3") (term "0,2,2,0"))
               (rule "polySimp_addComm0" (formula "14") (term "0,2,2,0,1,0"))
               (rule "polySimp_addComm0" (formula "14") (term "1,1,0,0"))
               (rule "inEqSimp_leqRight" (formula "18"))
               (rule "times_zero_1" (formula "1") (term "1,0,0"))
               (rule "add_zero_right" (formula "1") (term "0,0"))
               (rule "inEqSimp_ltToLeq" (formula "14"))
               (rule "polySimp_mulComm0" (formula "14") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "14") (term "0"))
               (rule "inEqSimp_leqRight" (formula "18"))
               (rule "times_zero_1" (formula "1") (term "1,0,0"))
               (rule "add_zero_right" (formula "1") (term "0,0"))
               (rule "inEqSimp_ltToLeq" (formula "4"))
               (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "4") (term "0"))
               (rule "inEqSimp_ltToLeq" (formula "7"))
               (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "7") (term "0"))
               (rule "polySimp_addAssoc" (formula "7") (term "0,0"))
               (rule "add_literals" (formula "7") (term "0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "16") (term "0,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "14"))
               (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
               (rule "inEqSimp_homoInEq0" (formula "6"))
               (rule "polySimp_addComm1" (formula "6") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "2"))
               (rule "mul_literals" (formula "2") (term "1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "15"))
               (rule "polySimp_mulLiterals" (formula "15") (term "0"))
               (rule "polySimp_elimOne" (formula "15") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "1"))
               (rule "mul_literals" (formula "1") (term "1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "4"))
               (rule "polySimp_mulLiterals" (formula "4") (term "0"))
               (rule "polySimp_elimOne" (formula "4") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "7"))
               (rule "polySimp_mulLiterals" (formula "7") (term "0"))
               (rule "polySimp_elimOne" (formula "7") (term "0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0"))
               (rule "mul_literals" (formula "16") (term "0,1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "6"))
               (rule "polySimp_mulComm0" (formula "6") (term "1"))
               (rule "polySimp_rightDist" (formula "6") (term "1"))
               (rule "mul_literals" (formula "6") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
               (rule "polySimp_elimOne" (formula "6") (term "1,1"))
               (rule "nonNull" (formula "17") (inst "i=i"))
               (rule "greater_literals" (formula "17") (term "0,1"))
               (builtin "One Step Simplification" (formula "17"))
               (rule "sub_literals" (formula "17") (term "2,1,0,1"))
               (builtin "One Step Simplification" (formula "17"))
               (rule "andLeft" (formula "17"))
               (rule "notLeft" (formula "17"))
               (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "18"))
               (builtin "One Step Simplification" (formula "12"))
               (rule "narrowSelectArrayType" (formula "17") (term "0,0,1,0") (ifseqformula "10") (ifseqformula "18"))
               (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0"))
               (rule "mul_literals" (formula "17") (term "0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0"))
               (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "3"))
               (rule "times_zero_1" (formula "14") (term "0,0"))
               (rule "add_zero_left" (formula "14") (term "0"))
               (rule "nnf_imp2or" (formula "17") (term "0"))
               (rule "nnf_imp2or" (formula "18") (term "0"))
               (rule "nnf_notAnd" (formula "17") (term "0,0"))
               (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "17") (term "0,0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0"))
               (rule "mul_literals" (formula "17") (term "0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0"))
               (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0"))
               (rule "times_zero_1" (formula "17") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "17") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0"))
               (rule "mul_literals" (formula "17") (term "1,0,0,0"))
               (rule "nnf_notAnd" (formula "18") (term "0,0"))
               (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "18") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "18") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0"))
               (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0"))
               (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "18") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0"))
               (rule "mul_literals" (formula "18") (term "1,0,0,0"))
               (rule "Contract_axiom_for_trans_in_MixServer" (formula "20") (term "0"))
               (rule "replace_known_left" (formula "1") (term "1,1,0") (ifseqformula "12"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "10")) (ifInst ""  (formula "6")) (ifInst ""  (formula "11")) (ifInst ""  (formula "21")))
               (rule "notLeft" (formula "1"))
               (rule "commute_or_2" (formula "18") (term "0"))
               (rule "commute_or" (formula "18") (term "0,0"))
               (rule "shift_paren_and" (formula "19"))
               (rule "allLeft" (formula "18") (inst "t=j"))
               (rule "inEqSimp_commuteGeq" (formula "18") (term "1"))
               (rule "inEqSimp_contradInEq1" (formula "18") (term "1,0") (ifseqformula "15"))
               (rule "qeq_literals" (formula "18") (term "0,1,0"))
               (builtin "One Step Simplification" (formula "18"))
               (rule "inEqSimp_contradInEq1" (formula "18") (term "1") (ifseqformula "16"))
               (rule "inEqSimp_homoInEq1" (formula "18") (term "0,1"))
               (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0,1"))
               (rule "add_literals" (formula "18") (term "1,1,0,0,1"))
               (rule "times_zero_1" (formula "18") (term "1,0,0,1"))
               (rule "add_zero_right" (formula "18") (term "0,0,1"))
               (rule "leq_literals" (formula "18") (term "0,1"))
               (builtin "One Step Simplification" (formula "18"))
               (rule "notLeft" (formula "18"))
               (rule "replace_known_right" (formula "20") (term "0,0,0") (ifseqformula "19"))
               (builtin "One Step Simplification" (formula "20"))
               (rule "allLeft" (formula "18") (inst "t=x_0"))
               (rule "inEqSimp_commuteGeq" (formula "18") (term "1"))
               (rule "inEqSimp_contradInEq1" (formula "18") (term "1") (ifseqformula "7"))
               (rule "inEqSimp_homoInEq1" (formula "18") (term "0,1"))
               (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0,1"))
               (rule "add_literals" (formula "18") (term "1,1,0,0,1"))
               (rule "times_zero_1" (formula "18") (term "1,0,0,1"))
               (rule "add_literals" (formula "18") (term "0,0,1"))
               (rule "leq_literals" (formula "18") (term "0,1"))
               (builtin "One Step Simplification" (formula "18"))
               (rule "inEqSimp_contradInEq1" (formula "18") (term "1") (ifseqformula "8"))
               (rule "qeq_literals" (formula "18") (term "0,1"))
               (builtin "One Step Simplification" (formula "18"))
               (rule "notLeft" (formula "18"))
               (rule "replace_known_right" (formula "21") (term "0,0") (ifseqformula "19"))
               (builtin "One Step Simplification" (formula "21"))
               (rule "notRight" (formula "21"))
               (rule "applyEq" (formula "2") (term "2,0") (ifseqformula "1"))
               (rule "applyEq" (formula "6") (term "2,0") (ifseqformula "1"))
               (rule "applyEq" (formula "23") (term "4,0") (ifseqformula "1"))
               (rule "Contract_axiom_for_trans_in_MixServer" (formula "23") (term "0"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "11")) (ifInst ""  (formula "7")) (ifInst ""  (formula "22")) (ifInst ""  (formula "21")) (ifInst ""  (formula "12")) (ifInst ""  (formula "13")) (ifInst ""  (formula "24")))
               (rule "true_left" (formula "1"))
               (rule "allLeft" (formula "19") (inst "t=add(Z(1(#)), x_0)"))
               (rule "replace_known_left" (formula "19") (term "0,0,0") (ifseqformula "1"))
               (builtin "One Step Simplification" (formula "19"))
               (rule "inEqSimp_commuteGeq" (formula "19") (term "1"))
               (rule "inEqSimp_homoInEq0" (formula "19") (term "0"))
               (rule "polySimp_mulComm0" (formula "19") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "19") (term "1,0,0"))
               (rule "mul_literals" (formula "19") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "19") (term "0,0"))
               (rule "add_literals" (formula "19") (term "0,0,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "19") (term "0"))
               (rule "polySimp_mulLiterals" (formula "19") (term "0,0"))
               (rule "polySimp_elimOne" (formula "19") (term "0,0"))
               (rule "inEqSimp_contradInEq1" (formula "19") (term "1") (ifseqformula "8"))
               (rule "inEqSimp_homoInEq1" (formula "19") (term "0,1"))
               (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1"))
               (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1"))
               (rule "mul_literals" (formula "19") (term "0,1,0,0,1"))
               (rule "polySimp_addAssoc" (formula "19") (term "0,0,1"))
               (rule "polySimp_addComm1" (formula "19") (term "0,0,0,1"))
               (rule "add_literals" (formula "19") (term "0,0,0,0,1"))
               (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,0,1"))
               (rule "add_literals" (formula "19") (term "1,1,0,0,1"))
               (rule "times_zero_1" (formula "19") (term "1,0,0,1"))
               (rule "add_zero_right" (formula "19") (term "0,0,1"))
               (rule "leq_literals" (formula "19") (term "0,1"))
               (builtin "One Step Simplification" (formula "19"))
               (rule "inEqSimp_contradInEq1" (formula "19") (ifseqformula "9"))
               (rule "qeq_literals" (formula "19") (term "0"))
               (builtin "One Step Simplification" (formula "19"))
               (rule "closeFalse" (formula "19"))
            )
         )
      )
   )
   (branch "Use Case"
      (builtin "One Step Simplification" (formula "9"))
      (builtin "One Step Simplification" (formula "5"))
      (rule "true_left" (formula "5"))
      (rule "translateJavaSubInt" (formula "8") (term "1,1,0,0"))
      (rule "translateJavaAddInt" (formula "8") (term "0,2,2,0,1,0"))
      (rule "allRight" (formula "10") (inst "sk=i_9"))
      (rule "impRight" (formula "10"))
      (rule "andLeft" (formula "1"))
      (rule "polySimp_elimSub" (formula "10") (term "1,1,0,0"))
      (rule "mul_literals" (formula "10") (term "1,1,1,0,0"))
      (rule "polySimp_addComm0" (formula "10") (term "0,2,2,0,1,0"))
      (rule "polySimp_addComm0" (formula "10") (term "1,1,0,0"))
      (rule "inEqSimp_leqRight" (formula "12"))
      (rule "times_zero_1" (formula "1") (term "1,0,0"))
      (rule "add_zero_right" (formula "1") (term "0,0"))
      (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,1,0"))
      (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "10"))
      (rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "10") (term "0"))
      (rule "inEqSimp_ltToLeq" (formula "3"))
      (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "3") (term "0"))
      (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "9"))
      (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "1"))
      (rule "mul_literals" (formula "1") (term "1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,1,0"))
      (rule "polySimp_mulComm0" (formula "4") (term "1,1,0,1,0"))
      (rule "polySimp_rightDist" (formula "4") (term "1,1,0,1,0"))
      (rule "mul_literals" (formula "4") (term "0,1,1,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,0,1,0"))
      (rule "polySimp_elimOne" (formula "4") (term "1,1,1,0,1,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "10"))
      (rule "polySimp_mulLiterals" (formula "10") (term "0"))
      (rule "polySimp_elimOne" (formula "10") (term "0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "3"))
      (rule "polySimp_mulLiterals" (formula "3") (term "0"))
      (rule "polySimp_elimOne" (formula "3") (term "0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
      (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
      (rule "nonNull" (formula "12") (inst "i=i"))
      (rule "sub_literals" (formula "12") (term "2,1,0,1,1"))
      (builtin "One Step Simplification" (formula "12"))
      (rule "greater_literals" (formula "12") (term "0,1"))
      (builtin "One Step Simplification" (formula "12"))
      (rule "andLeft" (formula "12"))
      (rule "notLeft" (formula "12"))
      (rule "replace_known_right" (formula "7") (term "0") (ifseqformula "13"))
      (builtin "One Step Simplification" (formula "7"))
      (rule "narrowSelectArrayType" (formula "12") (term "0,0,1,0") (ifseqformula "5") (ifseqformula "13"))
      (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
      (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
      (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "2"))
      (rule "times_zero_1" (formula "9") (term "0,0"))
      (rule "add_zero_left" (formula "9") (term "0"))
      (rule "nnf_imp2or" (formula "4") (term "0"))
      (rule "inEqSimp_notGeq" (formula "4") (term "0,0"))
      (rule "times_zero_1" (formula "4") (term "1,0,0,0,0"))
      (rule "add_zero_right" (formula "4") (term "0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "0,0"))
      (rule "mul_literals" (formula "4") (term "1,0,0"))
      (rule "nnf_imp2or" (formula "12") (term "0"))
      (rule "nnf_imp2or" (formula "13") (term "0"))
      (rule "nnf_imp2or" (formula "4") (term "1,0"))
      (rule "nnf_notAnd" (formula "12") (term "0,0"))
      (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0"))
      (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0"))
      (rule "add_zero_right" (formula "12") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
      (rule "mul_literals" (formula "12") (term "1,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
      (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
      (rule "nnf_notAnd" (formula "13") (term "0,0"))
      (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "13") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "13") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0"))
      (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0"))
      (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0"))
      (rule "add_zero_right" (formula "13") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
      (rule "mul_literals" (formula "13") (term "1,0,0,0"))
      (rule "nnf_notAnd" (formula "4") (term "0,1,0"))
      (rule "inEqSimp_notGeq" (formula "4") (term "0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "4") (term "1,0,0,1,0"))
      (rule "mul_literals" (formula "4") (term "0,1,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "4") (term "1,1,0,0,1,0"))
      (rule "inEqSimp_notLeq" (formula "4") (term "1,0,1,0"))
      (rule "polySimp_rightDist" (formula "4") (term "1,0,0,1,0,1,0"))
      (rule "mul_literals" (formula "4") (term "0,1,0,0,1,0,1,0"))
      (rule "polySimp_addAssoc" (formula "4") (term "0,0,1,0,1,0"))
      (rule "add_literals" (formula "4") (term "0,0,0,1,0,1,0"))
      (rule "add_zero_left" (formula "4") (term "0,0,1,0,1,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "4") (term "1,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,1,0"))
      (rule "polySimp_elimOne" (formula "4") (term "1,1,0,1,0"))
      (rule "commute_or_2" (formula "13") (term "0"))
      (rule "shift_paren_or" (formula "4") (term "0"))
      (rule "commute_or" (formula "13") (term "0,0"))
      (rule "shift_paren_or" (formula "4") (term "0,0"))
      (rule "allLeft" (formula "4") (inst "t=i_9"))
      (rule "inEqSimp_commuteGeq" (formula "4") (term "1,0"))
      (rule "inEqSimp_homoInEq0" (formula "4") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "4") (term "0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "4") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "4") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "4") (term "1,1,0,0"))
      (rule "mul_literals" (formula "4") (term "0,1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "4") (term "1,1,1,0,0"))
      (rule "inEqSimp_contradInEq1" (formula "4") (term "0,0,0") (ifseqformula "10"))
      (rule "qeq_literals" (formula "4") (term "0,0,0,0"))
      (builtin "One Step Simplification" (formula "4"))
      (rule "inEqSimp_contradInEq1" (formula "4") (term "1") (ifseqformula "1"))
      (rule "qeq_literals" (formula "4") (term "0,1"))
      (builtin "One Step Simplification" (formula "4"))
      (rule "inEqSimp_contradInEq1" (formula "4") (term "1") (ifseqformula "3"))
      (rule "inEqSimp_homoInEq1" (formula "4") (term "0,1"))
      (rule "polySimp_pullOutFactor1b" (formula "4") (term "0,0,1"))
      (rule "add_literals" (formula "4") (term "1,1,0,0,1"))
      (rule "times_zero_1" (formula "4") (term "1,0,0,1"))
      (rule "add_zero_right" (formula "4") (term "0,0,1"))
      (rule "leq_literals" (formula "4") (term "0,1"))
      (builtin "One Step Simplification" (formula "4"))
      (rule "inEqSimp_contradInEq0" (formula "4") (ifseqformula "2"))
      (rule "andLeft" (formula "4"))
      (rule "inEqSimp_homoInEq1" (formula "4"))
      (rule "polySimp_pullOutFactor1b" (formula "4") (term "0"))
      (rule "add_literals" (formula "4") (term "1,1,0"))
      (rule "times_zero_1" (formula "4") (term "1,0"))
      (rule "add_zero_right" (formula "4") (term "0"))
      (rule "leq_literals" (formula "4"))
      (rule "closeFalse" (formula "4"))
   )
)
(branch "Case 2"
   (builtin "One Step Simplification" (formula "8"))
   (builtin "One Step Simplification" (formula "4"))
   (rule "true_left" (formula "4"))
   (rule "translateJavaAddInt" (formula "7") (term "0,2,2,0,1,0"))
   (rule "translateJavaSubInt" (formula "7") (term "1,1,0,0"))
   (rule "polySimp_elimSub" (formula "7") (term "1,1,0,0"))
   (rule "mul_literals" (formula "7") (term "1,1,1,0,0"))
   (rule "polySimp_addComm0" (formula "7") (term "0,2,2,0,1,0"))
   (rule "polySimp_addComm0" (formula "7") (term "1,1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "6"))
   (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
   (rule "polySimp_addComm1" (formula "6") (term "0"))
   (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "7") (term "0,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "5"))
   (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "6"))
   (rule "polySimp_mulLiterals" (formula "6") (term "0"))
   (rule "polySimp_elimOne" (formula "6") (term "0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
   (rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
   (rule "nonNull" (formula "8") (inst "i=i"))
   (rule "greater_literals" (formula "8") (term "0,1"))
   (builtin "One Step Simplification" (formula "8"))
   (rule "sub_literals" (formula "8") (term "2,1,0,1"))
   (builtin "One Step Simplification" (formula "8"))
   (rule "andLeft" (formula "8"))
   (rule "notLeft" (formula "8"))
   (rule "replace_known_right" (formula "3") (term "0") (ifseqformula "9"))
   (builtin "One Step Simplification" (formula "3"))
   (rule "narrowSelectArrayType" (formula "8") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "9"))
   (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
   (rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
   (rule "nnf_imp2or" (formula "7") (term "0"))
   (rule "nnf_imp2or" (formula "8") (term "0"))
   (rule "nnf_notAnd" (formula "7") (term "0,0"))
   (rule "inEqSimp_notLeq" (formula "7") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "7") (term "0,0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
   (rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
   (rule "inEqSimp_notGeq" (formula "7") (term "0,0,0"))
   (rule "times_zero_1" (formula "7") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "7") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0"))
   (rule "mul_literals" (formula "7") (term "1,0,0,0"))
   (rule "nnf_notAnd" (formula "8") (term "0,0"))
   (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0"))
   (rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "8") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
   (rule "mul_literals" (formula "8") (term "1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "8") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "8") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0"))
   (rule "Contract_axiom_for_minEl_in_MixServer" (formula "10") (term "0") (inst "i=i") (inst "i_0=i_0"))
   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "2")) (ifInst ""  (formula "3")) (ifInst ""  (formula "11")))
   (rule "translateJavaSubInt" (formula "1") (term "1,1,0,0,0,1,0"))
   (rule "translateJavaAddInt" (formula "1") (term "0,2,2,0,1,0,0,1,0"))
   (rule "notLeft" (formula "1"))
   (rule "polySimp_elimSub" (formula "9") (term "1,1,0,0,0,1"))
   (rule "mul_literals" (formula "9") (term "1,1,1,0,0,0,1"))
   (rule "polySimp_addComm0" (formula "9") (term "0,2,2,0,1,0,0,1"))
   (rule "polySimp_addComm0" (formula "9") (term "1,1,0,0,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0"))
   (rule "polySimp_addComm1" (formula "9") (term "0,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0,0,1"))
   (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0,0,1"))
   (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0,0,1"))
   (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0,0,1"))
   (rule "add_literals" (formula "9") (term "0,0,0,1,0,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0"))
   (rule "replace_known_left" (formula "9") (term "0,0") (ifseqformula "5"))
   (builtin "One Step Simplification" (formula "9"))
   (rule "inEqSimp_sepNegMonomial0" (formula "9") (term "0"))
   (rule "polySimp_mulLiterals" (formula "9") (term "0,0"))
   (rule "polySimp_elimOne" (formula "9") (term "0,0"))
   (rule "replace_known_left" (formula "9") (term "0") (ifseqformula "6"))
   (builtin "One Step Simplification" (formula "9"))
   (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0,0"))
   (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0,0"))
   (rule "mul_literals" (formula "9") (term "0,1,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0,0"))
   (rule "nonNull" (formula "9") (term "1") (inst "i=i"))
   (rule "greater_literals" (formula "9") (term "0,1,1"))
   (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "10")))
   (rule "sub_literals" (formula "9") (term "2,1,0,1"))
   (builtin "One Step Simplification" (formula "9"))
   (rule "narrowSelectArrayType" (formula "9") (term "0,0,1,0,1") (ifseqformula "1") (ifseqformula "10"))
   (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0,1"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0,1"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0,1"))
   (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0,1"))
   (rule "mul_literals" (formula "9") (term "0,1,1,0,0,1"))
   (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0,1"))
   (rule "nnf_imp2or" (formula "9") (term "0,0"))
   (rule "nnf_imp2or" (formula "9") (term "0,1"))
   (rule "nnf_notAnd" (formula "9") (term "0,0,0"))
   (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0,0"))
   (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0,0"))
   (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0,0"))
   (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0,0"))
   (rule "add_literals" (formula "9") (term "0,0,0,1,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0,0"))
   (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0,0"))
   (rule "mul_literals" (formula "9") (term "0,1,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0,0"))
   (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0,0"))
   (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0,0"))
   (rule "add_zero_right" (formula "9") (term "0,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0,0"))
   (rule "mul_literals" (formula "9") (term "1,0,0,0,0"))
   (rule "replace_known_left" (formula "9") (term "0") (ifseqformula "7"))
   (builtin "One Step Simplification" (formula "9"))
   (rule "allRight" (formula "9") (inst "sk=i_0"))
   (rule "orRight" (formula "9"))
   (rule "notRight" (formula "9"))
   (rule "notRight" (formula "10"))
   (rule "andLeft" (formula "2"))
   (rule "inEqSimp_homoInEq0" (formula "3"))
   (rule "polySimp_addComm1" (formula "3") (term "0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "3"))
   (rule "polySimp_mulComm0" (formula "3") (term "1"))
   (rule "polySimp_rightDist" (formula "3") (term "1"))
   (rule "mul_literals" (formula "3") (term "0,1"))
   (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
   (rule "polySimp_elimOne" (formula "3") (term "1,1"))
   (rule "commute_or_2" (formula "11") (term "0"))
   (rule "commute_or" (formula "11") (term "0,0"))
   (rule "arrayLengthIsAShort" (formula "9") (term "0"))
   (builtin "One Step Simplification" (formula "9"))
   (rule "true_left" (formula "9"))
   (rule "arrayLengthNotNegative" (formula "9") (term "0"))
   (rule "allLeft" (formula "12") (inst "t=i_0"))
   (rule "replace_known_left" (formula "12") (term "0,0,0") (ifseqformula "1"))
   (builtin "One Step Simplification" (formula "12"))
   (rule "inEqSimp_commuteGeq" (formula "12") (term "1"))
   (rule "inEqSimp_contradInEq1" (formula "12") (term "0") (ifseqformula "2"))
   (rule "qeq_literals" (formula "12") (term "0,0"))
   (builtin "One Step Simplification" (formula "12"))
   (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "12"))
   (rule "andLeft" (formula "3"))
   (rule "inEqSimp_homoInEq1" (formula "3"))
   (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
   (rule "add_literals" (formula "3") (term "1,1,0"))
   (rule "times_zero_1" (formula "3") (term "1,0"))
   (rule "add_zero_right" (formula "3") (term "0"))
   (rule "leq_literals" (formula "3"))
   (rule "closeFalse" (formula "3"))
)
)

}
