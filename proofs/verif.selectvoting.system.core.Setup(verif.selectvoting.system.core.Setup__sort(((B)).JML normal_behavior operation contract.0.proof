\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Sun Mar 20 13:08:55 CET 2016
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=4000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:allow , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\javaSource "../src";

\proofObligation "#Proof Obligation Settings
#Sun Mar 20 13:08:55 CET 2016
name=verif.selectvoting.system.core.Setup[verif.selectvoting.system.core.Setup\\:\\:sort([[B)].JML normal_behavior operation contract.0
contract=verif.selectvoting.system.core.Setup[verif.selectvoting.system.core.Setup\\:\\:sort([[B)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "mihai" ) (keyVersion "6bc7ade97061383f11985e24decf735b7f2f0af2"))

(autoModeTime "22888")

(branch "dummy ID"
(builtin "One Step Simplification" (formula "1") (newnames "entr_arr,result,exc,heapAtPre,o,f"))
(rule "translateJavaSubInt" (formula "1") (term "1,1,0,0,0,1,0,0,0,1,1"))
(rule "translateJavaAddInt" (formula "1") (term "0,2,2,0,1,0,0,1,0,0,0,1,1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "eqSymm" (formula "5") (term "1,0,0,1,0,1"))
(rule "polySimp_elimSub" (formula "5") (term "1,1,0,0,0,1,0,0,0,1"))
(rule "mul_literals" (formula "5") (term "1,1,1,0,0,0,1,0,0,0,1"))
(rule "polySimp_addComm0" (formula "5") (term "0,2,2,0,1,0,0,1,0,0,0,1"))
(rule "polySimp_addComm0" (formula "5") (term "1,1,0,0,0,1,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,0,0,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "5") (term "1,0,0,1,0,0,0,1,0,0,0,1"))
(rule "mul_literals" (formula "5") (term "0,1,0,0,1,0,0,0,1,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "5") (term "0,0,1,0,0,0,1,0,0,0,1"))
(rule "add_literals" (formula "5") (term "0,0,0,1,0,0,0,1,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0,0,1,0,0,0,1"))
(rule "assignment" (formula "5") (term "1"))
(builtin "One Step Simplification" (formula "5"))
(rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0,0,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "5") (term "1,1,0,0,0,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "5") (term "1,1,0,0,0,1,0,0,0,1"))
(rule "mul_literals" (formula "5") (term "0,1,1,0,0,0,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,0,0,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "5") (term "1,1,1,0,0,0,1,0,0,0,1"))
(rule "nonNull" (formula "4") (inst "i=i"))
(rule "greater_literals" (formula "4") (term "0,1"))
(builtin "One Step Simplification" (formula "4"))
(rule "sub_literals" (formula "4") (term "2,1,0,1"))
(builtin "One Step Simplification" (formula "4"))
(rule "andLeft" (formula "4"))
(rule "notLeft" (formula "4"))
(rule "replace_known_right" (formula "2") (term "0") (ifseqformula "5"))
(builtin "One Step Simplification" (formula "2"))
(rule "narrowSelectArrayType" (formula "4") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "5"))
(rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,0"))
(rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "4") (term "1,1,0,0"))
(rule "polySimp_rightDist" (formula "4") (term "1,1,0,0"))
(rule "mul_literals" (formula "4") (term "0,1,1,0,0"))
(rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,0,0"))
(rule "polySimp_elimOne" (formula "4") (term "1,1,1,0,0"))
(rule "nonNull" (formula "6") (term "1,1,1,0,0,0,1") (inst "i=i"))
(rule "greater_literals" (formula "6") (term "0,1,1,1,1,0,0,0,1"))
(builtin "One Step Simplification" (formula "6"))
(rule "sub_literals" (formula "6") (term "2,1,0,1,1,1,1,0,0,0,1"))
(builtin "One Step Simplification" (formula "6"))
(rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0,1,1,1,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0,1,1,1,1,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0,1,1,1,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0,1,1,1,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0,1,1,1,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "6") (term "1,1,0,0,1,1,1,1,0,0,0,1"))
(rule "mul_literals" (formula "6") (term "0,1,1,0,0,1,1,1,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0,1,1,1,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0,1,1,1,1,0,0,0,1"))
(rule "nnf_imp2or" (formula "4") (term "0"))
(rule "nnf_notAnd" (formula "4") (term "0,0"))
(rule "inEqSimp_notGeq" (formula "4") (term "0,0,0"))
(rule "times_zero_1" (formula "4") (term "1,0,0,0,0,0"))
(rule "add_literals" (formula "4") (term "0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "4") (term "0,0,0"))
(rule "mul_literals" (formula "4") (term "1,0,0,0"))
(rule "inEqSimp_notLeq" (formula "4") (term "1,0,0"))
(rule "polySimp_rightDist" (formula "4") (term "1,0,0,1,0,0"))
(rule "mul_literals" (formula "4") (term "0,1,0,0,1,0,0"))
(rule "polySimp_addAssoc" (formula "4") (term "0,0,1,0,0"))
(rule "add_literals" (formula "4") (term "0,0,0,1,0,0"))
(rule "add_zero_left" (formula "4") (term "0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "4") (term "1,0,0"))
(rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0"))
(rule "polySimp_elimOne" (formula "4") (term "1,1,0,0"))
(rule "nnf_imp2or" (formula "6") (term "0,0,1,0,0,0,1"))
(rule "nnf_imp2or" (formula "6") (term "0,1,1,1,1,0,0,0,1"))
(rule "nnf_notAnd" (formula "6") (term "0,0,0,1,0,0,0,1"))
(rule "inEqSimp_notLeq" (formula "6") (term "1,0,0,0,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0,0,1,0,0,0,1"))
(rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,0,0,1,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0,0,1,0,0,0,1"))
(rule "add_literals" (formula "6") (term "0,0,0,1,0,0,0,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0,0,0,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0,0,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "6") (term "1,1,0,0,0,1,0,0,0,1"))
(rule "mul_literals" (formula "6") (term "0,1,1,0,0,0,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0,0,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0,0,1,0,0,0,1"))
(rule "inEqSimp_notGeq" (formula "6") (term "0,0,0,0,1,0,0,0,1"))
(rule "times_zero_1" (formula "6") (term "1,0,0,0,0,0,0,1,0,0,0,1"))
(rule "add_literals" (formula "6") (term "0,0,0,0,0,0,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0,0,1,0,0,0,1"))
(rule "mul_literals" (formula "6") (term "1,0,0,0,0,1,0,0,0,1"))
(rule "nnf_notAnd" (formula "6") (term "0,0,1,1,1,1,0,0,0,1"))
(rule "inEqSimp_notLeq" (formula "6") (term "1,0,0,1,1,1,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0,1,1,1,1,0,0,0,1"))
(rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,0,1,1,1,1,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0,1,1,1,1,0,0,0,1"))
(rule "add_literals" (formula "6") (term "0,0,0,1,0,0,1,1,1,1,0,0,0,1"))
(rule "add_zero_left" (formula "6") (term "0,0,1,0,0,1,1,1,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0,0,1,1,1,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0,1,1,1,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "6") (term "1,1,0,0,1,1,1,1,0,0,0,1"))
(rule "inEqSimp_notGeq" (formula "6") (term "0,0,0,1,1,1,1,0,0,0,1"))
(rule "times_zero_1" (formula "6") (term "1,0,0,0,0,0,1,1,1,1,0,0,0,1"))
(rule "add_literals" (formula "6") (term "0,0,0,0,0,1,1,1,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0,1,1,1,1,0,0,0,1"))
(rule "mul_literals" (formula "6") (term "1,0,0,0,1,1,1,1,0,0,0,1"))
(rule "commute_or_2" (formula "4") (term "0"))
(rule "commute_or" (formula "4") (term "0,0"))
(rule "methodBodyExpand" (formula "6") (term "1") (newnames "heapBefore_sort,savedHeapBefore_sort"))
(builtin "One Step Simplification" (formula "6"))
(rule "variableDeclarationAssign" (formula "6") (term "1"))
(rule "variableDeclaration" (formula "6") (term "1") (newnames "result_1"))
(builtin "Use Operation Contract" (formula "6") (newnames "heapBefore_copyOf,result_0,exc_0,heapAfter_copyOf,anon_heap_copyOf") (contract "verif.selectvoting.system.core.Utils[verif.selectvoting.system.core.Utils::copyOf([[B)].JML normal_behavior operation contract.0"))
(branch "Post (copyOf)"
   (builtin "One Step Simplification" (formula "6"))
   (builtin "One Step Simplification" (formula "8"))
   (rule "andLeft" (formula "6"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "7") (term "1,1,0") (ifseqformula "6"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "9"))
   (rule "notLeft" (formula "10"))
   (rule "notLeft" (formula "9"))
   (rule "replace_known_right" (formula "7") (term "0,1") (ifseqformula "11"))
   (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "12")))
   (rule "assignment" (formula "14") (term "1"))
   (builtin "One Step Simplification" (formula "14"))
   (rule "nonNull" (formula "9") (inst "i=i"))
   (rule "greater_literals" (formula "9") (term "0,1"))
   (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "12")))
   (rule "sub_literals" (formula "9") (term "2,1,0"))
   (builtin "One Step Simplification" (formula "9"))
   (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
   (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
   (rule "nnf_imp2or" (formula "9") (term "0"))
   (rule "nnf_notAnd" (formula "9") (term "0,0"))
   (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0"))
   (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "9") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
   (rule "mul_literals" (formula "9") (term "1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "9") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "9") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0"))
   (rule "commute_or_2" (formula "9") (term "0"))
   (rule "commute_or" (formula "9") (term "0,0"))
   (rule "ifElseUnfold" (formula "14") (term "1") (inst "#boolv=x"))
   (rule "variableDeclaration" (formula "14") (term "1") (newnames "x"))
   (rule "inequality_comparison_simple" (formula "14") (term "1"))
   (builtin "One Step Simplification" (formula "14"))
   (rule "replace_known_right" (formula "14") (term "0,0,1,0") (ifseqformula "12"))
   (builtin "One Step Simplification" (formula "14"))
   (rule "arrayLengthNotNegative" (formula "4") (term "1,1,0"))
   (rule "arrayLengthIsAShort" (formula "5") (term "1,1,0"))
   (builtin "One Step Simplification" (formula "5"))
   (rule "true_left" (formula "5"))
   (rule "ifElseSplit" (formula "15"))
   (branch "if x true"
      (builtin "One Step Simplification" (formula "16"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "true_left" (formula "1"))
      (rule "methodCallUnfoldArguments" (formula "15") (term "1"))
      (rule "variableDeclarationAssign" (formula "15") (term "1"))
      (rule "variableDeclaration" (formula "15") (term "1") (newnames "var"))
      (rule "assignment" (formula "15") (term "1"))
      (builtin "One Step Simplification" (formula "15"))
      (rule "variableDeclarationAssign" (formula "15") (term "1"))
      (rule "variableDeclaration" (formula "15") (term "1") (newnames "var_1"))
      (rule "assignment" (formula "15") (term "1"))
      (builtin "One Step Simplification" (formula "15"))
      (rule "variableDeclarationAssign" (formula "15") (term "1"))
      (rule "variableDeclaration" (formula "15") (term "1") (newnames "var_2"))
      (rule "assignment_read_length" (formula "15") (term "1"))
      (branch "Normal Execution (result_1 != null)"
         (builtin "One Step Simplification" (formula "16"))
         (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "13")))
         (rule "false_right" (formula "15"))
         (builtin "Use Operation Contract" (formula "15") (newnames "heapBefore_sort_0,exc_1,heapAfter_sort,anon_heap_sort") (contract "verif.selectvoting.system.core.Utils[verif.selectvoting.system.core.Utils::sort([[B,int,int)].JML normal_behavior operation contract.0"))
         (branch "Post (sort)"
            (builtin "One Step Simplification" (formula "17"))
            (builtin "One Step Simplification" (formula "13"))
            (rule "translateJavaAddInt" (formula "13") (term "0,2,2,0,1,0,0,1,0,1,1"))
            (rule "translateJavaSubInt" (formula "13") (term "1,1,0,0,0,1,0,1,1"))
            (rule "andLeft" (formula "13"))
            (rule "andLeft" (formula "14"))
            (rule "andLeft" (formula "15"))
            (rule "andLeft" (formula "15"))
            (rule "andLeft" (formula "16"))
            (rule "polySimp_elimSub" (formula "16") (term "1,1,0,0"))
            (rule "mul_literals" (formula "16") (term "1,1,1,0,0"))
            (rule "polySimp_addComm0" (formula "16") (term "0,2,2,0,1,0"))
            (rule "polySimp_addComm0" (formula "16") (term "1,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "16") (term "0,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
            (rule "blockEmpty" (formula "21") (term "1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0"))
            (rule "mul_literals" (formula "17") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0"))
            (rule "mul_literals" (formula "16") (term "0,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0"))
            (rule "array2seqDef" (formula "15") (term "0") (inst "u=u"))
            (rule "array2seqDef" (formula "15") (term "1") (inst "u=u"))
            (rule "nnf_imp2or" (formula "17") (term "0"))
            (rule "nnf_imp2or" (formula "16") (term "0"))
            (rule "nnf_notAnd" (formula "17") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0"))
            (rule "times_zero_1" (formula "17") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "17") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0"))
            (rule "mul_literals" (formula "17") (term "1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "17") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "17") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0"))
            (rule "nnf_notAnd" (formula "16") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "16") (term "0,0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0"))
            (rule "mul_literals" (formula "16") (term "0,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0"))
            (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0"))
            (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "16") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
            (rule "mul_literals" (formula "16") (term "1,0,0,0"))
            (rule "commute_or_2" (formula "17") (term "0"))
            (rule "commute_or" (formula "17") (term "0,0"))
            (rule "methodCallReturn" (formula "21") (term "1"))
            (rule "assignment" (formula "21") (term "1"))
            (builtin "One Step Simplification" (formula "21"))
            (rule "methodCallEmpty" (formula "21") (term "1"))
            (rule "tryEmpty" (formula "21") (term "1"))
            (rule "emptyModality" (formula "21") (term "1"))
            (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "16")) (ifInst ""  (formula "18")) (ifInst ""  (formula "19")) (ifInst ""  (formula "19")))
            (rule "andRight" (formula "21") (userinteraction))
            (branch "Case 1"
               (rule "andRight" (formula "21") (userinteraction))
               (branch
                  (rule "cut" (inst "cutFormula=  array2seq2d(heapAfter_copyOf, entr_arr)
= array2seq2d(heapAfter_sort, entr_arr)") (userinteraction))
                  (branch "CUT: array2seq2d(heapAfter_copyOf, entr_arr) = array2seq2d(heapAfter_sort, entr_arr) TRUE"
                     (rule "applyEqReverse" (formula "22") (term "1") (ifseqformula "1") (userinteraction))
                     (rule "applyEq" (formula "22") (term "1") (ifseqformula "1") (userinteraction))
                     (rule "applyEqReverse" (formula "22") (term "1") (ifseqformula "1") (userinteraction))
                     (rule "applyEqReverse" (formula "22") (term "1") (ifseqformula "10") (userinteraction))
                     (rule "seqPermDef" (formula "16") (inst "s=s") (inst "iv=iv") (userinteraction))
                     (rule "andLeft" (formula "16") (userinteraction))
                     (rule "seqPermDef" (formula "23") (inst "s=s") (inst "iv=iv") (userinteraction))
                     (rule "andRight" (formula "23") (userinteraction))
                     (branch "Case 1"
                        (rule "array2seq2dDef" (formula "23") (term "0,0") (inst "u=u") (userinteraction))
                        (rule "array2seq2dDef" (formula "23") (term "0,1") (inst "u=u") (userinteraction))
                        (rule "exLeft" (formula "17") (inst "sk=s_0"))
                        (rule "andLeft" (formula "17"))
                        (rule "andLeft" (formula "17"))
                        (rule "eqSymm" (formula "1"))
                        (rule "eqSymm" (formula "17"))
                        (rule "lenOfSeqDef" (formula "25") (term "1"))
                        (rule "polySimp_elimSub" (formula "25") (term "1,1"))
                        (rule "times_zero_2" (formula "25") (term "1,1,1"))
                        (rule "add_zero_right" (formula "25") (term "1,1"))
                        (rule "lenOfSeqDef" (formula "16") (term "0"))
                        (rule "eqSymm" (formula "16"))
                        (rule "polySimp_elimSub" (formula "16") (term "1,1"))
                        (rule "times_zero_2" (formula "16") (term "1,1,1"))
                        (rule "add_zero_right" (formula "16") (term "1,1"))
                        (rule "lenOfSeqDef" (formula "25") (term "0"))
                        (rule "polySimp_elimSub" (formula "25") (term "1,0"))
                        (rule "mul_literals" (formula "25") (term "1,1,0"))
                        (rule "add_zero_right" (formula "25") (term "1,0"))
                        (builtin "One Step Simplification" (formula "25"))
                        (rule "closeTrue" (formula "25"))
                     )
                     (branch "Case 2"
                        (rule "exLeft" (formula "17") (inst "sk=s_1") (userinteraction))
                        (rule "andLeft" (formula "17") (userinteraction))
                        (rule "andLeft" (formula "17") (userinteraction))
                        (rule "seqNPermRange" (formula "18") (inst "iv=iv") (userinteraction))
                        (rule "instEx" (formula "19") (term "0") (ifseqformula "26") (userinteraction))
                        (rule "andRight" (formula "23") (userinteraction))
                        (branch "Case 1"
                           (rule "array2seq2dDef" (formula "23") (term "0,1,0") (inst "u=u") (userinteraction))
                           (rule "eqSymm" (formula "17"))
                           (rule "eqSymm" (formula "27") (term "1,0,1,0"))
                           (rule "eqSymm" (formula "23") (term "0"))
                           (rule "eqSymm" (formula "1"))
                           (rule "replace_known_left" (formula "23") (term "1") (ifseqformula "19"))
                           (builtin "One Step Simplification" (formula "23"))
                           (rule "getOfSeqDef" (formula "20") (term "0,1,0"))
                           (rule "castDel" (formula "20") (term "1,0,1,0"))
                           (rule "castDel" (formula "20") (term "2,0,1,0"))
                           (rule "add_zero_right" (formula "20") (term "0,2,1,0,1,0"))
                           (rule "eqSymm" (formula "20") (term "1,0"))
                           (rule "polySimp_elimSub" (formula "20") (term "1,1,0,1,1,0"))
                           (rule "mul_literals" (formula "20") (term "1,1,1,0,1,1,0"))
                           (rule "add_zero_right" (formula "20") (term "1,1,0,1,1,0"))
                           (rule "lenOfSeqDef" (formula "16") (term "0"))
                           (rule "eqSymm" (formula "16"))
                           (rule "polySimp_elimSub" (formula "16") (term "1,1"))
                           (rule "times_zero_2" (formula "16") (term "1,1,1"))
                           (rule "add_zero_right" (formula "16") (term "1,1"))
                           (rule "lenOfSeqDef" (formula "17") (term "0"))
                           (rule "polySimp_elimSub" (formula "17") (term "1,0"))
                           (rule "times_zero_2" (formula "17") (term "1,1,0"))
                           (rule "add_zero_right" (formula "17") (term "1,0"))
                           (rule "lenOfSeqDef" (formula "23") (term "0"))
                           (rule "polySimp_elimSub" (formula "23") (term "1,0"))
                           (rule "mul_literals" (formula "23") (term "1,1,0"))
                           (rule "add_zero_right" (formula "23") (term "1,0"))
                           (rule "close" (formula "23") (ifseqformula "17"))
                        )
                        (branch
                           (rule "allRight" (formula "23") (inst "sk=iv_12") (userinteraction))
                           (rule "impRight" (formula "23") (userinteraction))
                           (rule "array2seq2dDef" (formula "24") (term "0,0") (inst "u=u") (userinteraction))
                           (rule "array2seq2dDef" (formula "24") (term "0,1") (inst "u=u") (userinteraction))
                           (rule "instAll" (formula "24") (term "1,0") (ifseqformula "21") (userinteraction))
                           (rule "impLeft" (formula "1") (userinteraction))
                           (branch "Case 1"
                              (rule "close" (formula "24") (ifseqformula "1"))
                           )
                           (branch "Case 2"
                              (rule "andLeft" (formula "2"))
                              (rule "eqSymm" (formula "20"))
                              (rule "eqSymm" (formula "30") (term "1,0,1,0"))
                              (rule "eqSymm" (formula "4"))
                              (rule "lenOfSeqDef" (formula "19") (term "1"))
                              (rule "polySimp_elimSub" (formula "19") (term "1,1"))
                              (rule "mul_literals" (formula "19") (term "1,1,1"))
                              (rule "add_zero_right" (formula "19") (term "1,1"))
                              (rule "lenOfSeqDef" (formula "19") (term "0"))
                              (rule "polySimp_elimSub" (formula "19") (term "1,0"))
                              (rule "times_zero_2" (formula "19") (term "1,1,0"))
                              (rule "add_zero_right" (formula "19") (term "1,0"))
                              (builtin "One Step Simplification" (formula "19"))
                              (rule "true_left" (formula "19"))
                              (rule "getOfSeqDef" (formula "22") (term "1,1,0"))
                              (rule "castDel" (formula "22") (term "1,1,1,0"))
                              (rule "castDel" (formula "22") (term "2,1,1,0"))
                              (rule "add_zero_right" (formula "22") (term "0,2,1,1,1,0"))
                              (rule "polySimp_elimSub" (formula "22") (term "1,1,0,1,1,0"))
                              (rule "times_zero_2" (formula "22") (term "1,1,1,0,1,1,0"))
                              (rule "add_zero_right" (formula "22") (term "1,1,0,1,1,0"))
                              (rule "getOfSeqDef" (formula "25") (term "1"))
                              (rule "castDel" (formula "25") (term "2,1"))
                              (rule "castDel" (formula "25") (term "1,1"))
                              (rule "add_zero_right" (formula "25") (term "0,2,1,1,1"))
                              (rule "polySimp_elimSub" (formula "25") (term "1,1,0,1"))
                              (rule "times_zero_2" (formula "25") (term "1,1,1,0,1"))
                              (rule "add_zero_right" (formula "25") (term "1,1,0,1"))
                              (rule "getOfSeqDef" (formula "1") (term "0"))
                              (rule "castDel" (formula "1") (term "1,0"))
                              (rule "castDel" (formula "1") (term "2,0"))
                              (rule "add_zero_right" (formula "1") (term "0,2,1,0"))
                              (rule "eqSymm" (formula "1"))
                              (rule "replace_known_left" (formula "1") (term "0,0,1") (ifseqformula "2"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "polySimp_elimSub" (formula "1") (term "1,0,1"))
                              (rule "times_zero_2" (formula "1") (term "1,1,0,1"))
                              (rule "add_zero_right" (formula "1") (term "1,0,1"))
                              (rule "getOfSeqDef" (formula "22") (term "0,1,0"))
                              (rule "castDel" (formula "22") (term "2,0,1,0"))
                              (rule "castDel" (formula "22") (term "1,0,1,0"))
                              (rule "add_zero_right" (formula "22") (term "0,2,1,0,1,0"))
                              (rule "eqSymm" (formula "22") (term "1,0"))
                              (rule "polySimp_elimSub" (formula "22") (term "1,1,0,1,1,0"))
                              (rule "times_zero_2" (formula "22") (term "1,1,1,0,1,1,0"))
                              (rule "add_zero_right" (formula "22") (term "1,1,0,1,1,0"))
                              (rule "getOfSeqDef" (formula "25") (term "0"))
                              (rule "castDel" (formula "25") (term "1,0"))
                              (rule "castDel" (formula "25") (term "2,0"))
                              (rule "add_zero_right" (formula "25") (term "0,2,1,1,0"))
                              (rule "eqSymm" (formula "25"))
                              (rule "replace_known_left" (formula "25") (term "0,0,1") (ifseqformula "2"))
                              (builtin "One Step Simplification" (formula "25"))
                              (rule "polySimp_elimSub" (formula "25") (term "1,0,1"))
                              (rule "times_zero_2" (formula "25") (term "1,1,0,1"))
                              (rule "add_zero_right" (formula "25") (term "1,0,1"))
                              (rule "lenOfSeqDef" (formula "19") (term "0"))
                              (rule "polySimp_elimSub" (formula "19") (term "1,0"))
                              (rule "times_zero_2" (formula "19") (term "1,1,0"))
                              (rule "add_zero_right" (formula "19") (term "1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "29") (term "1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,0,1,0"))
                              (rule "polySimp_addComm1" (formula "29") (term "0,1,0,0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "20") (term "1,1,0"))
                              (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "3"))
                              (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "3") (term "0"))
                              (rule "getOfSeqDef" (formula "1") (term "0"))
                              (rule "castDel" (formula "1") (term "1,0"))
                              (rule "castDel" (formula "1") (term "2,0"))
                              (rule "add_zero_right" (formula "1") (term "0,2,1,0"))
                              (rule "polySimp_elimSub" (formula "1") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "1") (term "1,1,1,0,0"))
                              (rule "add_zero_right" (formula "1") (term "1,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "1") (term "0,1"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,1"))
                              (rule "polySimp_addComm1" (formula "1") (term "0,0,1"))
                              (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "29") (term "0,0,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "20") (term "0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "2"))
                              (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0,1,0"))
                              (rule "eqSymm" (formula "22") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,1,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0"))
                              (rule "eqSymm" (formula "25"))
                              (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0"))
                              (rule "add_zero_right" (formula "19") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0,1,0"))
                              (rule "eqSymm" (formula "22") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,1,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "25") (term "0,0"))
                              (rule "eqSymm" (formula "25"))
                              (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,1"))
                              (rule "polySimp_addComm1" (formula "25") (term "0,0,1"))
                              (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,1,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0"))
                              (rule "applyEq" (formula "29") (term "0,0,1,0,1,0") (ifseqformula "13"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "29") (term "1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "29") (term "0,1,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "29") (term "0,1,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,1,0"))
                              (rule "polySimp_mulComm0" (formula "20") (term "1,1,1,0"))
                              (rule "polySimp_rightDist" (formula "20") (term "1,1,1,0"))
                              (rule "mul_literals" (formula "20") (term "0,1,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,1,0"))
                              (rule "polySimp_elimOne" (formula "20") (term "1,1,1,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                              (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                              (rule "polySimp_elimOne" (formula "3") (term "0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "0,0,1"))
                              (rule "polySimp_elimOne" (formula "1") (term "0,0,1"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "19") (term "0,0"))
                              (rule "polySimp_mulLiterals" (formula "19") (term "0,0,0"))
                              (rule "polySimp_elimOne" (formula "19") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0,1,0"))
                              (rule "mul_literals" (formula "22") (term "0,1,1,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,1,1,0"))
                              (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "22") (term "1,1,0,1,1,0"))
                              (rule "mul_literals" (formula "22") (term "0,1,1,0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,1,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "25") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "25") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "25") (term "0,0,1"))
                              (rule "polySimp_elimOne" (formula "25") (term "0,0,1"))
                              (rule "array2seqDef" (formula "25") (term "1,1") (inst "u=u"))
                              (rule "eqSymm" (formula "25"))
                              (rule "pullOutSelect" (formula "1") (term "1,1") (inst "selectSK=arr_154"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "18"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "applyEqReverse" (formula "2") (term "1,1") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "narrowSelectArrayType" (formula "1") (term "1,1") (ifseqformula "16") (ifseqformula "27"))
                              (rule "array2seqDef" (formula "25") (term "1,1") (inst "u=u"))
                              (rule "eqSymm" (formula "25"))
                              (rule "pullOutSelect" (formula "1") (term "1,0") (inst "selectSK=arr_155"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "12"))
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "28")) (ifInst ""  (formula "27")))
                              (rule "applyEqReverse" (formula "2") (term "1,0") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "narrowSelectArrayType" (formula "1") (term "1,0") (ifseqformula "10") (ifseqformula "27"))
                              (rule "pullOutSelect" (formula "25") (term "0,1,1,1") (inst "selectSK=arr_156"))
                              (rule "applyEq" (formula "26") (term "1,2,1,1") (ifseqformula "1"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "18"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "applyEqReverse" (formula "26") (term "0,1,1,1") (ifseqformula "1"))
                              (rule "applyEqReverse" (formula "26") (term "1,2,1,1") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "pullOutSelect" (formula "25") (term "1,2,1,0") (inst "selectSK=arr_157"))
                              (rule "applyEq" (formula "26") (term "0,1,1,0") (ifseqformula "1"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "12"))
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "28")) (ifInst ""  (formula "27")))
                              (rule "applyEqReverse" (formula "26") (term "1,2,1,0") (ifseqformula "1"))
                              (rule "applyEqReverse" (formula "26") (term "0,1,1,0") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "nnf_ex2all" (formula "29"))
                              (rule "nnf_imp2or" (formula "21") (term "0"))
                              (rule "nnf_imp2or" (formula "23") (term "0"))
                              (rule "nnf_notAnd" (formula "1") (term "0"))
                              (rule "nnf_notAnd" (formula "21") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0"))
                              (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "21") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0"))
                              (rule "mul_literals" (formula "21") (term "1,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "21") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0"))
                              (rule "nnf_notAnd" (formula "23") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "23") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "23") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0"))
                              (rule "times_zero_1" (formula "23") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "23") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0"))
                              (rule "mul_literals" (formula "23") (term "1,0,0,0"))
                              (rule "nnf_notAnd" (formula "1") (term "0,0"))
                              (rule "nnf_notAll" (formula "1") (term "1,0"))
                              (rule "nnf_imp2or" (formula "1") (term "0,0,1,0"))
                              (rule "nnf_notOr" (formula "1") (term "0,1,0"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "commute_or_2" (formula "23") (term "0"))
                              (rule "commute_or" (formula "1") (term "0,0"))
                              (rule "commute_or" (formula "23") (term "0,0"))
                              (rule "cnf_rightDist" (formula "21") (term "0"))
                              (rule "distr_forallAnd" (formula "21"))
                              (rule "andLeft" (formula "21"))
                              (rule "commute_or" (formula "22") (term "0"))
                              (rule "commute_and_2" (formula "1") (term "0,1,0"))
                              (rule "arrayLengthNotNegative" (formula "15") (term "1,1,0"))
                              (rule "arrayLengthIsAShort" (formula "27") (term "1,1,0"))
                              (builtin "One Step Simplification" (formula "27"))
                              (rule "true_left" (formula "27"))
                              (rule "equalityToSeqGetAndSeqLenLeft" (formula "14") (inst "iv=iv"))
                              (rule "andLeft" (formula "14"))
                              (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
                              (rule "applyEq" (formula "15") (term "0,0,1,0") (ifseqformula "16"))
                              (builtin "One Step Simplification" (formula "15"))
                              (rule "true_left" (formula "15"))
                              (rule "applyEq" (formula "14") (term "0,0") (ifseqformula "15"))
                              (builtin "One Step Simplification" (formula "14"))
                              (rule "true_left" (formula "14"))
                              (rule "lenNonNegative" (formula "21") (term "1"))
                              (rule "inEqSimp_commuteLeq" (formula "21"))
                              (rule "equalityToSeqGetAndSeqLenLeft" (formula "5") (inst "iv=iv"))
                              (rule "andLeft" (formula "5"))
                              (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0"))
                              (rule "applyEq" (formula "6") (term "0,0,1,0") (ifseqformula "7"))
                              (builtin "One Step Simplification" (formula "6"))
                              (rule "true_left" (formula "6"))
                              (rule "applyEq" (formula "5") (term "0,0") (ifseqformula "6"))
                              (builtin "One Step Simplification" (formula "5"))
                              (rule "true_left" (formula "5"))
                              (rule "commute_and" (formula "1") (term "0,0,1,0"))
                              (rule "ifthenelse_to_or_left" (formula "26") (term "0,0,0"))
                              (rule "eqSymm" (formula "26") (term "1,1,0,0,0"))
                              (builtin "One Step Simplification" (formula "26"))
                              (rule "eqSymm" (formula "26") (term "1,0,0,0,0"))
                              (rule "nnf_notAnd" (formula "26") (term "0,0,0,0,0"))
                              (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0,0,0,0"))
                              (rule "mul_literals" (formula "26") (term "1,0,0,0,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "26") (term "0,0,0,0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0,0,0,0"))
                              (rule "mul_literals" (formula "26") (term "1,0,0,0,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0,0,0,0"))
                              (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0,0,0,0"))
                              (rule "add_literals" (formula "26") (term "0,0,0,1,0,0,0,0,0"))
                              (rule "add_zero_left" (formula "26") (term "0,0,1,0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0,0,0,0"))
                              (rule "nnf_notAnd" (formula "26") (term "0,1,1,0,0,0"))
                              (rule "inEqSimp_notGeq" (formula "26") (term "0,0,1,1,0,0,0"))
                              (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,1,1,0,0,0"))
                              (rule "add_zero_right" (formula "26") (term "0,0,0,0,1,1,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,1,1,0,0,0"))
                              (rule "mul_literals" (formula "26") (term "1,0,0,1,1,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "26") (term "1,0,1,1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,1,1,0,0,0"))
                              (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,1,1,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,1,1,0,0,0"))
                              (rule "add_literals" (formula "26") (term "0,0,0,1,0,1,1,0,0,0"))
                              (rule "add_zero_left" (formula "26") (term "0,0,1,0,1,1,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,1,1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,1,1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "26") (term "1,1,0,1,1,0,0,0"))
                              (rule "commute_or" (formula "26") (term "0,0"))
                              (rule "commute_or_2" (formula "26") (term "0"))
                              (rule "commute_or_2" (formula "26") (term "0,1,0"))
                              (rule "commute_or" (formula "26") (term "1,1,0"))
                              (rule "commute_or" (formula "26") (term "0,0,1,0"))
                              (rule "commute_or_2" (formula "26") (term "0,1,1,0"))
                              (rule "commute_or" (formula "26") (term "0,0,1,1,0"))
                              (rule "ifthenelse_split" (formula "22") (term "0"))
                              (branch "result_0.length >= 1 TRUE"
                                 (rule "eqSymm" (formula "23"))
                                 (rule "applyEq" (formula "25") (term "1,1,0,0") (ifseqformula "23"))
                                 (rule "applyEq" (formula "21") (term "0") (ifseqformula "23"))
                                 (rule "applyEq" (formula "24") (term "1,1,1,0") (ifseqformula "22"))
                                 (rule "applyEq" (formula "26") (term "1,1,0,0") (ifseqformula "22"))
                                 (rule "applyEq" (formula "4") (term "0") (ifseqformula "22"))
                                 (rule "replace_known_left" (formula "29") (term "0,1") (ifseqformula "4"))
                                 (builtin "One Step Simplification" (formula "29"))
                                 (rule "replace_known_left" (formula "2") (term "0,1") (ifseqformula "4"))
                                 (builtin "One Step Simplification" (formula "2"))
                                 (rule "applyEq" (formula "23") (term "1,1,0,0") (ifseqformula "22"))
                                 (rule "inEqSimp_subsumption1" (formula "15") (ifseqformula "21"))
                                 (rule "leq_literals" (formula "15") (term "0"))
                                 (builtin "One Step Simplification" (formula "15"))
                                 (rule "true_left" (formula "15"))
                                 (rule "cnf_rightDist" (formula "25") (term "1,1,0"))
                                 (rule "commute_or" (formula "25") (term "1,1,1,0"))
                                 (rule "cnf_rightDist" (formula "25") (term "0"))
                                 (rule "distr_forallAnd" (formula "25"))
                                 (rule "andLeft" (formula "25"))
                                 (rule "commute_or" (formula "26") (term "0"))
                                 (rule "shift_paren_or" (formula "25") (term "0"))
                                 (rule "shift_paren_or" (formula "25") (term "0,0"))
                                 (rule "commute_or_2" (formula "25") (term "0,0,0"))
                                 (rule "cnf_rightDist" (formula "26") (term "0"))
                                 (rule "distr_forallAnd" (formula "26"))
                                 (rule "andLeft" (formula "26"))
                                 (rule "commute_or_2" (formula "27") (term "0"))
                                 (rule "shift_paren_or" (formula "26") (term "0"))
                                 (rule "shift_paren_or" (formula "27") (term "0,0"))
                                 (rule "shift_paren_or" (formula "26") (term "0,0"))
                                 (rule "commute_or_2" (formula "27") (term "0,0,0"))
                                 (builtin "One Step Simplification" (formula "27"))
                                 (rule "commute_or_2" (formula "26") (term "0,0,0"))
                                 (builtin "One Step Simplification" (formula "26"))
                                 (rule "commute_or" (formula "25") (term "0,0,0,0"))
                                 (rule "shift_paren_or" (formula "26") (term "0,0,0"))
                                 (rule "commute_or" (formula "26") (term "0,0,0,0"))
                                 (builtin "One Step Simplification" (formula "26"))
                                 (rule "ex_pull_out3" (formula "1") (term "0"))
                                 (rule "cnf_rightDist" (formula "1") (term "0,0"))
                                 (rule "commute_or" (formula "1") (term "1,0,0"))
                                 (rule "applyEq_or_int5" (formula "1") (term "1,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "1") (term "1,1,0,0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0,1,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,1,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1,1,1,0,0"))
                                 (rule "commute_or_2" (formula "1") (term "1,0,0"))
                                 (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                                 (rule "commute_or_2" (formula "1") (term "0,0,0,0"))
                                 (rule "shift_paren_or" (formula "1") (term "1,0,0,0"))
                                 (rule "commute_or" (formula "1") (term "0,1,0,0,0"))
                                 (rule "ifthenelse_to_or_left" (formula "25") (term "0,0,0,0,0"))
                                 (rule "eqSymm" (formula "25") (term "1,1,0,0,0,0,0"))
                                 (rule "nnf_notAnd" (formula "25") (term "0,0,0,0,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0,0,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0,0,0,0,0,0"))
                                 (rule "add_literals" (formula "25") (term "0,0,0,1,0,0,0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "25") (term "0,0,1,0,0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0,0,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0,0,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0,0,0,0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0,0,0,0,0,0"))
                                 (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "25") (term "0,0,0,0,0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "25") (term "1,0,0,0,0,0,0,0,0"))
                                 (rule "commute_or" (formula "25") (term "0,0,0,0"))
                                 (rule "commute_or_2" (formula "25") (term "0,0,0"))
                                 (rule "commute_or_2" (formula "25") (term "0,0"))
                                 (rule "commute_or_2" (formula "25") (term "0"))
                                 (rule "commute_or" (formula "25") (term "1,1,0"))
                                 (rule "commute_or_2" (formula "25") (term "0,1,0"))
                                 (rule "commute_or" (formula "25") (term "0,0,1,0"))
                                 (rule "cnf_rightDist" (formula "25") (term "1,1,0"))
                                 (rule "cnf_rightDist" (formula "25") (term "0"))
                                 (rule "distr_forallAnd" (formula "25"))
                                 (rule "andLeft" (formula "25"))
                                 (rule "commute_or" (formula "26") (term "0"))
                                 (rule "commute_or_2" (formula "25") (term "0"))
                                 (rule "commute_or_2" (formula "25") (term "0,0"))
                                 (rule "commute_or" (formula "26") (term "1,1,0"))
                                 (rule "cnf_rightDist" (formula "26") (term "0"))
                                 (rule "distr_forallAnd" (formula "26"))
                                 (rule "andLeft" (formula "26"))
                                 (rule "commute_or_2" (formula "26") (term "0"))
                                 (rule "shift_paren_or" (formula "27") (term "0"))
                                 (rule "commute_or_2" (formula "26") (term "0,0"))
                                 (rule "shift_paren_or" (formula "27") (term "0,0"))
                                 (rule "commute_or_2" (formula "26") (term "0,0,0"))
                                 (rule "shift_paren_or" (formula "25") (term "0,0,0"))
                                 (rule "shift_paren_or" (formula "27") (term "0,0,0"))
                                 (rule "commute_or_2" (formula "25") (term "0,0,0,0"))
                                 (builtin "One Step Simplification" (formula "25"))
                                 (rule "commute_or_2" (formula "27") (term "0,0,0,0"))
                                 (rule "inEqSimp_or_tautInEq1" (formula "27") (term "0,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "27") (term "1,0,0,0"))
                                 (rule "polySimp_pullOutFactor1" (formula "27") (term "0,1,0,0,0"))
                                 (rule "add_literals" (formula "27") (term "1,0,1,0,0,0"))
                                 (rule "times_zero_1" (formula "27") (term "0,1,0,0,0"))
                                 (rule "leq_literals" (formula "27") (term "1,0,0,0"))
                                 (builtin "One Step Simplification" (formula "27"))
                                 (rule "true_left" (formula "27"))
                                 (rule "shift_paren_or" (formula "26") (term "0,0,0,0"))
                                 (rule "shift_paren_or" (formula "25") (term "0,0,0,0"))
                                 (rule "commute_or" (formula "26") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_or_tautInEq1" (formula "26") (term "0,0,0,0"))
                                 (rule "add_literals" (formula "26") (term "1,1,0,0,0,0"))
                                 (rule "qeq_literals" (formula "26") (term "1,0,0,0,0"))
                                 (builtin "One Step Simplification" (formula "26"))
                                 (rule "true_left" (formula "26"))
                                 (rule "commute_or" (formula "25") (term "0,0,0,0,0"))
                                 (builtin "One Step Simplification" (formula "25"))
                                 (rule "ifthenelse_split" (formula "30") (term "0"))
                                 (branch " (int)s_1[iv_12] >= 0 & (int)s_1[iv_12] <= -1 + result_0.length TRUE"
                                    (rule "andLeft" (formula "1"))
                                    (rule "eqSymm" (formula "32"))
                                    (rule "replace_known_left" (formula "4") (term "0,0,0") (ifseqformula "1"))
                                    (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "2")))
                                    (rule "applyEq" (formula "32") (term "0,1,1") (ifseqformula "4"))
                                    (rule "applyEq" (formula "32") (term "1,2,1") (ifseqformula "4"))
                                    (rule "equalityToSeqGetAndSeqLenRight" (formula "32") (inst "iv=iv"))
                                    (rule "lenOfSeqDef" (formula "32") (term "0,0"))
                                    (rule "eqSymm" (formula "32") (term "0"))
                                    (rule "polySimp_elimSub" (formula "32") (term "1,1,0"))
                                    (rule "mul_literals" (formula "32") (term "1,1,1,0"))
                                    (rule "add_zero_right" (formula "32") (term "1,1,0"))
                                    (rule "getOfSeqDef" (formula "32") (term "0,1,0,1"))
                                    (rule "castDel" (formula "32") (term "1,0,1,0,1"))
                                    (rule "castDel" (formula "32") (term "2,0,1,0,1"))
                                    (rule "add_zero_right" (formula "32") (term "0,2,1,0,1,0,1"))
                                    (rule "eqSymm" (formula "32") (term "1,0,1"))
                                    (rule "polySimp_elimSub" (formula "32") (term "1,1,0,1,1,0,1"))
                                    (rule "times_zero_2" (formula "32") (term "1,1,1,0,1,1,0,1"))
                                    (rule "add_zero_right" (formula "32") (term "1,1,0,1,1,0,1"))
                                    (rule "lenOfSeqDef" (formula "32") (term "1,1,0,0,1"))
                                    (rule "polySimp_elimSub" (formula "32") (term "1,1,1,0,0,1"))
                                    (rule "times_zero_2" (formula "32") (term "1,1,1,1,0,0,1"))
                                    (rule "add_zero_right" (formula "32") (term "1,1,1,0,0,1"))
                                    (rule "lenOfSeqDef" (formula "32") (term "0,0"))
                                    (rule "polySimp_elimSub" (formula "32") (term "1,0,0"))
                                    (rule "times_zero_2" (formula "32") (term "1,1,0,0"))
                                    (rule "add_zero_right" (formula "32") (term "1,0,0"))
                                    (builtin "One Step Simplification" (formula "32"))
                                    (rule "allRight" (formula "32") (inst "sk=iv_18"))
                                    (rule "impRight" (formula "32"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "replace_known_left" (formula "34") (term "0,0,1") (ifseqformula "1"))
                                    (builtin "One Step Simplification" (formula "34"))
                                    (rule "getOfSeqDef" (formula "34") (term "0"))
                                    (rule "castDel" (formula "34") (term "2,0"))
                                    (rule "castDel" (formula "34") (term "1,0"))
                                    (rule "add_zero_right" (formula "34") (term "0,2,1,0"))
                                    (rule "replace_known_left" (formula "34") (term "0,0,0") (ifseqformula "1"))
                                    (builtin "One Step Simplification" (formula "34"))
                                    (rule "polySimp_elimSub" (formula "34") (term "1,0,0"))
                                    (rule "times_zero_2" (formula "34") (term "1,1,0,0"))
                                    (rule "add_zero_right" (formula "34") (term "1,0,0"))
                                    (rule "eqSymm" (formula "34"))
                                    (rule "inEqSimp_ltToLeq" (formula "2") (term "0,1"))
                                    (rule "add_zero_right" (formula "2") (term "0,0,1"))
                                    (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "34") (term "0,0"))
                                    (rule "eqSymm" (formula "34"))
                                    (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,0,1"))
                                    (rule "polySimp_addComm1" (formula "34") (term "0,0,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "2"))
                                    (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "2") (term "0"))
                                    (rule "inEqSimp_ltToLeq" (formula "34") (term "0,0"))
                                    (rule "eqSymm" (formula "34"))
                                    (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,0,1"))
                                    (rule "eqSymm" (formula "34"))
                                    (rule "polySimp_addComm1" (formula "34") (term "0,0,0"))
                                    (rule "eqSymm" (formula "34"))
                                    (rule "inEqSimp_commuteLeq" (formula "1"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "2") (term "0,0,0,1,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "34") (term "0,1"))
                                    (rule "polySimp_mulLiterals" (formula "34") (term "0,0,1"))
                                    (rule "polySimp_elimOne" (formula "34") (term "0,0,1"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "34") (term "0,0"))
                                    (rule "polySimp_mulLiterals" (formula "34") (term "0,0,0"))
                                    (rule "polySimp_elimOne" (formula "34") (term "0,0,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                    (rule "polySimp_elimOne" (formula "2") (term "0"))
                                    (rule "pullOutSelect" (formula "34") (term "1,0") (inst "selectSK=arr_159"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "23"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,1,0,0") (ifseqformula "17"))
                                    (rule "eqSymm" (formula "35"))
                                    (rule "sortsDisjointModuloNull" (formula "1") (term "0,0,0"))
                                    (rule "replace_known_right" (formula "1") (term "1,0,0,0") (ifseqformula "37"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "5"))
                                    (rule "times_zero_1" (formula "4") (term "0,0"))
                                    (rule "add_zero_left" (formula "4") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                                    (rule "mul_literals" (formula "4") (term "1"))
                                    (rule "pullOutSelect" (formula "35") (term "1,0") (inst "selectSK=arr_160"))
                                    (rule "applyEq" (formula "2") (term "2,0") (ifseqformula "1"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "18"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "commute_and" (formula "7") (term "0,0,0"))
                                    (rule "allLeft" (formula "21") (inst "t=iv_12"))
                                    (rule "inEqSimp_commuteGeq" (formula "21") (term "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "21") (term "1") (ifseqformula "10"))
                                    (rule "inEqSimp_homoInEq1" (formula "21") (term "0,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0,1"))
                                    (rule "add_literals" (formula "21") (term "1,1,0,0,1"))
                                    (rule "times_zero_1" (formula "21") (term "1,0,0,1"))
                                    (rule "add_zero_right" (formula "21") (term "0,0,1"))
                                    (rule "leq_literals" (formula "21") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "21"))
                                    (rule "inEqSimp_contradInEq1" (formula "21") (term "1") (ifseqformula "9"))
                                    (rule "qeq_literals" (formula "21") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "21"))
                                    (rule "notLeft" (formula "21"))
                                    (rule "pullOutSelect" (formula "36") (term "0") (inst "selectSK=arr_161"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "19"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "40")) (ifInst ""  (formula "39")))
                                    (rule "applyEqReverse" (formula "37") (term "0") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "narrowSelectArrayType" (formula "36") (term "0") (ifseqformula "17") (ifseqformula "39"))
                                    (rule "allLeft" (formula "35") (inst "t=iv_12"))
                                    (rule "replaceKnownSelect_taclet1110000000_4" (formula "35") (term "0,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet1110000000_5" (formula "35") (term "0,0,0,0"))
                                    (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "35") (term "1,0") (ifseqformula "9"))
                                    (rule "qeq_literals" (formula "35") (term "0,1,0"))
                                    (builtin "One Step Simplification" (formula "35"))
                                    (rule "inEqSimp_contradInEq1" (formula "35") (term "1") (ifseqformula "10"))
                                    (rule "inEqSimp_homoInEq1" (formula "35") (term "0,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,0,1"))
                                    (rule "add_literals" (formula "35") (term "1,1,0,0,1"))
                                    (rule "times_zero_1" (formula "35") (term "1,0,0,1"))
                                    (rule "add_zero_right" (formula "35") (term "0,0,1"))
                                    (rule "leq_literals" (formula "35") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "35"))
                                    (rule "notLeft" (formula "35"))
                                    (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "36"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "36"))
                                    (builtin "One Step Simplification" (formula "2"))
                                    (rule "ifthenelse_negated" (formula "1") (term "0"))
                                    (rule "ifthenelse_negated" (formula "2") (term "0"))
                                    (rule "narrowSelectArrayType" (formula "1") (term "1,0") (ifseqformula "12") (ifseqformula "36"))
                                    (rule "narrowSelectArrayType" (formula "1") (term "2,0") (ifseqformula "17") (ifseqformula "36"))
                                    (rule "narrowSelectArrayType" (formula "2") (term "2,0") (ifseqformula "23") (ifseqformula "36"))
                                    (rule "allLeft" (formula "34") (inst "t=iv_12"))
                                    (rule "replaceKnownSelect_taclet1110000000_4" (formula "34") (term "1,0,1"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet1110000000_5" (formula "34") (term "1,0,1"))
                                    (rule "inEqSimp_homoInEq1" (formula "34") (term "1,0"))
                                    (rule "polySimp_addComm1" (formula "34") (term "0,1,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0"))
                                    (rule "polySimp_mulComm0" (formula "34") (term "1,1,0"))
                                    (rule "polySimp_rightDist" (formula "34") (term "1,1,0"))
                                    (rule "mul_literals" (formula "34") (term "0,1,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0"))
                                    (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0"))
                                    (rule "inEqSimp_contradInEq1" (formula "34") (term "0,0") (ifseqformula "9"))
                                    (rule "qeq_literals" (formula "34") (term "0,0,0"))
                                    (builtin "One Step Simplification" (formula "34"))
                                    (rule "pullOutSelect" (formula "34") (term "2,0,1") (inst "selectSK=arr_162"))
                                    (rule "simplifySelectOfAnonEQ" (formula "34") (ifseqformula "24"))
                                    (builtin "One Step Simplification" (formula "34"))
                                    (rule "applyEqReverse" (formula "35") (term "2,0,1") (ifseqformula "34"))
                                    (rule "hideAuxiliaryEq" (formula "34"))
                                    (rule "allLeft" (formula "16") (inst "t=iv_12"))
                                    (rule "inEqSimp_commuteGeq" (formula "16") (term "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "16") (term "1,0") (ifseqformula "9"))
                                    (rule "qeq_literals" (formula "16") (term "0,1,0"))
                                    (builtin "One Step Simplification" (formula "16"))
                                    (rule "allLeft" (formula "22") (inst "t=int::seqGet(s_1, iv_12)"))
                                    (rule "inEqSimp_contradInEq0" (formula "22") (term "1") (ifseqformula "6"))
                                    (rule "inEqSimp_homoInEq1" (formula "22") (term "0,1"))
                                    (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1"))
                                    (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1"))
                                    (rule "mul_literals" (formula "22") (term "0,1,0,0,1"))
                                    (rule "polySimp_addAssoc" (formula "22") (term "0,0,1"))
                                    (rule "polySimp_addComm0" (formula "22") (term "0,0,0,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "22") (term "0,0,1"))
                                    (rule "add_literals" (formula "22") (term "1,1,0,0,1"))
                                    (rule "times_zero_1" (formula "22") (term "1,0,0,1"))
                                    (rule "add_zero_right" (formula "22") (term "0,0,1"))
                                    (rule "leq_literals" (formula "22") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "22"))
                                    (rule "inEqSimp_contradInEq1" (formula "22") (term "1") (ifseqformula "5"))
                                    (rule "qeq_literals" (formula "22") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "22"))
                                    (rule "notLeft" (formula "22"))
                                    (rule "pullOutSelect" (formula "38") (term "0") (inst "selectSK=arr_163"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "20"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "44")) (ifInst ""  (formula "43")))
                                    (rule "applyEqReverse" (formula "39") (term "0") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "narrowSelectArrayType" (formula "38") (term "0") (ifseqformula "18") (ifseqformula "43"))
                                    (rule "applyEq" (formula "38") (term "0") (ifseqformula "8"))
                                    (rule "allLeft" (formula "37") (inst "t=int::seqGet(s_1, iv_12)"))
                                    (rule "inEqSimp_contradInEq1" (formula "37") (term "1,0") (ifseqformula "5"))
                                    (rule "qeq_literals" (formula "37") (term "0,1,0"))
                                    (builtin "One Step Simplification" (formula "37"))
                                    (rule "inEqSimp_contradInEq0" (formula "37") (term "1") (ifseqformula "6"))
                                    (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1"))
                                    (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,1"))
                                    (rule "polySimp_rightDist" (formula "37") (term "1,0,0,1"))
                                    (rule "mul_literals" (formula "37") (term "0,1,0,0,1"))
                                    (rule "polySimp_addAssoc" (formula "37") (term "0,0,1"))
                                    (rule "polySimp_addComm0" (formula "37") (term "0,0,0,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                                    (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                                    (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                                    (rule "add_zero_right" (formula "37") (term "0,0,1"))
                                    (rule "leq_literals" (formula "37") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "37"))
                                    (rule "notLeft" (formula "37"))
                                    (rule "pullOutSelect" (formula "38") (term "0") (inst "selectSK=arr_164"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "26"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "applyEqReverse" (formula "39") (term "0") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "allLeft" (formula "17") (inst "t=int::seqGet(s_1, iv_12)"))
                                    (rule "inEqSimp_contradInEq1" (formula "17") (term "1,0") (ifseqformula "5"))
                                    (rule "qeq_literals" (formula "17") (term "0,1,0"))
                                    (builtin "One Step Simplification" (formula "17"))
                                    (rule "allLeft" (formula "37") (inst "t=int::seqGet(s_1, iv_12)"))
                                    (rule "replaceKnownSelect_taclet001110000000_16" (formula "37") (term "1,0,1"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet001110000000_17" (formula "37") (term "1,0,1"))
                                    (rule "inEqSimp_contradInEq1" (formula "37") (term "0,0") (ifseqformula "5"))
                                    (rule "qeq_literals" (formula "37") (term "0,0,0"))
                                    (builtin "One Step Simplification" (formula "37"))
                                    (rule "pullOutSelect" (formula "37") (term "2,0,1") (inst "selectSK=arr_165"))
                                    (rule "simplifySelectOfAnonEQ" (formula "37") (ifseqformula "26"))
                                    (builtin "One Step Simplification" (formula "37"))
                                    (rule "applyEqReverse" (formula "38") (term "2,0,1") (ifseqformula "37"))
                                    (rule "hideAuxiliaryEq" (formula "37"))
                                    (rule "lenNonNegative" (formula "7") (term "1,0,1,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "7"))
                                    (rule "commute_and_2" (formula "8") (term "0,0"))
                                    (rule "ifthenelse_split" (formula "4") (term "0"))
                                    (branch " result_0[iv_12]@anon_heap_sort<<anonHeapFunction>>.length >= 1 TRUE"
                                       (rule "replace_known_left" (formula "45") (term "0,0") (ifseqformula "5"))
                                       (builtin "One Step Simplification" (formula "45") (ifInst ""  (formula "5")))
                                       (rule "seqGetAlphaCast" (formula "7") (term "0"))
                                       (rule "castedGetAny" (formula "7") (term "0"))
                                       (builtin "One Step Simplification" (formula "7"))
                                       (rule "true_left" (formula "7"))
                                       (rule "allLeft" (formula "35") (inst "t=iv_12"))
                                       (rule "replaceKnownSelect_taclet1110000000_2" (formula "35") (term "1,0,0,0,0"))
                                       (rule "replaceKnownSelect_taclet1110000000_0" (formula "35") (term "0,0,0,0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet1110000000_3" (formula "35") (term "1,0,0,0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet1110000000_1" (formula "35") (term "0,0,0,0,0"))
                                       (rule "narrowSelectArrayType" (formula "35") (term "0,0,0,0,0") (ifseqformula "27") (ifseqformula "48"))
                                       (rule "eqSymm" (formula "35") (term "0,0,0,0"))
                                       (rule "narrowSelectArrayType" (formula "35") (term "0,0,0,0,0") (ifseqformula "21") (ifseqformula "48"))
                                       (rule "replace_known_left" (formula "35") (term "0,0,0,0") (ifseqformula "10"))
                                       (builtin "One Step Simplification" (formula "35"))
                                       (rule "true_left" (formula "35"))
                                       (rule "ifthenelse_split" (formula "1") (term "0"))
                                       (branch " (result_0[iv_12]@anon_heap_sort<<anonHeapFunction>>).<created> = TRUE TRUE"
                                          (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "2"))
                                          (rule "applyEqReverse" (formula "46") (term "0") (ifseqformula "2"))
                                          (rule "hideAuxiliaryEq" (formula "2"))
                                          (rule "eqSymm" (formula "45"))
                                          (rule "replace_known_left" (formula "2") (term "0,0,0") (ifseqformula "1"))
                                          (builtin "One Step Simplification" (formula "2"))
                                          (rule "applyEqReverse" (formula "45") (term "0") (ifseqformula "2"))
                                          (builtin "One Step Simplification" (formula "45"))
                                          (rule "closeTrue" (formula "45"))
                                       )
                                       (branch " (result_0[iv_12]@anon_heap_sort<<anonHeapFunction>>).<created> = TRUE FALSE"
                                          (rule "applyEqReverse" (formula "2") (term "1,0") (ifseqformula "1"))
                                          (rule "applyEqReverse" (formula "46") (term "0") (ifseqformula "1"))
                                          (rule "hideAuxiliaryEq" (formula "1"))
                                          (rule "eqSymm" (formula "45"))
                                          (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "41"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "cut_direct" (formula "37") (term "0"))
                                          (branch "CUT: result_0.length <= 1 + iv_12 TRUE"
                                             (builtin "One Step Simplification" (formula "38"))
                                             (rule "true_left" (formula "38"))
                                             (rule "inEqSimp_antiSymm" (formula "11") (ifseqformula "37"))
                                             (rule "applyEq" (formula "37") (term "1,1,1,0") (ifseqformula "11"))
                                             (rule "polySimp_addAssoc" (formula "37") (term "1,1,0"))
                                             (rule "add_literals" (formula "37") (term "0,1,1,0"))
                                             (rule "add_zero_left" (formula "37") (term "1,1,0"))
                                             (rule "applyEq" (formula "33") (term "1,1,0,0") (ifseqformula "11"))
                                             (rule "applyEq" (formula "40") (term "1,1,1,0,0") (ifseqformula "11"))
                                             (rule "polySimp_addAssoc" (formula "40") (term "1,1,0,0"))
                                             (rule "add_literals" (formula "40") (term "0,1,1,0,0"))
                                             (rule "add_zero_left" (formula "40") (term "1,1,0,0"))
                                             (rule "applyEq" (formula "37") (term "1,1,0,0") (ifseqformula "11"))
                                             (rule "applyEq" (formula "41") (term "1,1,0") (ifseqformula "11"))
                                             (rule "applyEq" (formula "12") (term "0") (ifseqformula "11"))
                                             (rule "inEqSimp_homoInEq1" (formula "12"))
                                             (rule "polySimp_pullOutFactor1" (formula "12") (term "0"))
                                             (rule "add_literals" (formula "12") (term "1,0"))
                                             (rule "times_zero_1" (formula "12") (term "0"))
                                             (rule "leq_literals" (formula "12"))
                                             (rule "true_left" (formula "12"))
                                             (rule "applyEq" (formula "31") (term "1,1,0,0") (ifseqformula "11"))
                                             (rule "applyEq" (formula "37") (term "0") (ifseqformula "11"))
                                             (rule "inEqSimp_homoInEq0" (formula "37"))
                                             (rule "polySimp_pullOutFactor1" (formula "37") (term "0"))
                                             (rule "add_literals" (formula "37") (term "1,0"))
                                             (rule "times_zero_1" (formula "37") (term "0"))
                                             (rule "qeq_literals" (formula "37"))
                                             (rule "true_left" (formula "37"))
                                             (rule "applyEq" (formula "35") (term "1,1,0,0") (ifseqformula "11"))
                                             (rule "applyEq" (formula "29") (term "0") (ifseqformula "11"))
                                             (rule "inEqSimp_homoInEq1" (formula "29"))
                                             (rule "polySimp_mulComm0" (formula "29") (term "1,0"))
                                             (rule "polySimp_rightDist" (formula "29") (term "1,0"))
                                             (rule "mul_literals" (formula "29") (term "0,1,0"))
                                             (rule "polySimp_addAssoc" (formula "29") (term "0"))
                                             (rule "add_literals" (formula "29") (term "0,0"))
                                             (rule "add_zero_left" (formula "29") (term "0"))
                                             (rule "applyEq" (formula "34") (term "1,1,0,0,0") (ifseqformula "11"))
                                             (rule "applyEq" (formula "34") (term "1,1,0") (ifseqformula "11"))
                                             (rule "applyEq" (formula "24") (term "1,1,0") (ifseqformula "11"))
                                             (rule "applyEq" (formula "32") (term "1,1,1,0") (ifseqformula "11"))
                                             (rule "polySimp_addAssoc" (formula "32") (term "1,1,0"))
                                             (rule "add_literals" (formula "32") (term "0,1,1,0"))
                                             (rule "add_zero_left" (formula "32") (term "1,1,0"))
                                             (rule "applyEq" (formula "37") (term "1,1,0") (ifseqformula "11"))
                                             (rule "polySimp_addAssoc" (formula "37") (term "1,0"))
                                             (rule "add_literals" (formula "37") (term "0,1,0"))
                                             (rule "add_zero_left" (formula "37") (term "1,0"))
                                             (rule "applyEq" (formula "6") (term "1,1") (ifseqformula "11"))
                                             (rule "polySimp_addAssoc" (formula "6") (term "1"))
                                             (rule "add_literals" (formula "6") (term "0,1"))
                                             (rule "add_zero_left" (formula "6") (term "1"))
                                             (rule "applyEq" (formula "30") (term "1") (ifseqformula "11"))
                                             (rule "inEqSimp_invertInEq0" (formula "29"))
                                             (rule "times_zero_2" (formula "29") (term "1"))
                                             (rule "polySimp_mulLiterals" (formula "29") (term "0"))
                                             (rule "polySimp_elimOne" (formula "29") (term "0"))
                                             (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "6"))
                                             (rule "times_zero_1" (formula "5") (term "0,0"))
                                             (rule "add_zero_left" (formula "5") (term "0"))
                                             (rule "cut_direct" (formula "17") (term "1"))
                                             (branch "CUT: entr_arr.length <= iv_12 TRUE"
                                                (builtin "One Step Simplification" (formula "18"))
                                                (rule "true_left" (formula "18"))
                                                (rule "inEqSimp_exactShadow3" (formula "16") (ifseqformula "17"))
                                                (rule "times_zero_1" (formula "16") (term "0,0"))
                                                (rule "add_zero_left" (formula "16") (term "0"))
                                                (rule "ifthenelse_split" (formula "1") (term "0"))
                                                (branch " (result_0[iv_12]@anon_heap_sort<<anonHeapFunction>>).<created>@anon_heap_copyOf<<anonHeapFunction>> = TRUE TRUE"
                                                   (rule "applyEqReverse" (formula "44") (term "0") (ifseqformula "2"))
                                                   (builtin "One Step Simplification" (formula "44"))
                                                   (rule "closeTrue" (formula "44"))
                                                )
                                                (branch " (result_0[iv_12]@anon_heap_sort<<anonHeapFunction>>).<created>@anon_heap_copyOf<<anonHeapFunction>> = TRUE FALSE"
                                                   (rule "referencedObjectIsCreatedRightEQ" (formula "39") (ifseqformula "9") (ifseqformula "42"))
                                                   (rule "close" (formula "39") (ifseqformula "20"))
                                                )
                                             )
                                             (branch "CUT: entr_arr.length <= iv_12 FALSE"
                                                (builtin "One Step Simplification" (formula "17"))
                                                (rule "notLeft" (formula "17"))
                                                (rule "inEqSimp_leqRight" (formula "39"))
                                                (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                                (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                                (rule "polySimp_rightDist" (formula "1") (term "1"))
                                                (rule "mul_literals" (formula "1") (term "0,1"))
                                                (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                                (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                                (rule "ifthenelse_split" (formula "2") (term "0"))
                                                (branch " (result_0[iv_12]@anon_heap_sort<<anonHeapFunction>>).<created>@anon_heap_copyOf<<anonHeapFunction>> = TRUE TRUE"
                                                   (rule "applyEqReverse" (formula "45") (term "0") (ifseqformula "3"))
                                                   (builtin "One Step Simplification" (formula "45"))
                                                   (rule "closeTrue" (formula "45"))
                                                )
                                                (branch " (result_0[iv_12]@anon_heap_sort<<anonHeapFunction>>).<created>@anon_heap_copyOf<<anonHeapFunction>> = TRUE FALSE"
                                                   (rule "referencedObjectIsCreatedRightEQ" (formula "39") (ifseqformula "10") (ifseqformula "43"))
                                                   (rule "close" (formula "39") (ifseqformula "20"))
                                                )
                                             )
                                          )
                                          (branch "CUT: result_0.length <= 1 + iv_12 FALSE"
                                             (builtin "One Step Simplification" (formula "37"))
                                             (rule "inEqSimp_leqRight" (formula "41"))
                                             (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                             (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                             (rule "polySimp_rightDist" (formula "1") (term "1"))
                                             (rule "mul_literals" (formula "1") (term "0,1"))
                                             (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                             (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                             (rule "inEqSimp_subsumption1" (formula "12") (ifseqformula "1"))
                                             (rule "inEqSimp_homoInEq0" (formula "12") (term "0"))
                                             (rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "12") (term "1,0,0"))
                                             (rule "mul_literals" (formula "12") (term "0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "12") (term "0,0"))
                                             (rule "polySimp_addComm1" (formula "12") (term "0,0,0"))
                                             (rule "add_literals" (formula "12") (term "0,0,0,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0"))
                                             (rule "add_literals" (formula "12") (term "1,1,0,0"))
                                             (rule "times_zero_1" (formula "12") (term "1,0,0"))
                                             (rule "add_literals" (formula "12") (term "0,0"))
                                             (rule "qeq_literals" (formula "12") (term "0"))
                                             (builtin "One Step Simplification" (formula "12"))
                                             (rule "true_left" (formula "12"))
                                             (rule "cut_direct" (formula "17") (term "1"))
                                             (branch "CUT: entr_arr.length <= iv_12 TRUE"
                                                (builtin "One Step Simplification" (formula "18"))
                                                (rule "true_left" (formula "18"))
                                                (rule "inEqSimp_exactShadow3" (formula "16") (ifseqformula "17"))
                                                (rule "mul_literals" (formula "16") (term "0,0"))
                                                (rule "add_zero_left" (formula "16") (term "0"))
                                                (rule "ifthenelse_split" (formula "2") (term "0"))
                                                (branch " (result_0[iv_12]@anon_heap_sort<<anonHeapFunction>>).<created>@anon_heap_copyOf<<anonHeapFunction>> = TRUE TRUE"
                                                   (rule "applyEqReverse" (formula "46") (term "0") (ifseqformula "3"))
                                                   (builtin "One Step Simplification" (formula "46"))
                                                   (rule "closeTrue" (formula "46"))
                                                )
                                                (branch " (result_0[iv_12]@anon_heap_sort<<anonHeapFunction>>).<created>@anon_heap_copyOf<<anonHeapFunction>> = TRUE FALSE"
                                                   (rule "referencedObjectIsCreatedRightEQ" (formula "41") (ifseqformula "10") (ifseqformula "44"))
                                                   (rule "close" (formula "41") (ifseqformula "20"))
                                                )
                                             )
                                             (branch "CUT: entr_arr.length <= iv_12 FALSE"
                                                (builtin "One Step Simplification" (formula "17"))
                                                (rule "notLeft" (formula "17"))
                                                (rule "inEqSimp_leqRight" (formula "41"))
                                                (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                                (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                                (rule "polySimp_rightDist" (formula "1") (term "1"))
                                                (rule "mul_literals" (formula "1") (term "0,1"))
                                                (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                                (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                                (rule "ifthenelse_split" (formula "3") (term "0"))
                                                (branch " (result_0[iv_12]@anon_heap_sort<<anonHeapFunction>>).<created>@anon_heap_copyOf<<anonHeapFunction>> = TRUE TRUE"
                                                   (rule "applyEqReverse" (formula "47") (term "0") (ifseqformula "4"))
                                                   (builtin "One Step Simplification" (formula "47"))
                                                   (rule "closeTrue" (formula "47"))
                                                )
                                                (branch " (result_0[iv_12]@anon_heap_sort<<anonHeapFunction>>).<created>@anon_heap_copyOf<<anonHeapFunction>> = TRUE FALSE"
                                                   (rule "referencedObjectIsCreatedRightEQ" (formula "41") (ifseqformula "11") (ifseqformula "45"))
                                                   (rule "close" (formula "41") (ifseqformula "20"))
                                                )
                                             )
                                          )
                                       )
                                    )
                                    (branch " result_0[iv_12]@anon_heap_sort<<anonHeapFunction>>.length >= 1 FALSE"
                                       (rule "inEqSimp_geqRight" (formula "41"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "inEqSimp_homoInEq1" (formula "5"))
                                       (rule "mul_literals" (formula "5") (term "1,0"))
                                       (rule "add_zero_right" (formula "5") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                                       (rule "mul_literals" (formula "5") (term "1"))
                                       (rule "inEqSimp_contradInEq0" (formula "4") (ifseqformula "5"))
                                       (rule "qeq_literals" (formula "4") (term "0"))
                                       (builtin "One Step Simplification" (formula "4"))
                                       (rule "closeFalse" (formula "4"))
                                    )
                                 )
                                 (branch " (int)s_1[iv_12] >= 0 & (int)s_1[iv_12] <= -1 + result_0.length FALSE"
                                    (rule "eqSymm" (formula "31"))
                                    (rule "replace_known_right" (formula "2") (term "0,0") (ifseqformula "30"))
                                    (builtin "One Step Simplification" (formula "2"))
                                    (rule "applyEq" (formula "31") (term "1") (ifseqformula "2"))
                                    (builtin "One Step Simplification" (formula "31"))
                                    (rule "false_right" (formula "31"))
                                    (rule "applyEq" (formula "26") (term "1,0,0,0,0") (ifseqformula "2"))
                                    (rule "applyEq" (formula "27") (term "1,0,0,0,0") (ifseqformula "2"))
                                    (rule "allLeft" (formula "15") (inst "t=iv_12"))
                                    (rule "inEqSimp_commuteGeq" (formula "15") (term "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "15") (term "1") (ifseqformula "4"))
                                    (rule "inEqSimp_homoInEq1" (formula "15") (term "0,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,1"))
                                    (rule "add_literals" (formula "15") (term "1,1,0,0,1"))
                                    (rule "times_zero_1" (formula "15") (term "1,0,0,1"))
                                    (rule "add_zero_right" (formula "15") (term "0,0,1"))
                                    (rule "leq_literals" (formula "15") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "15"))
                                    (rule "inEqSimp_contradInEq1" (formula "15") (term "1") (ifseqformula "3"))
                                    (rule "qeq_literals" (formula "15") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "15"))
                                    (rule "notLeft" (formula "15"))
                                    (rule "pullOutSelect" (formula "30") (term "0") (inst "selectSK=arr_158"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "13"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "34")) (ifInst ""  (formula "33")))
                                    (rule "applyEqReverse" (formula "31") (term "0") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "narrowSelectArrayType" (formula "30") (term "0") (ifseqformula "11") (ifseqformula "33"))
                                    (rule "allLeft" (formula "29") (inst "t=iv_12"))
                                    (rule "replaceKnownSelect_taclet1110000000_4" (formula "29") (term "0,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet1110000000_5" (formula "29") (term "0,0,0,0"))
                                    (rule "inEqSimp_commuteGeq" (formula "29") (term "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "29") (term "1,0") (ifseqformula "3"))
                                    (rule "qeq_literals" (formula "29") (term "0,1,0"))
                                    (builtin "One Step Simplification" (formula "29"))
                                    (rule "inEqSimp_contradInEq1" (formula "29") (term "1") (ifseqformula "4"))
                                    (rule "inEqSimp_homoInEq1" (formula "29") (term "0,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0,1"))
                                    (rule "add_literals" (formula "29") (term "1,1,0,0,1"))
                                    (rule "times_zero_1" (formula "29") (term "1,0,0,1"))
                                    (rule "add_literals" (formula "29") (term "0,0,1"))
                                    (rule "leq_literals" (formula "29") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "29"))
                                    (rule "notLeft" (formula "29"))
                                    (rule "commute_and" (formula "1") (term "0,0,0"))
                                    (rule "allLeft" (formula "22") (inst "t=iv_12"))
                                    (rule "inEqSimp_commuteGeq" (formula "22") (term "1,0"))
                                    (rule "inEqSimp_contradInEq1" (formula "22") (term "0,0") (ifseqformula "3"))
                                    (rule "qeq_literals" (formula "22") (term "0,0,0"))
                                    (builtin "One Step Simplification" (formula "22"))
                                    (rule "inEqSimp_contradInEq1" (formula "22") (term "0") (ifseqformula "4"))
                                    (rule "inEqSimp_homoInEq1" (formula "22") (term "0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "22") (term "0,0,0"))
                                    (rule "add_literals" (formula "22") (term "1,1,0,0,0"))
                                    (rule "times_zero_1" (formula "22") (term "1,0,0,0"))
                                    (rule "add_zero_right" (formula "22") (term "0,0,0"))
                                    (rule "leq_literals" (formula "22") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "22"))
                                    (rule "replace_known_left" (formula "33") (term "0") (ifseqformula "22"))
                                    (builtin "One Step Simplification" (formula "33"))
                                    (rule "inEqSimp_leqRight" (formula "33"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                    (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1"))
                                    (rule "allLeft" (formula "25") (inst "t=iv_12"))
                                    (rule "inEqSimp_commuteGeq" (formula "25") (term "1,0"))
                                    (rule "inEqSimp_contradInEq1" (formula "25") (term "1,0") (ifseqformula "5"))
                                    (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1,0"))
                                    (rule "add_literals" (formula "25") (term "1,1,0,0,1,0"))
                                    (rule "times_zero_1" (formula "25") (term "1,0,0,1,0"))
                                    (rule "add_literals" (formula "25") (term "0,0,1,0"))
                                    (rule "leq_literals" (formula "25") (term "0,1,0"))
                                    (builtin "One Step Simplification" (formula "25"))
                                    (rule "inEqSimp_contradInEq1" (formula "25") (term "0") (ifseqformula "4"))
                                    (rule "qeq_literals" (formula "25") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "25"))
                                    (rule "inEqSimp_contradInEq1" (formula "25") (ifseqformula "1"))
                                    (rule "andLeft" (formula "25"))
                                    (rule "inEqSimp_homoInEq1" (formula "25"))
                                    (rule "polySimp_mulComm0" (formula "25") (term "1,0"))
                                    (rule "polySimp_rightDist" (formula "25") (term "1,0"))
                                    (rule "mul_literals" (formula "25") (term "0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "25") (term "0"))
                                    (rule "polySimp_addComm0" (formula "25") (term "0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "25") (term "0"))
                                    (rule "add_literals" (formula "25") (term "1,1,0"))
                                    (rule "times_zero_1" (formula "25") (term "1,0"))
                                    (rule "add_literals" (formula "25") (term "0"))
                                    (rule "leq_literals" (formula "25"))
                                    (rule "closeFalse" (formula "25"))
                                 )
                              )
                              (branch "result_0.length >= 1 FALSE"
                                 (rule "eqSymm" (formula "22"))
                                 (rule "inEqSimp_geqRight" (formula "29"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "applyEq" (formula "27") (term "1,1,0,0") (ifseqformula "23"))
                                 (rule "applyEq" (formula "25") (term "1,1,1,0") (ifseqformula "23"))
                                 (rule "add_zero_right" (formula "25") (term "1,1,0"))
                                 (rule "applyEqRigid" (formula "25") (term "1,1,0,0") (ifseqformula "23"))
                                 (rule "applyEqRigid" (formula "22") (term "0") (ifseqformula "23"))
                                 (rule "qeq_literals" (formula "22"))
                                 (rule "true_left" (formula "22"))
                                 (rule "applyEqRigid" (formula "5") (term "0") (ifseqformula "22"))
                                 (rule "inEqSimp_homoInEq1" (formula "5"))
                                 (rule "times_zero_2" (formula "5") (term "1,0"))
                                 (rule "add_zero_right" (formula "5") (term "0"))
                                 (rule "applyEqRigid" (formula "23") (term "1,1,0,0") (ifseqformula "22"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                                 (rule "mul_literals" (formula "5") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "5") (ifseqformula "4"))
                                 (rule "qeq_literals" (formula "5") (term "0"))
                                 (builtin "One Step Simplification" (formula "5"))
                                 (rule "closeFalse" (formula "5"))
                              )
                           )
                        )
                     )
                  )
                  (branch "CUT: array2seq2d(heapAfter_copyOf, entr_arr) = array2seq2d(heapAfter_sort, entr_arr) FALSE"
                     (rule "array2seq2dDef" (formula "18") (term "0") (inst "u=u") (userinteraction))
                     (rule "array2seq2dDef" (formula "18") (term "1") (inst "u=u") (userinteraction))
                     (rule "eqSymm" (formula "18"))
                     (rule "array2seqDef" (formula "18") (term "2,1") (inst "u=u_1"))
                     (rule "eqSymm" (formula "18"))
                     (rule "equalityToSeqGetAndSeqLenRight" (formula "18") (inst "iv=iv"))
                     (rule "getOfSeqDef" (formula "18") (term "1,1,0,1"))
                     (rule "castDel" (formula "18") (term "2,1,1,0,1"))
                     (rule "castDel" (formula "18") (term "1,1,1,0,1"))
                     (rule "add_zero_right" (formula "18") (term "0,2,1,1,1,1,0,1"))
                     (rule "polySimp_elimSub" (formula "18") (term "1,1,0,1,1,0,1"))
                     (rule "times_zero_2" (formula "18") (term "1,1,1,0,1,1,0,1"))
                     (rule "add_zero_right" (formula "18") (term "1,1,0,1,1,0,1"))
                     (rule "lenOfSeqDef" (formula "18") (term "1,0"))
                     (rule "polySimp_elimSub" (formula "18") (term "1,1,0"))
                     (rule "times_zero_2" (formula "18") (term "1,1,1,0"))
                     (rule "add_zero_right" (formula "18") (term "1,1,0"))
                     (rule "lenOfSeqDef" (formula "18") (term "0,0"))
                     (rule "polySimp_elimSub" (formula "18") (term "1,0,0"))
                     (rule "times_zero_2" (formula "18") (term "1,1,0,0"))
                     (rule "add_zero_right" (formula "18") (term "1,0,0"))
                     (builtin "One Step Simplification" (formula "18"))
                     (rule "allRight" (formula "18") (inst "sk=iv_0"))
                     (rule "impRight" (formula "18"))
                     (rule "andLeft" (formula "1"))
                     (rule "replace_known_left" (formula "20") (term "0,0,1") (ifseqformula "1"))
                     (builtin "One Step Simplification" (formula "20"))
                     (rule "lenOfSeqDef" (formula "2") (term "1"))
                     (rule "polySimp_elimSub" (formula "2") (term "1,1"))
                     (rule "times_zero_2" (formula "2") (term "1,1,1"))
                     (rule "add_zero_right" (formula "2") (term "1,1"))
                     (rule "getOfSeqDef" (formula "20") (term "0"))
                     (rule "castDel" (formula "20") (term "1,0"))
                     (rule "castDel" (formula "20") (term "2,0"))
                     (rule "add_zero_right" (formula "20") (term "0,2,1,2,1,0"))
                     (rule "add_zero_right" (formula "20") (term "0,2,0,1,1,0"))
                     (rule "replace_known_left" (formula "20") (term "0,0,0") (ifseqformula "1"))
                     (builtin "One Step Simplification" (formula "20"))
                     (rule "polySimp_elimSub" (formula "20") (term "1,0,0"))
                     (rule "times_zero_2" (formula "20") (term "1,1,0,0"))
                     (rule "add_zero_right" (formula "20") (term "1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "2") (term "0,1"))
                     (rule "add_zero_right" (formula "2") (term "0,0,1"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "20") (term "0,1"))
                     (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,1"))
                     (rule "polySimp_addComm1" (formula "20") (term "0,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "20") (term "0,0"))
                     (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,0"))
                     (rule "polySimp_addComm1" (formula "20") (term "0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "2"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "2") (term "0"))
                     (rule "inEqSimp_commuteLeq" (formula "1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "20") (term "0,1"))
                     (rule "polySimp_mulLiterals" (formula "20") (term "0,0,1"))
                     (rule "polySimp_elimOne" (formula "20") (term "0,0,1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "20") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "20") (term "0,0,0"))
                     (rule "polySimp_elimOne" (formula "20") (term "0,0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "2") (term "0,0,0,1,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                     (rule "polySimp_elimOne" (formula "2") (term "0"))
                     (rule "array2seqDef" (formula "20") (term "1,1") (inst "u=u"))
                     (rule "pullOutSelect" (formula "20") (term "0,1,1,0") (inst "selectSK=arr_8"))
                     (rule "applyEq" (formula "21") (term "1,2,1,0") (ifseqformula "1"))
                     (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "10"))
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "24")) (ifInst ""  (formula "5")))
                     (rule "applyEqReverse" (formula "21") (term "0,1,1,0") (ifseqformula "1"))
                     (rule "applyEqReverse" (formula "21") (term "1,2,1,0") (ifseqformula "1"))
                     (rule "hideAuxiliaryEq" (formula "1"))
                     (rule "pullOutSelect" (formula "20") (term "1,2,1,1") (inst "selectSK=arr_9"))
                     (rule "applyEq" (formula "21") (term "0,1,1,1") (ifseqformula "1"))
                     (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "16"))
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "24")))
                     (rule "replaceKnownSelect_taclet1000000_0" (formula "1") (term "2,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet1000000_1" (formula "1") (term "2,0"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "10"))
                     (rule "eqSymm" (formula "1") (term "0,0,0"))
                     (rule "replace_known_left" (formula "1") (term "0,0,1,0,0") (ifseqformula "5"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "ifthenelse_split" (formula "21") (term "0"))
                     (branch "entr_arr.length >= 1 + iv_0 TRUE"
                        (rule "replace_known_left" (formula "22") (term "0,1") (ifseqformula "1"))
                        (builtin "One Step Simplification" (formula "22"))
                        (rule "equalityToSeqGetAndSeqLenRight" (formula "22") (inst "iv=iv"))
                        (rule "getOfSeqDef" (formula "22") (term "1,1,0,1"))
                        (rule "castDel" (formula "22") (term "1,1,1,0,1"))
                        (rule "castDel" (formula "22") (term "2,1,1,0,1"))
                        (rule "add_zero_right" (formula "22") (term "0,2,1,1,1,0,1"))
                        (rule "polySimp_elimSub" (formula "22") (term "1,1,0,1,1,0,1"))
                        (rule "mul_literals" (formula "22") (term "1,1,1,0,1,1,0,1"))
                        (rule "add_zero_right" (formula "22") (term "1,1,0,1,1,0,1"))
                        (rule "lenOfSeqDef" (formula "22") (term "1,1,0,0,1"))
                        (rule "polySimp_elimSub" (formula "22") (term "1,1,1,0,0,1"))
                        (rule "times_zero_2" (formula "22") (term "1,1,1,1,0,0,1"))
                        (rule "add_zero_right" (formula "22") (term "1,1,1,0,0,1"))
                        (rule "getOfSeqDef" (formula "22") (term "0,1,0,1"))
                        (rule "castDel" (formula "22") (term "2,0,1,0,1"))
                        (rule "castDel" (formula "22") (term "1,0,1,0,1"))
                        (rule "add_zero_right" (formula "22") (term "0,2,1,0,1,0,1"))
                        (rule "polySimp_elimSub" (formula "22") (term "1,1,0,0,1,0,1"))
                        (rule "mul_literals" (formula "22") (term "1,1,1,0,0,1,0,1"))
                        (rule "add_zero_right" (formula "22") (term "1,1,0,0,1,0,1"))
                        (rule "lenOfSeqDef" (formula "22") (term "0,0"))
                        (rule "eqSymm" (formula "22") (term "0"))
                        (rule "polySimp_elimSub" (formula "22") (term "1,1,0"))
                        (rule "times_zero_2" (formula "22") (term "1,1,1,0"))
                        (rule "add_zero_right" (formula "22") (term "1,1,0"))
                        (rule "lenOfSeqDef" (formula "22") (term "0,0"))
                        (rule "eqSymm" (formula "22") (term "0"))
                        (rule "polySimp_elimSub" (formula "22") (term "1,1,0"))
                        (rule "times_zero_2" (formula "22") (term "1,1,1,0"))
                        (rule "add_zero_right" (formula "22") (term "1,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,1,1,0,1"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,1,1,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "22") (term "0,1,1,0,0,1"))
                        (rule "add_zero_right" (formula "22") (term "0,0,1,1,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,1,0,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0,1,0,1"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0,1,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "22") (term "0,0,0"))
                        (rule "add_zero_right" (formula "22") (term "0,0,0,0"))
                        (rule "eqSymm" (formula "22") (term "0"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "22") (term "0,0,0"))
                        (rule "add_zero_right" (formula "22") (term "0,0,0,0"))
                        (rule "eqSymm" (formula "22") (term "0"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,1,1,0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0,1,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,1,1,0,1"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,1,1,0,1"))
                        (rule "polySimp_rightDist" (formula "22") (term "1,1,0,1,1,0,1"))
                        (rule "mul_literals" (formula "22") (term "0,1,1,0,1,1,0,1"))
                        (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,1,1,0,1"))
                        (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,1,1,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0,1,0,1"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0,1,0,1"))
                        (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0,1,0,1"))
                        (rule "mul_literals" (formula "22") (term "0,1,1,0,0,1,0,1"))
                        (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0,1,0,1"))
                        (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0,1,0,1"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "22") (term "0,0,1,0,0,1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "22") (term "0,0,0,1,0,0,1,0,0,1"))
                        (rule "polySimp_elimOne" (formula "22") (term "0,0,0,1,0,0,1,0,0,1"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "22") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "22") (term "0,0,0,0"))
                        (rule "eqSymm" (formula "22") (term "0"))
                        (rule "polySimp_elimOne" (formula "22") (term "0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0,1"))
                        (rule "mul_literals" (formula "22") (term "0,1,1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0,1"))
                        (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0,1"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "22") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "22") (term "0,0,0,0"))
                        (rule "eqSymm" (formula "22") (term "0"))
                        (rule "polySimp_elimOne" (formula "22") (term "0,0,1,0"))
                        (rule "nnf_imp2or" (formula "22") (term "0,1"))
                        (rule "nnf_notAnd" (formula "22") (term "0,0,1"))
                        (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0,1"))
                        (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0,1"))
                        (rule "add_literals" (formula "22") (term "0,0,0,1,0,0,1"))
                        (rule "add_zero_left" (formula "22") (term "0,0,1,0,0,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0,1"))
                        (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0,1"))
                        (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0,1"))
                        (rule "times_zero_1" (formula "22") (term "1,0,0,0,0,0,1"))
                        (rule "add_zero_right" (formula "22") (term "0,0,0,0,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0,1"))
                        (rule "mul_literals" (formula "22") (term "1,0,0,0,1"))
                        (rule "ifthenelse_split" (formula "4") (term "0"))
                        (branch "entr_arr.length >= 1 TRUE"
                           (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "4"))
                           (rule "leq_literals" (formula "8") (term "0"))
                           (builtin "One Step Simplification" (formula "8"))
                           (rule "true_left" (formula "8"))
                           (rule "arrayLengthNotNegative" (formula "19") (term "1,1,1,0,0"))
                           (rule "arrayLengthIsAShort" (formula "13") (term "1,1,0"))
                           (builtin "One Step Simplification" (formula "13"))
                           (rule "true_left" (formula "13"))
                           (rule "equalityToSeqGetAndSeqLenLeft" (formula "12") (inst "iv=iv"))
                           (rule "andLeft" (formula "12"))
                           (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
                           (rule "applyEq" (formula "12") (term "0,0") (ifseqformula "14"))
                           (builtin "One Step Simplification" (formula "12"))
                           (rule "true_left" (formula "12"))
                           (rule "applyEq" (formula "12") (term "0,0,1,0") (ifseqformula "13"))
                           (builtin "One Step Simplification" (formula "12"))
                           (rule "true_left" (formula "12"))
                           (rule "ifthenelse_split" (formula "2") (term "0"))
                           (branch "result_0 = entr_arr TRUE"
                              (rule "applyEqReverse" (formula "23") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "3"))
                              (rule "applyEqReverse" (formula "23") (term "0,0,0,1,0") (ifseqformula "3"))
                              (rule "applyEqReverse" (formula "23") (term "1,1,1,1,0,1") (ifseqformula "3"))
                              (rule "applyEqReverse" (formula "23") (term "0,1,1,0") (ifseqformula "3"))
                              (rule "hideAuxiliaryEq" (formula "3"))
                              (rule "eqSymm" (formula "22") (term "1,0,1"))
                              (rule "eqSymm" (formula "22") (term "0"))
                              (rule "applyEq" (formula "19") (term "0,0") (ifseqformula "2"))
                              (rule "applyEq" (formula "21") (term "0,1,1,0") (ifseqformula "2"))
                              (rule "applyEq" (formula "13") (term "1,0,0,0,0,0") (ifseqformula "2"))
                              (rule "applyEq" (formula "26") (term "1,0") (ifseqformula "2"))
                              (builtin "One Step Simplification" (formula "26"))
                              (rule "closeTrue" (formula "26"))
                           )
                           (branch "result_0 = entr_arr FALSE"
                              (rule "applyEqReverse" (formula "23") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "2"))
                              (rule "applyEqReverse" (formula "23") (term "0,0,0,1,0") (ifseqformula "2"))
                              (rule "applyEqReverse" (formula "23") (term "1,1,1,1,0,1") (ifseqformula "2"))
                              (rule "applyEqReverse" (formula "23") (term "0,1,1,0") (ifseqformula "2"))
                              (builtin "One Step Simplification" (formula "23"))
                              (rule "allRight" (formula "23") (inst "sk=iv_1"))
                              (rule "orRight" (formula "23"))
                              (rule "orRight" (formula "23"))
                              (rule "hideAuxiliaryEq" (formula "2"))
                              (rule "eqSymm" (formula "24"))
                              (rule "inEqSimp_geqRight" (formula "23"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "1") (term "0"))
                              (rule "inEqSimp_leqRight" (formula "23"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "replace_known_left" (formula "24") (term "0,0,0") (ifseqformula "1"))
                              (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "1")))
                              (rule "inEqSimp_homoInEq0" (formula "24") (term "0,0"))
                              (rule "eqSymm" (formula "24"))
                              (rule "polySimp_addComm1" (formula "24") (term "0,0,1"))
                              (rule "inEqSimp_homoInEq0" (formula "24") (term "0,0"))
                              (rule "polySimp_addComm1" (formula "24") (term "0,0,0"))
                              (rule "eqSymm" (formula "24"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                              (rule "polySimp_elimOne" (formula "2") (term "0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "0,1"))
                              (rule "polySimp_mulComm0" (formula "24") (term "1,0,1"))
                              (rule "polySimp_rightDist" (formula "24") (term "1,0,1"))
                              (rule "mul_literals" (formula "24") (term "0,1,0,1"))
                              (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,1"))
                              (rule "polySimp_elimOne" (formula "24") (term "1,1,0,1"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "0,0"))
                              (rule "polySimp_mulComm0" (formula "24") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "24") (term "1,0,0"))
                              (rule "mul_literals" (formula "24") (term "0,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0"))
                              (rule "pullOutSelect" (formula "24") (term "1,1") (inst "selectSK=arr_10"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "12"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "pullOutSelect" (formula "25") (term "1,0") (inst "selectSK=arr_11"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "19"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "replaceKnownSelect_taclet1001000000_4" (formula "1") (term "2,0"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,1,0,0") (ifseqformula "13"))
                              (rule "sortsDisjointModuloNull" (formula "1") (term "0,0,0"))
                              (rule "replace_known_right" (formula "1") (term "1,0,0,0") (ifseqformula "28"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "allLeft" (formula "11") (inst "t=iv_0"))
                              (rule "inEqSimp_commuteGeq" (formula "11") (term "1"))
                              (rule "inEqSimp_contradInEq1" (formula "11") (term "1,0") (ifseqformula "6"))
                              (rule "qeq_literals" (formula "11") (term "0,1,0"))
                              (builtin "One Step Simplification" (formula "11"))
                              (rule "inEqSimp_contradInEq1" (formula "11") (term "1") (ifseqformula "5"))
                              (rule "inEqSimp_homoInEq1" (formula "11") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,1"))
                              (rule "add_literals" (formula "11") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "11") (term "1,0,0,1"))
                              (rule "add_literals" (formula "11") (term "0,0,1"))
                              (rule "leq_literals" (formula "11") (term "0,1"))
                              (builtin "One Step Simplification" (formula "11"))
                              (rule "notLeft" (formula "11"))
                              (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "25"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "25"))
                              (builtin "One Step Simplification" (formula "2"))
                              (rule "ifthenelse_negated" (formula "1") (term "0"))
                              (rule "ifthenelse_negated" (formula "2") (term "0"))
                              (rule "narrowSelectArrayType" (formula "1") (term "2,0") (ifseqformula "18") (ifseqformula "25"))
                              (rule "narrowSelectArrayType" (formula "2") (term "1,0") (ifseqformula "8") (ifseqformula "25"))
                              (rule "narrowSelectArrayType" (formula "2") (term "2,0") (ifseqformula "12") (ifseqformula "25"))
                              (rule "ifthenelse_split" (formula "4") (term "0"))
                              (branch "entr_arr[iv_0].length >= 1 TRUE"
                                 (rule "replace_known_left" (formula "28") (term "0,1") (ifseqformula "5"))
                                 (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "5")))
                                 (rule "ifthenelse_split" (formula "2") (term "0"))
                                 (branch "entr_arr[iv_0].<created> = TRUE TRUE"
                                    (rule "applyEqReverse" (formula "29") (term "1") (ifseqformula "3"))
                                    (rule "applyEqReverse" (formula "1") (term "1,0") (ifseqformula "3"))
                                    (rule "hideAuxiliaryEq" (formula "3"))
                                    (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "2"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "applyEqReverse" (formula "28") (term "0") (ifseqformula "1"))
                                    (builtin "One Step Simplification" (formula "28"))
                                    (rule "closeTrue" (formula "28"))
                                 )
                                 (branch "entr_arr[iv_0].<created> = TRUE FALSE"
                                    (rule "referencedObjectIsCreatedRight" (formula "26") (ifseqformula "27"))
                                    (rule "close" (formula "26") (ifseqformula "9"))
                                 )
                              )
                              (branch "entr_arr[iv_0].length >= 1 FALSE"
                                 (rule "inEqSimp_geqRight" (formula "25"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "inEqSimp_homoInEq1" (formula "5"))
                                 (rule "times_zero_2" (formula "5") (term "1,0"))
                                 (rule "add_zero_right" (formula "5") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                                 (rule "mul_literals" (formula "5") (term "1"))
                                 (rule "inEqSimp_contradInEq0" (formula "4") (ifseqformula "5"))
                                 (rule "qeq_literals" (formula "4") (term "0"))
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "closeFalse" (formula "4"))
                              )
                           )
                        )
                        (branch "entr_arr.length >= 1 FALSE"
                           (rule "inEqSimp_geqRight" (formula "22"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_homoInEq1" (formula "5"))
                           (rule "times_zero_2" (formula "5") (term "1,0"))
                           (rule "add_zero_right" (formula "5") (term "0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                           (rule "mul_literals" (formula "5") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "5") (ifseqformula "4"))
                           (rule "qeq_literals" (formula "5") (term "0"))
                           (builtin "One Step Simplification" (formula "5"))
                           (rule "closeFalse" (formula "5"))
                        )
                     )
                     (branch "entr_arr.length >= 1 + iv_0 FALSE"
                        (rule "eqSymm" (formula "22"))
                        (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "21")))
                        (rule "closeTrue" (formula "22"))
                     )
                  )
               )
               (branch "Case 2"
                  (rule "allRight" (formula "21") (inst "sk=i_4"))
                  (rule "orRight" (formula "21"))
                  (rule "orRight" (formula "21"))
                  (rule "notRight" (formula "23"))
                  (rule "inEqSimp_leqRight" (formula "22"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "inEqSimp_geqRight" (formula "23"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_6"))
                  (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "17"))
                  (builtin "One Step Simplification" (formula "3"))
                  (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                  (rule "hideAuxiliaryEq" (formula "3"))
                  (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "15") (ifseqformula "22"))
                  (rule "allLeft" (formula "20") (inst "t=i_4"))
                  (rule "inEqSimp_commuteGeq" (formula "20") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "20") (term "1,0") (ifseqformula "2"))
                  (rule "qeq_literals" (formula "20") (term "0,1,0"))
                  (builtin "One Step Simplification" (formula "20"))
                  (rule "inEqSimp_contradInEq1" (formula "20") (term "1") (ifseqformula "1"))
                  (rule "inEqSimp_homoInEq1" (formula "20") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,1"))
                  (rule "add_literals" (formula "20") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "20") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "20") (term "0,0,1"))
                  (rule "leq_literals" (formula "20") (term "0,1"))
                  (builtin "One Step Simplification" (formula "20"))
                  (rule "notLeft" (formula "20"))
                  (rule "pullOutSelect" (formula "21") (term "0") (inst "selectSK=arr_7"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "17"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "applyEqReverse" (formula "22") (term "0") (ifseqformula "1"))
                  (rule "close" (formula "22") (ifseqformula "4"))
               )
            )
            (branch "Case 2"
               (rule "allRight" (formula "21") (inst "sk=f_1"))
               (rule "allRight" (formula "21") (inst "sk=o_1"))
               (rule "orRight" (formula "21"))
               (rule "eqSymm" (formula "22"))
               (rule "pullOutSelect" (formula "22") (term "0") (inst "selectSK=f_1_0"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "14"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,1,0,0") (ifseqformula "8"))
               (rule "eqSymm" (formula "23"))
               (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_1_1"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "9"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "23")))
               (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "commute_and" (formula "1") (term "0,0,0"))
               (rule "ifthenelse_split" (formula "1") (term "0"))
               (branch " !f_1 = java.lang.Object::<created> & o_1 = result_0 | !o_1 = null & !( o_1.<created> = TRUE | o_1.<created>@anon_heap_copyOf<<anonHeapFunction>> = TRUE) TRUE"
                  (rule "applyEqReverse" (formula "24") (term "1") (ifseqformula "2"))
                  (rule "hideAuxiliaryEq" (formula "2"))
                  (rule "eqSymm" (formula "23"))
                  (rule "orLeft" (formula "1"))
                  (branch "!f_1 = java.lang.Object::<created> & o_1 = result_0"
                     (rule "andLeft" (formula "1"))
                     (rule "notLeft" (formula "1"))
                     (rule "applyEq" (formula "24") (term "1,1") (ifseqformula "1"))
                     (rule "applyEq" (formula "24") (term "1,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "23") (term "0,0,0") (ifseqformula "1"))
                     (rule "replace_known_right" (formula "23") (term "0,0") (ifseqformula "21"))
                     (builtin "One Step Simplification" (formula "23"))
                     (rule "notRight" (formula "23"))
                     (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "2"))
                     (rule "close" (formula "21") (ifseqformula "1"))
                  )
                  (branch " !o_1 = null & !( o_1.<created> = TRUE | o_1.<created>@anon_heap_copyOf<<anonHeapFunction>> = TRUE)"
                     (rule "andLeft" (formula "1"))
                     (rule "notLeft" (formula "1"))
                     (rule "notLeft" (formula "1"))
                     (rule "orRight" (formula "18"))
                     (rule "replace_known_right" (formula "24") (term "0,0") (ifseqformula "20"))
                     (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "18")))
                     (rule "closeTrue" (formula "24"))
                  )
               )
               (branch " !f_1 = java.lang.Object::<created> & o_1 = result_0 | !o_1 = null & !( o_1.<created> = TRUE | o_1.<created>@anon_heap_copyOf<<anonHeapFunction>> = TRUE) FALSE"
                  (rule "close" (formula "24") (ifseqformula "1"))
               )
            )
         )
         (branch "Exceptional Post (sort)"
            (builtin "One Step Simplification" (formula "13"))
            (builtin "One Step Simplification" (formula "17"))
            (rule "translateJavaAddInt" (formula "13") (term "0,2,2,0,1,0,0,1,0,1,1"))
            (rule "translateJavaSubInt" (formula "13") (term "1,1,0,0,0,1,0,1,1"))
            (rule "andLeft" (formula "13"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "14") (term "1,0") (ifseqformula "13"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "14") (term "0,1,0") (ifseqformula "7"))
            (rule "andLeft" (formula "14"))
            (rule "andLeft" (formula "14"))
            (rule "andLeft" (formula "16"))
            (rule "notLeft" (formula "14"))
            (rule "close" (formula "17") (ifseqformula "16"))
         )
         (branch "Pre (sort)"
            (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "13")) (ifInst ""  (formula "13")))
            (rule "wellFormedAnonEQ" (formula "15") (term "0,1") (ifseqformula "7"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "15") (term "1,1") (ifseqformula "7"))
            (rule "leq_literals" (formula "15") (term "0,0,1,0"))
            (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "1")) (ifInst ""  (formula "6")) (ifInst ""  (formula "12")) (ifInst ""  (formula "8")))
            (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,0"))
            (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "15") (term "0,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "15") (term "0,1"))
            (rule "inEqSimp_homoInEq0" (formula "15") (term "1,0,1,1"))
            (rule "polySimp_pullOutFactor1" (formula "15") (term "0,1,0,1,1"))
            (rule "add_literals" (formula "15") (term "1,0,1,0,1,1"))
            (rule "times_zero_1" (formula "15") (term "0,1,0,1,1"))
            (rule "qeq_literals" (formula "15") (term "1,0,1,1"))
            (builtin "One Step Simplification" (formula "15"))
            (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,0"))
            (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0,0"))
            (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0,0"))
            (rule "mul_literals" (formula "15") (term "0,1,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0,0"))
            (rule "nonNull" (formula "15") (term "1,1,1,1") (inst "i=i"))
            (rule "greater_literals" (formula "15") (term "0,1,1,1,1,1"))
            (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "13")))
            (rule "sub_literals" (formula "15") (term "2,1,0,1,1,1,1"))
            (builtin "One Step Simplification" (formula "15"))
            (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,1,1,1,1"))
            (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,1,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,1,1,1,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,1,1,1,1"))
            (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0,1,1,1,1"))
            (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0,1,1,1,1"))
            (rule "mul_literals" (formula "15") (term "0,1,1,0,0,1,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0,1,1,1,1"))
            (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0,1,1,1,1"))
            (rule "nnf_imp2or" (formula "15") (term "0,0"))
            (rule "nnf_notAnd" (formula "15") (term "0,0,0"))
            (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0,0"))
            (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0,0"))
            (rule "add_zero_right" (formula "15") (term "0,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0,0"))
            (rule "mul_literals" (formula "15") (term "1,0,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0,0"))
            (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0,0"))
            (rule "add_literals" (formula "15") (term "0,0,0,1,0,0,0"))
            (rule "add_zero_left" (formula "15") (term "0,0,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0"))
            (rule "nnf_imp2or" (formula "15") (term "0,1,1,1,1"))
            (rule "nnf_notAnd" (formula "15") (term "0,0,1,1,1,1"))
            (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0,1,1,1,1"))
            (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0,1,1,1,1"))
            (rule "add_zero_right" (formula "15") (term "0,0,0,0,0,1,1,1,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0,1,1,1,1"))
            (rule "mul_literals" (formula "15") (term "1,0,0,0,1,1,1,1"))
            (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0,1,1,1,1"))
            (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0,1,1,1,1"))
            (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0,1,1,1,1"))
            (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0,1,1,1,1"))
            (rule "add_literals" (formula "15") (term "0,0,0,1,0,0,1,1,1,1"))
            (rule "add_zero_left" (formula "15") (term "0,0,1,0,0,1,1,1,1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0,1,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,1,1,1,1"))
            (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,1,1,1,1"))
            (rule "arrayLengthIsAShort" (formula "10") (term "1,1,0"))
            (builtin "One Step Simplification" (formula "10"))
            (rule "true_left" (formula "10"))
            (rule "equalityToSeqGetAndSeqLenLeft" (formula "9") (inst "iv=iv"))
            (rule "andLeft" (formula "9"))
            (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
            (rule "applyEq" (formula "9") (term "0,0") (ifseqformula "11"))
            (builtin "One Step Simplification" (formula "9"))
            (rule "true_left" (formula "9"))
            (rule "applyEq" (formula "9") (term "0,0,1,0") (ifseqformula "10"))
            (builtin "One Step Simplification" (formula "9"))
            (rule "true_left" (formula "9"))
            (rule "arrayLengthNotNegative" (formula "10") (term "1,1,0"))
            (rule "replace_known_left" (formula "16") (term "0,1") (ifseqformula "10"))
            (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "10")) (ifInst ""  (formula "10")))
            (rule "andRight" (formula "16"))
            (branch "Case 1"
               (rule "allRight" (formula "16") (inst "sk=i_2"))
               (rule "orRight" (formula "16"))
               (rule "notRight" (formula "17"))
               (rule "orRight" (formula "17"))
               (rule "inEqSimp_leqRight" (formula "17"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "inEqSimp_geqRight" (formula "18"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0"))
               (rule "polySimp_elimOne" (formula "1") (term "0"))
               (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_4"))
               (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "11"))
               (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "18")) (ifInst ""  (formula "17")))
               (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
               (rule "hideAuxiliaryEq" (formula "3"))
               (rule "allLeft" (formula "14") (inst "t=i_2"))
               (rule "inEqSimp_commuteGeq" (formula "14") (term "1"))
               (rule "inEqSimp_contradInEq1" (formula "14") (term "1,0") (ifseqformula "2"))
               (rule "qeq_literals" (formula "14") (term "0,1,0"))
               (builtin "One Step Simplification" (formula "14"))
               (rule "inEqSimp_contradInEq1" (formula "14") (term "1") (ifseqformula "1"))
               (rule "inEqSimp_homoInEq1" (formula "14") (term "0,1"))
               (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,0,1"))
               (rule "add_literals" (formula "14") (term "1,1,0,0,1"))
               (rule "times_zero_1" (formula "14") (term "1,0,0,1"))
               (rule "add_zero_right" (formula "14") (term "0,0,1"))
               (rule "leq_literals" (formula "14") (term "0,1"))
               (builtin "One Step Simplification" (formula "14"))
               (rule "notLeft" (formula "14"))
               (rule "pullOutSelect" (formula "16") (term "0") (inst "selectSK=arr_5"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "11"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "19")) (ifInst ""  (formula "18")))
               (rule "applyEqReverse" (formula "17") (term "0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "narrowSelectArrayType" (formula "16") (term "0") (ifseqformula "9") (ifseqformula "18"))
               (rule "close" (formula "16") (ifseqformula "3"))
            )
            (branch "Case 2"
               (rule "allRight" (formula "16") (inst "sk=i_1"))
               (rule "orRight" (formula "16"))
               (rule "notRight" (formula "17"))
               (rule "orRight" (formula "17"))
               (rule "inEqSimp_geqRight" (formula "18"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0"))
               (rule "inEqSimp_leqRight" (formula "18"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "2"))
               (rule "polySimp_mulLiterals" (formula "2") (term "0"))
               (rule "polySimp_elimOne" (formula "2") (term "0"))
               (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_3"))
               (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "11"))
               (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "18")) (ifInst ""  (formula "17")))
               (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
               (rule "hideAuxiliaryEq" (formula "3"))
               (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "9") (ifseqformula "17"))
               (rule "allLeft" (formula "14") (inst "t=i_1"))
               (rule "replaceKnownSelect_taclet12000_0" (formula "14") (term "0,0,0,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet12000_1" (formula "14") (term "0,0,0,0"))
               (rule "narrowSelectArrayType" (formula "14") (term "0,0,0,0") (ifseqformula "9") (ifseqformula "18"))
               (rule "replace_known_left" (formula "14") (term "0,0,0") (ifseqformula "3"))
               (builtin "One Step Simplification" (formula "14"))
               (rule "inEqSimp_commuteGeq" (formula "14") (term "1"))
               (rule "inEqSimp_contradInEq1" (formula "14") (term "1") (ifseqformula "2"))
               (rule "inEqSimp_homoInEq1" (formula "14") (term "0,1"))
               (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,0,1"))
               (rule "add_literals" (formula "14") (term "1,1,0,0,1"))
               (rule "times_zero_1" (formula "14") (term "1,0,0,1"))
               (rule "add_zero_right" (formula "14") (term "0,0,1"))
               (rule "leq_literals" (formula "14") (term "0,1"))
               (builtin "One Step Simplification" (formula "14"))
               (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "14"))
               (rule "qeq_literals" (formula "1") (term "0"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
         )
      )
      (branch "Null Reference (result_1 = null)"
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")))
         (rule "closeFalse" (formula "1"))
      )
   )
   (branch "if x false"
      (builtin "One Step Simplification" (formula "16"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "closeFalse" (formula "1"))
   )
)
(branch "Exceptional Post (copyOf)"
   (builtin "One Step Simplification" (formula "6"))
   (builtin "One Step Simplification" (formula "8"))
   (rule "andLeft" (formula "6"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "7") (term "1,0") (ifseqformula "6"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "9"))
   (rule "notLeft" (formula "7"))
   (rule "close" (formula "10") (ifseqformula "9"))
)
(branch "Pre (copyOf)"
   (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "5")) (ifInst ""  (formula "1")) (ifInst ""  (formula "5")) (ifInst ""  (formula "2")))
   (rule "nonNull" (formula "6") (inst "i=i"))
   (rule "sub_literals" (formula "6") (term "2,1,0,1,1"))
   (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "5")))
   (rule "greater_literals" (formula "6") (term "0"))
   (builtin "One Step Simplification" (formula "6"))
   (rule "allRight" (formula "6") (inst "sk=i_3"))
   (rule "impRight" (formula "6"))
   (rule "notRight" (formula "7"))
   (rule "andLeft" (formula "2"))
   (rule "narrowSelectArrayType" (formula "1") (term "0") (ifseqformula "4") (ifseqformula "8"))
   (rule "inEqSimp_ltToLeq" (formula "3"))
   (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
   (rule "polySimp_addComm1" (formula "3") (term "0"))
   (rule "inEqSimp_commuteLeq" (formula "2"))
   (rule "inEqSimp_sepNegMonomial0" (formula "3"))
   (rule "polySimp_mulLiterals" (formula "3") (term "0"))
   (rule "polySimp_elimOne" (formula "3") (term "0"))
   (rule "allLeft" (formula "7") (inst "t=i_3"))
   (rule "replace_known_left" (formula "7") (term "0,0,0") (ifseqformula "1"))
   (builtin "One Step Simplification" (formula "7"))
   (rule "inEqSimp_commuteGeq" (formula "7") (term "1"))
   (rule "inEqSimp_contradInEq1" (formula "7") (term "0") (ifseqformula "2"))
   (rule "qeq_literals" (formula "7") (term "0,0"))
   (builtin "One Step Simplification" (formula "7"))
   (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "7"))
   (rule "andLeft" (formula "3"))
   (rule "inEqSimp_homoInEq1" (formula "3"))
   (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
   (rule "add_literals" (formula "3") (term "1,1,0"))
   (rule "times_zero_1" (formula "3") (term "1,0"))
   (rule "add_zero_right" (formula "3") (term "0"))
   (rule "leq_literals" (formula "3"))
   (rule "closeFalse" (formula "3"))
)
)

}
