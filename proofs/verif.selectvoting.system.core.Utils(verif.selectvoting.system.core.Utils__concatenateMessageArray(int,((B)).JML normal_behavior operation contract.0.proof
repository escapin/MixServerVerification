\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Mon Nov 07 22:50:05 CET 2016
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=\\#begexpand_inByte\\#end,\\#begexpand_inChar\\#end,\\#begexpand_inShort\\#end,\\#begexpand_inInt\\#end,\\#begexpand_inLong\\#end
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_NONE
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=20000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:allow , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_OFF
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\javaSource "../src";

\proofObligation "#Proof Obligation Settings
#Mon Nov 07 22:50:05 CET 2016
name=verif.selectvoting.system.core.Utils[verif.selectvoting.system.core.Utils\\:\\:concatenateMessageArray(int,[[B)].JML normal_behavior operation contract.0
contract=verif.selectvoting.system.core.Utils[verif.selectvoting.system.core.Utils\\:\\:concatenateMessageArray(int,[[B)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "mihai" ) (keyVersion "6bc7ade97061383f11985e24decf735b7f2f0af2"))
(keyLog "1" (keyUser "mihai" ) (keyVersion "6bc7ade97061383f11985e24decf735b7f2f0af2"))
(keyLog "2" (keyUser "mihai" ) (keyVersion "6bc7ade97061383f11985e24decf735b7f2f0af2"))
(keyLog "3" (keyUser "mihai" ) (keyVersion "6bc7ade97061383f11985e24decf735b7f2f0af2"))

(autoModeTime "215384")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "i,messages,result,exc,heapAtPre,o,f") (userinteraction))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "2"))
(rule "assignment" (formula "8") (term "1") (userinteraction))
(builtin "One Step Simplification" (formula "8"))
(rule "methodBodyExpand" (formula "8") (term "1") (newnames "heapBefore_concatenateMessageArray,savedHeapBefore_concatenateMessageArray") (userinteraction))
(builtin "One Step Simplification" (formula "8"))
(rule "ifElseUnfold" (formula "8") (term "1") (inst "#boolv=x") (userinteraction))
(rule "variableDeclaration" (formula "8") (term "1") (newnames "x") (userinteraction))
(rule "compound_equality_comparison_2" (formula "8") (term "1") (inst "#v1=x_2") (inst "#v0=x_1") (userinteraction))
(rule "variableDeclarationAssign" (formula "8") (term "1") (userinteraction))
(rule "variableDeclaration" (formula "8") (term "1") (newnames "x_1") (userinteraction))
(rule "assignment" (formula "8") (term "1") (userinteraction))
(builtin "One Step Simplification" (formula "8"))
(rule "variableDeclarationAssign" (formula "8") (term "1") (userinteraction))
(rule "variableDeclaration" (formula "8") (term "1") (newnames "x_2") (userinteraction))
(rule "assignment_read_length" (formula "8") (term "1") (userinteraction))
(branch "Normal Execution (_messages != null)"
   (builtin "One Step Simplification" (formula "8"))
   (builtin "One Step Simplification" (formula "9"))
   (rule "equality_comparison_simple" (formula "9") (term "1") (userinteraction))
   (builtin "One Step Simplification" (formula "9"))
   (rule "ifElse" (formula "9") (term "1") (userinteraction))
   (builtin "One Step Simplification" (formula "9"))
   (rule "ifthenelse_split_for" (formula "9") (userinteraction))
   (branch "i = messages.length TRUE"
      (builtin "One Step Simplification" (formula "3"))
      (rule "true_left" (formula "3"))
      (rule "translateJavaAddInt" (formula "9") (term "1,1,1,1,1,0,1,0,0,0,1"))
      (rule "translateJavaAddInt" (formula "4") (term "0"))
      (rule "translateJavaSubInt" (formula "4") (term "0,0"))
      (rule "eqSymm" (formula "9") (term "0,0,0,0,0,1"))
      (rule "eqSymm" (formula "1"))
      (rule "eqSymm" (formula "9") (term "1,0,0,1,0,1"))
      (rule "eqSymm" (formula "9") (term "1,0,1,0,0,0,1"))
      (rule "replace_known_right" (formula "3") (term "0") (ifseqformula "8"))
      (builtin "One Step Simplification" (formula "3"))
      (rule "polySimp_elimSub" (formula "4") (term "0,0"))
      (rule "polySimp_addComm0" (formula "9") (term "1,1,1,0,1,0,1,0,0,0,1"))
      (rule "polySimp_addComm1" (formula "4") (term "0"))
      (rule "polySimp_addComm0" (formula "4") (term "0,0"))
      (rule "polySimp_addComm1" (formula "4") (term "0"))
      (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,1,0,0,0,1"))
      (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,1,0,0,0,1"))
      (rule "polySimp_addComm1" (formula "9") (term "0,0,0,1,0,0,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "6"))
      (rule "inEqSimp_commuteLeq" (formula "5"))
      (rule "applyEq" (formula "6") (term "0") (ifseqformula "1"))
      (rule "inEqSimp_homoInEq1" (formula "6"))
      (rule "polySimp_pullOutFactor1" (formula "6") (term "0"))
      (rule "add_literals" (formula "6") (term "1,0"))
      (rule "times_zero_1" (formula "6") (term "0"))
      (rule "leq_literals" (formula "6"))
      (rule "true_left" (formula "6"))
      (rule "applyEq" (formula "4") (term "1,0") (ifseqformula "1"))
      (rule "polySimp_pullOutFactor2b" (formula "4") (term "0"))
      (rule "add_literals" (formula "4") (term "1,1,0"))
      (rule "times_zero_1" (formula "4") (term "1,0"))
      (rule "add_zero_right" (formula "4") (term "0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "8") (term "0,0,1,0,0,0,1"))
      (rule "polySimp_mulLiterals" (formula "8") (term "0,0,0,1,0,0,0,1"))
      (rule "polySimp_elimOne" (formula "8") (term "0,0,0,1,0,0,0,1"))
      (rule "nonNull" (formula "6") (inst "i=i_1"))
      (rule "greater_literals" (formula "6") (term "0,1"))
      (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "7")))
      (rule "sub_literals" (formula "6") (term "2,1,0"))
      (builtin "One Step Simplification" (formula "6"))
      (rule "narrowSelectArrayType" (formula "6") (term "0,0,1,0") (ifseqformula "2") (ifseqformula "7"))
      (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0"))
      (rule "applyEq" (formula "6") (term "0,1,0,0,1,0,0") (ifseqformula "1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "6") (term "1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0"))
      (rule "mul_literals" (formula "6") (term "0,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0"))
      (rule "array2seqDef" (formula "8") (term "1,1,0,1,0,0,0,1") (inst "u=u"))
      (rule "eqSymm" (formula "8") (term "1,0,1,0,0,0,1"))
      (rule "array2seqDef" (formula "8") (term "0,1,1,0,1,0,0,0,1") (inst "u=u"))
      (rule "eqSymm" (formula "8") (term "1,0,1,0,0,0,1"))
      (rule "eqSeqDef" (formula "8") (term "1,0,1,0,0,0,1") (inst "iv=iv"))
      (rule "lenOfSeqDef" (formula "8") (term "1,0,1,0,1,0,0,0,1"))
      (rule "polySimp_elimSub" (formula "8") (term "1,1,0,1,0,1,0,0,0,1"))
      (rule "times_zero_2" (formula "8") (term "1,1,1,0,1,0,1,0,0,0,1"))
      (rule "add_zero_right" (formula "8") (term "1,1,0,1,0,1,0,0,0,1"))
      (rule "getOfSeqDef" (formula "8") (term "1,1,0,1,1,0,1,0,0,0,1"))
      (rule "castDel" (formula "8") (term "1,1,1,0,1,1,0,1,0,0,0,1"))
      (rule "castDel" (formula "8") (term "2,1,1,0,1,1,0,1,0,0,0,1"))
      (rule "add_zero_right" (formula "8") (term "0,2,1,1,1,0,1,1,0,1,0,0,0,1"))
      (rule "polySimp_elimSub" (formula "8") (term "1,1,0,1,1,0,1,1,0,1,0,0,0,1"))
      (rule "mul_literals" (formula "8") (term "1,1,1,0,1,1,0,1,1,0,1,0,0,0,1"))
      (rule "add_zero_right" (formula "8") (term "1,1,0,1,1,0,1,1,0,1,0,0,0,1"))
      (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0,1,1,0,1,0,0,0,1"))
      (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0,1,1,0,1,0,0,0,1"))
      (rule "polySimp_addComm1" (formula "8") (term "0,1,0,0,1,1,0,1,0,0,0,1"))
      (rule "inEqSimp_ltToLeq" (formula "8") (term "0,1,0,1,0,1,0,0,0,1"))
      (rule "add_zero_right" (formula "8") (term "0,0,1,0,1,0,1,0,0,0,1"))
      (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,1,0,1,0,0,0,1"))
      (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,1,1,0,1,1,0,1,0,0,0,1"))
      (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,1,1,0,1,1,0,1,0,0,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0,1,1,0,1,0,0,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,1,1,0,1,1,0,1,0,0,0,1"))
      (rule "inEqSimp_sepNegMonomial0" (formula "8") (term "1,0,0,1,1,0,1,0,0,0,1"))
      (rule "polySimp_mulLiterals" (formula "8") (term "0,1,0,0,1,1,0,1,0,0,0,1"))
      (rule "polySimp_elimOne" (formula "8") (term "0,1,0,0,1,1,0,1,0,0,0,1"))
      (rule "inEqSimp_sepNegMonomial0" (formula "8") (term "0,1,0,1,0,1,0,0,0,1"))
      (rule "polySimp_mulLiterals" (formula "8") (term "0,0,1,0,1,0,1,0,0,0,1"))
      (rule "polySimp_elimOne" (formula "8") (term "0,0,1,0,1,0,1,0,0,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,1,1,0,1,1,0,1,0,0,0,1"))
      (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,1,1,0,1,1,0,1,0,0,0,1"))
      (rule "polySimp_rightDist" (formula "8") (term "1,1,0,1,1,0,1,1,0,1,0,0,0,1"))
      (rule "mul_literals" (formula "8") (term "0,1,1,0,1,1,0,1,1,0,1,0,0,0,1"))
      (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,1,1,0,1,1,0,1,0,0,0,1"))
      (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,1,1,0,1,1,0,1,0,0,0,1"))
      (rule "array2seqDef" (formula "8") (term "1,0,0,0,1,0,1,0,0,0,1") (inst "u=u"))
      (rule "array2seqDef" (formula "8") (term "1,0,0,1,0,1,1,0,1,0,0,0,1") (inst "u=u"))
      (rule "array2seqDef" (formula "8") (term "1,0,0,1,0,0,1,1,0,1,0,0,0,1") (inst "u=u"))
      (rule "nnf_imp2or" (formula "6") (term "0"))
      (rule "nnf_notAnd" (formula "6") (term "0,0"))
      (rule "inEqSimp_notGeq" (formula "6") (term "0,0,0"))
      (rule "times_zero_1" (formula "6") (term "1,0,0,0,0,0"))
      (rule "add_zero_right" (formula "6") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0"))
      (rule "mul_literals" (formula "6") (term "1,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "6") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "6") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "6") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0"))
      (rule "nnf_imp2or" (formula "8") (term "0,1,1,0,1,0,0,0,1"))
      (rule "nnf_notAnd" (formula "8") (term "0,0,1,1,0,1,0,0,0,1"))
      (rule "inEqSimp_notGeq" (formula "8") (term "1,0,0,1,1,0,1,0,0,0,1"))
      (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0,1,1,0,1,0,0,0,1"))
      (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0,1,1,0,1,0,0,0,1"))
      (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0,1,1,0,1,0,0,0,1"))
      (rule "add_literals" (formula "8") (term "0,0,0,1,0,0,1,1,0,1,0,0,0,1"))
      (rule "add_zero_left" (formula "8") (term "0,0,1,0,0,1,1,0,1,0,0,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0,1,1,0,1,0,0,0,1"))
      (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,1,1,0,1,0,0,0,1"))
      (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0,1,1,0,1,0,0,0,1"))
      (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0,1,1,0,1,0,0,0,1"))
      (rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0,1,1,0,1,0,0,0,1"))
      (rule "add_literals" (formula "8") (term "0,0,0,0,0,1,1,0,1,0,0,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0,1,1,0,1,0,0,0,1"))
      (rule "mul_literals" (formula "8") (term "1,0,0,0,1,1,0,1,0,0,0,1"))
      (rule "commute_or_2" (formula "6") (term "0"))
      (rule "commute_or" (formula "6") (term "0,0"))
      (rule "returnUnfold" (formula "8") (term "1") (inst "#v0=x_arr"))
      (rule "variableDeclarationAssign" (formula "8") (term "1"))
      (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_arr_28"))
      (rule "arrayCreation" (formula "8") (term "1") (inst "#v0=x_arr_29"))
      (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_arr_29"))
      (rule "variableDeclarationAssign" (formula "8") (term "1"))
      (rule "variableDeclaration" (formula "8") (term "1") (newnames "dim0_7"))
      (rule "assignment" (formula "8") (term "1"))
      (builtin "One Step Simplification" (formula "8"))
      (rule "arrayLengthIsAShort" (formula "1") (term "0"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "true_left" (formula "1"))
      (rule "arrayLengthNotNegative" (formula "1") (term "0"))
      (rule "applyEq" (formula "1") (term "0") (ifseqformula "2"))
      (rule "ifUnfold" (formula "8") (term "1") (inst "#boolv=x"))
      (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_35"))
      (rule "less_than_comparison_simple" (formula "8") (term "1"))
      (builtin "One Step Simplification" (formula "8"))
      (rule "less_literals" (formula "8") (term "0,0,1,0"))
      (builtin "One Step Simplification" (formula "8"))
      (rule "ifSplit" (formula "8"))
      (branch "if x_35 true"
         (builtin "One Step Simplification" (formula "9"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "closeFalse" (formula "1"))
      )
      (branch "if x_35 false"
         (builtin "One Step Simplification" (formula "9"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "true_left" (formula "1"))
         (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "8") (term "1") (inst "#v0=x_arr_30"))
         (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_arr_30"))
         (rule "variableDeclarationAssign" (formula "8") (term "1"))
         (rule "variableDeclaration" (formula "8") (term "1") (newnames "length_15"))
         (rule "assignment" (formula "8") (term "1"))
         (builtin "One Step Simplification" (formula "8"))
         (rule "methodBodyExpand" (formula "8") (term "1") (newnames "heapBefore_<createArray>_6,savedHeapBefore_<createArray>_6"))
         (builtin "One Step Simplification" (formula "8"))
         (rule "variableDeclaration" (formula "8") (term "1") (newnames "newObject_7"))
         (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "8") (term "1") (inst "#v0=x_arr_31"))
         (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_arr_31"))
         (rule "variableDeclarationAssign" (formula "8") (term "1"))
         (rule "variableDeclaration" (formula "8") (term "1") (newnames "length_16"))
         (rule "assignment" (formula "8") (term "1"))
         (builtin "One Step Simplification" (formula "8"))
         (rule "allocateInstanceWithLength" (formula "8"))
         (builtin "One Step Simplification" (formula "9"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "3")))
         (rule "andLeft" (formula "1"))
         (rule "andLeft" (formula "1"))
         (rule "andLeft" (formula "2"))
         (rule "notLeft" (formula "1"))
         (rule "notLeft" (formula "1"))
         (rule "blockEmpty" (formula "12") (term "1"))
         (rule "assignment" (formula "12") (term "1"))
         (builtin "One Step Simplification" (formula "12"))
         (rule "arrayLengthNotNegative" (formula "1") (term "0"))
         (rule "applyEq" (formula "1") (term "0") (ifseqformula "2"))
         (rule "qeq_literals" (formula "1"))
         (rule "true_left" (formula "1"))
         (rule "arrayLengthIsAShort" (formula "1") (term "0"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "true_left" (formula "1"))
         (rule "methodCall" (formula "12") (term "1"))
         (branch "Normal Execution (newObject_7 != null )"
            (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "10")))
            (rule "false_right" (formula "12"))
            (rule "methodBodyExpand" (formula "12") (term "1") (newnames "heapBefore_<createArrayHelper>_5,savedHeapBefore_<createArrayHelper>_5"))
            (builtin "One Step Simplification" (formula "12"))
            (rule "assignment_write_attribute_this" (formula "12") (term "1"))
            (builtin "One Step Simplification" (formula "12"))
            (rule "methodCallWithinClass" (formula "12") (term "1"))
            (rule "methodBodyExpand" (formula "12") (term "1") (newnames "heapBefore_<prepare>_0,savedHeapBefore_<prepare>_0"))
            (builtin "One Step Simplification" (formula "12"))
            (rule "arrayInitialisation" (formula "12") (term "1"))
            (builtin "One Step Simplification" (formula "12"))
            (rule "polySimp_elimSub" (formula "12") (term "2,1,0,1,0"))
            (rule "mul_literals" (formula "12") (term "1,2,1,0,1,0"))
            (rule "polySimp_addComm0" (formula "12") (term "2,1,0,1,0"))
            (rule "applyEq" (formula "12") (term "1,2,1,0,1,0") (ifseqformula "1"))
            (rule "add_zero_right" (formula "12") (term "2,1,0,1,0"))
            (rule "methodCallEmpty" (formula "12") (term "1"))
            (rule "blockEmpty" (formula "12") (term "1"))
            (rule "assignment_write_attribute_this" (formula "12") (term "1"))
            (builtin "One Step Simplification" (formula "12"))
            (rule "methodCallReturnIgnoreResult" (formula "12") (term "1"))
            (rule "blockEmpty" (formula "12") (term "1"))
            (rule "methodCallReturn" (formula "12") (term "1"))
            (rule "assignment" (formula "12") (term "1"))
            (builtin "One Step Simplification" (formula "12"))
            (rule "methodCallEmpty" (formula "12") (term "1"))
            (rule "blockEmpty" (formula "12") (term "1"))
            (rule "assignment" (formula "12") (term "1"))
            (builtin "One Step Simplification" (formula "12"))
            (rule "blockEmpty" (formula "12") (term "1"))
            (rule "assignment" (formula "12") (term "1"))
            (builtin "One Step Simplification" (formula "12"))
            (rule "tryReturn" (formula "12") (term "1"))
            (rule "methodCallReturn" (formula "12") (term "1"))
            (rule "assignment" (formula "12") (term "1"))
            (builtin "One Step Simplification" (formula "12"))
            (rule "methodCallEmpty" (formula "12") (term "1"))
            (rule "tryEmpty" (formula "12") (term "1"))
            (rule "emptyModality" (formula "12") (term "1"))
            (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "3")) (ifInst ""  (formula "1")) (ifInst ""  (formula "9")) (ifInst ""  (formula "10")))
            (rule "eqSymm" (formula "12") (term "1,0,0,1"))
            (rule "dismissNonSelectedField" (formula "12") (term "2,1,0,0,0,1,0"))
            (rule "dismissNonSelectedField" (formula "12") (term "0,1,0,0,0,0,1,0"))
            (rule "dismissNonSelectedField" (formula "12") (term "2,0,0,0,0,1,0"))
            (rule "dismissNonSelectedField" (formula "12") (term "2,1,0,0,1,0,0,1,1,0"))
            (rule "dismissNonSelectedField" (formula "12") (term "0,1,0,0,0,1,0,0,1,1,0"))
            (rule "dismissNonSelectedField" (formula "12") (term "1,2,0,0,0,1,0,1,1,0"))
            (rule "dismissNonSelectedField" (formula "12") (term "2,0,0,0,1,0,0,1,1,0"))
            (rule "dismissNonSelectedField" (formula "12") (term "0,1,0,0,0,1,0,1,1,0"))
            (rule "dismissNonSelectedField" (formula "12") (term "2,1,0,0,1,0,1,1,0"))
            (rule "dismissNonSelectedField" (formula "12") (term "1,1,1,0,1,1,0"))
            (rule "dismissNonSelectedField" (formula "12") (term "1,2,0,0,0,0,1,0"))
            (rule "dismissNonSelectedField" (formula "12") (term "2,0,0,0,1,0,1,1,0"))
            (rule "dismissNonSelectedField" (formula "12") (term "1,2,0,0,0,1,0,0,1,1,0"))
            (rule "applyEq" (formula "12") (term "0,0,0") (ifseqformula "3"))
            (rule "inEqSimp_homoInEq1" (formula "12") (term "0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,0"))
            (rule "add_literals" (formula "12") (term "1,1,0,0,0"))
            (rule "times_zero_1" (formula "12") (term "1,0,0,0"))
            (rule "add_zero_right" (formula "12") (term "0,0,0"))
            (rule "leq_literals" (formula "12") (term "0,0"))
            (builtin "One Step Simplification" (formula "12"))
            (rule "allRight" (formula "12") (inst "sk=f_0"))
            (rule "allRight" (formula "12") (inst "sk=o_0"))
            (rule "orRight" (formula "12"))
            (rule "pullOutSelect" (formula "13") (term "0") (inst "selectSK=f_0_0"))
            (rule "simplifySelectOfStore" (formula "1"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "castDel" (formula "1") (term "1,0"))
            (rule "eqSymm" (formula "14"))
            (rule "eqSymm" (formula "1") (term "1,0,0"))
            (rule "eqSymm" (formula "1") (term "0,0,0"))
            (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_1"))
            (rule "simplifySelectOfMemset" (formula "1"))
            (rule "elementOfArrayRange" (formula "1") (term "0,0,0") (inst "iv=iv"))
            (rule "eqSymm" (formula "1") (term "0,0,0,1,0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0,1,0,0,0"))
            (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_2"))
            (rule "simplifySelectOfStore" (formula "1"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "castDel" (formula "1") (term "1,0"))
            (rule "eqSymm" (formula "1") (term "1,0,0"))
            (rule "eqSymm" (formula "1") (term "0,0,0"))
            (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_3"))
            (rule "simplifySelectOfStore" (formula "1"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "castDel" (formula "1") (term "1,0"))
            (rule "eqSymm" (formula "1") (term "1,0,0"))
            (rule "eqSymm" (formula "1") (term "0,0,0"))
            (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_4"))
            (rule "simplifySelectOfStore" (formula "1"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "castDel" (formula "1") (term "1,0"))
            (rule "eqSymm" (formula "1") (term "0,0,0"))
            (rule "eqSymm" (formula "1") (term "1,0,0"))
            (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_5"))
            (rule "simplifySelectOfCreate" (formula "1"))
            (rule "castDel" (formula "1") (term "1,0"))
            (rule "eqSymm" (formula "1") (term "0,0,0,0"))
            (rule "replace_known_right" (formula "1") (term "0,1,0,0,0") (ifseqformula "16"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "commute_and" (formula "6") (term "0,0"))
            (rule "commute_and" (formula "4") (term "0,0"))
            (rule "commute_and" (formula "3") (term "0,0"))
            (rule "commute_and" (formula "2") (term "0,0"))
            (rule "commute_and" (formula "1") (term "0,0"))
            (rule "commute_and_2" (formula "5") (term "0,1,0,0,0"))
            (rule "inEqSimp_and_contradInEq1" (formula "5") (term "0,1,0,0,0"))
            (rule "qeq_literals" (formula "5") (term "1,0,1,0,0,0"))
            (builtin "One Step Simplification" (formula "5"))
            (rule "applyEqReverse" (formula "6") (term "2,0") (ifseqformula "5"))
            (rule "hideAuxiliaryEq" (formula "5"))
            (rule "ifthenelse_split" (formula "1") (term "0"))
            (branch "f_0 = java.lang.Object::<created> ∧ o_0 = x_arr_31 TRUE"
               (rule "andLeft" (formula "1"))
               (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
               (rule "hideAuxiliaryEq" (formula "3"))
               (rule "replace_known_left" (formula "3") (term "1,0,0") (ifseqformula "2"))
               (builtin "One Step Simplification" (formula "3"))
               (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "2"))
               (builtin "One Step Simplification" (formula "4"))
               (rule "replace_known_left" (formula "6") (term "1,0,0") (ifseqformula "2"))
               (builtin "One Step Simplification" (formula "6"))
               (rule "replace_known_left" (formula "5") (term "1,0,0") (ifseqformula "2"))
               (builtin "One Step Simplification" (formula "5"))
               (rule "applyEqRigid" (formula "4") (term "0,0,0") (ifseqformula "1"))
               (builtin "One Step Simplification" (formula "4"))
               (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
               (rule "hideAuxiliaryEq" (formula "4"))
               (rule "applyEqRigid" (formula "5") (term "0,0,0") (ifseqformula "1"))
               (builtin "One Step Simplification" (formula "5"))
               (rule "applyEqReverse" (formula "18") (term "1") (ifseqformula "5"))
               (rule "hideAuxiliaryEq" (formula "5"))
               (rule "applyEq" (formula "4") (term "0,0,0") (ifseqformula "1"))
               (builtin "One Step Simplification" (formula "4"))
               (rule "applyEqReverse" (formula "17") (term "1") (ifseqformula "4"))
               (rule "hideAuxiliaryEq" (formula "4"))
               (rule "applyEq" (formula "3") (term "0,0,0") (ifseqformula "1"))
               (builtin "One Step Simplification" (formula "3"))
               (rule "applyEqReverse" (formula "16") (term "1") (ifseqformula "3"))
               (rule "hideAuxiliaryEq" (formula "3"))
               (rule "applyEqRigid" (formula "15") (term "2,0") (ifseqformula "1"))
               (rule "narrowSelectType" (formula "15") (term "0") (ifseqformula "6"))
               (rule "replace_known_right" (formula "14") (term "0,1") (ifseqformula "15"))
               (builtin "One Step Simplification" (formula "14"))
               (rule "notRight" (formula "14"))
               (rule "applyEqRigid" (formula "3") (term "0") (ifseqformula "1"))
               (rule "eqSymm" (formula "3"))
               (rule "close" (formula "13") (ifseqformula "3"))
            )
            (branch "f_0 = java.lang.Object::<created> ∧ o_0 = x_arr_31 FALSE"
               (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "ifthenelse_split" (formula "1") (term "0"))
               (branch "f_0 = java.lang.Object::<transient> ∧ o_0 = x_arr_31 TRUE"
                  (rule "andLeft" (formula "1"))
                  (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                  (rule "hideAuxiliaryEq" (formula "3"))
                  (rule "replace_known_left" (formula "3") (term "1,0,0") (ifseqformula "2"))
                  (builtin "One Step Simplification" (formula "3"))
                  (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "2"))
                  (builtin "One Step Simplification" (formula "4"))
                  (rule "replace_known_left" (formula "5") (term "1,0,0") (ifseqformula "2"))
                  (builtin "One Step Simplification" (formula "5"))
                  (rule "replace_known_left" (formula "14") (term "1") (ifseqformula "2"))
                  (builtin "One Step Simplification" (formula "14"))
                  (rule "applyEq" (formula "18") (term "1,0,0,1") (ifseqformula "2"))
                  (rule "replace_known_right" (formula "18") (term "0,1") (ifseqformula "15"))
                  (builtin "One Step Simplification" (formula "18"))
                  (rule "notRight" (formula "18"))
                  (rule "applyEq" (formula "4") (term "0,0,0") (ifseqformula "2"))
                  (builtin "One Step Simplification" (formula "4"))
                  (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                  (rule "hideAuxiliaryEq" (formula "4"))
                  (rule "applyEqRigid" (formula "4") (term "0,0,0") (ifseqformula "2"))
                  (builtin "One Step Simplification" (formula "4"))
                  (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                  (rule "hideAuxiliaryEq" (formula "4"))
                  (rule "applyEq" (formula "13") (term "0") (ifseqformula "2"))
                  (builtin "One Step Simplification" (formula "13"))
                  (rule "false_right" (formula "13"))
                  (rule "applyEq" (formula "4") (term "0,0,0") (ifseqformula "2"))
                  (builtin "One Step Simplification" (formula "4"))
                  (rule "applyEqReverse" (formula "16") (term "1") (ifseqformula "4"))
                  (rule "hideAuxiliaryEq" (formula "4"))
                  (rule "applyEqRigid" (formula "15") (term "2,0") (ifseqformula "2"))
                  (rule "narrowSelectType" (formula "15") (term "0") (ifseqformula "7"))
                  (rule "applyEqRigid" (formula "3") (term "0") (ifseqformula "1"))
                  (rule "eqSymm" (formula "3"))
                  (rule "close" (formula "13") (ifseqformula "3"))
               )
               (branch "f_0 = java.lang.Object::<transient> ∧ o_0 = x_arr_31 FALSE"
                  (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "ifthenelse_split" (formula "1") (term "0"))
                  (branch " f_0 = java.lang.Object::<transactionConditionallyUpdated> ∧ o_0 = x_arr_31 TRUE"
                     (rule "andLeft" (formula "1"))
                     (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                     (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "2")))
                     (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                     (rule "hideAuxiliaryEq" (formula "3"))
                     (rule "hideAuxiliaryEq" (formula "3"))
                     (rule "replace_known_left" (formula "3") (term "1,0,0") (ifseqformula "2"))
                     (builtin "One Step Simplification" (formula "3"))
                     (rule "replace_known_left" (formula "13") (term "1") (ifseqformula "2"))
                     (builtin "One Step Simplification" (formula "13"))
                     (rule "replace_known_left" (formula "12") (term "1") (ifseqformula "2"))
                     (builtin "One Step Simplification" (formula "12"))
                     (rule "applyEq" (formula "3") (term "0,0,0") (ifseqformula "1"))
                     (builtin "One Step Simplification" (formula "3"))
                     (rule "applyEqReverse" (formula "18") (term "1") (ifseqformula "3"))
                     (rule "hideAuxiliaryEq" (formula "3"))
                     (rule "applyEqRigid" (formula "12") (term "0") (ifseqformula "1"))
                     (builtin "One Step Simplification" (formula "12"))
                     (rule "false_right" (formula "12"))
                     (rule "applyEq" (formula "11") (term "0") (ifseqformula "1"))
                     (builtin "One Step Simplification" (formula "11"))
                     (rule "false_right" (formula "11"))
                     (rule "applyEq" (formula "15") (term "1,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "14") (term "1,0,0,1") (ifseqformula "2"))
                     (rule "replace_known_right" (formula "14") (term "0,1") (ifseqformula "11"))
                     (builtin "One Step Simplification" (formula "14"))
                     (rule "notRight" (formula "14"))
                     (rule "applyEq" (formula "15") (term "2,0") (ifseqformula "2"))
                     (rule "narrowSelectType" (formula "15") (term "0") (ifseqformula "7"))
                     (builtin "One Step Simplification" (formula "15"))
                     (rule "notRight" (formula "15"))
                     (rule "applyEq" (formula "4") (term "0") (ifseqformula "2"))
                     (rule "eqSymm" (formula "4"))
                     (rule "close" (formula "14") (ifseqformula "4"))
                  )
                  (branch " f_0 = java.lang.Object::<transactionConditionallyUpdated> ∧ o_0 = x_arr_31 FALSE"
                     (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                     (rule "hideAuxiliaryEq" (formula "1"))
                     (rule "ifthenelse_split" (formula "1") (term "0"))
                     (branch "f_0 = java.lang.Object::<initialized> ∧ o_0 = x_arr_31 TRUE"
                        (rule "andLeft" (formula "1"))
                        (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                        (rule "hideAuxiliaryEq" (formula "3"))
                        (rule "replace_known_left" (formula "3") (term "0,0,0") (ifseqformula "1"))
                        (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "2")))
                        (rule "applyEqReverse" (formula "19") (term "1") (ifseqformula "3"))
                        (rule "hideAuxiliaryEq" (formula "3"))
                        (rule "replace_known_left" (formula "12") (term "1") (ifseqformula "2"))
                        (builtin "One Step Simplification" (formula "12"))
                        (rule "replace_known_left" (formula "13") (term "1") (ifseqformula "2"))
                        (builtin "One Step Simplification" (formula "13"))
                        (rule "replace_known_left" (formula "11") (term "1") (ifseqformula "2"))
                        (builtin "One Step Simplification" (formula "11"))
                        (rule "applyEq" (formula "12") (term "0") (ifseqformula "1"))
                        (builtin "One Step Simplification" (formula "12"))
                        (rule "false_right" (formula "12"))
                        (rule "applyEq" (formula "12") (term "0") (ifseqformula "1"))
                        (builtin "One Step Simplification" (formula "12"))
                        (rule "false_right" (formula "12"))
                        (rule "applyEq" (formula "16") (term "2,0") (ifseqformula "1"))
                        (rule "narrowSelectType" (formula "16") (term "0") (ifseqformula "6"))
                        (rule "applyEq" (formula "15") (term "0,0,0") (ifseqformula "2"))
                        (rule "replace_known_right" (formula "15") (term "0,0") (ifseqformula "13"))
                        (builtin "One Step Simplification" (formula "15"))
                        (rule "notRight" (formula "15"))
                        (rule "applyEqRigid" (formula "12") (term "0") (ifseqformula "2"))
                        (builtin "One Step Simplification" (formula "12"))
                        (rule "false_right" (formula "12"))
                        (rule "applyEq" (formula "15") (term "1,0") (ifseqformula "3"))
                        (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                        (rule "close" (formula "12") (ifseqformula "1"))
                     )
                     (branch "f_0 = java.lang.Object::<initialized> ∧ o_0 = x_arr_31 FALSE"
                        (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "10"))
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "18")))
                        (rule "closeFalse" (formula "1"))
                     )
                  )
               )
            )
         )
         (branch "Null Reference (newObject_7 = null)"
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "11")))
            (rule "closeFalse" (formula "1"))
         )
      )
   )
   (branch "i = messages.length FALSE"
      (rule "elim_double_block_2" (formula "10") (term "1") (userinteraction))
      (rule "returnUnfold" (formula "10") (term "1") (inst "#v0=x_arr") (userinteraction))
      (rule "variableDeclarationAssign" (formula "10") (term "1") (userinteraction))
      (rule "variableDeclaration" (formula "10") (term "1") (newnames "x_arr_32") (userinteraction))
      (rule "methodCallWithAssignmentUnfoldArguments" (formula "10") (term "1") (userinteraction))
      (rule "variableDeclarationAssign" (formula "10") (term "1") (userinteraction))
      (rule "variableDeclaration" (formula "10") (term "1") (newnames "var") (userinteraction))
      (rule "assignment_array2" (formula "10") (term "1") (userinteraction))
      (branch "Normal Execution (_messages != null)"
         (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "8")))
         (builtin "One Step Simplification" (formula "11"))
         (rule "variableDeclarationAssign" (formula "11") (term "1") (userinteraction))
         (rule "variableDeclaration" (formula "11") (term "1") (newnames "var_1") (userinteraction))
         (rule "methodCallWithAssignmentUnfoldArguments" (formula "11") (term "1") (userinteraction))
         (rule "variableDeclarationAssign" (formula "11") (term "1") (userinteraction))
         (rule "variableDeclaration" (formula "11") (term "1") (newnames "var_2") (userinteraction))
         (rule "assignmentAdditionInt" (formula "11") (term "1") (userinteraction))
         (builtin "One Step Simplification" (formula "11"))
         (rule "variableDeclarationAssign" (formula "11") (term "1") (userinteraction))
         (rule "variableDeclaration" (formula "11") (term "1") (newnames "var_3") (userinteraction))
         (rule "assignment" (formula "11") (term "1") (userinteraction))
         (builtin "One Step Simplification" (formula "11"))
         (builtin "Use Operation Contract" (formula "11") (newnames "heapBefore_concatenateMessageArray_6,result_0,exc_7,heapAfter_concatenateMessageArray,anon_heap_concatenateMessageArray") (contract "verif.selectvoting.system.core.Utils[verif.selectvoting.system.core.Utils::concatenateMessageArray(int,[[B)].JML normal_behavior operation contract.0"))
         (branch "Post (concatenateMessageArray)"
            (rule "assignment" (formula "13") (term "1,1") (userinteraction))
            (rule "blockEmpty" (formula "13") (term "1,1,1") (userinteraction))
            (builtin "One Step Simplification" (formula "13"))
            (builtin "Use Operation Contract" (formula "13") (newnames "heapBefore_concatenate,result_1,exc_8,heapAfter_concatenate,anon_heap_concatenate") (contract "verif.utils.MessageTools[verif.utils.MessageTools::concatenate([B,[B)].JML normal_behavior operation contract.0"))
            (branch "Post (concatenate)"
               (rule "assignment" (formula "15") (term "1,1") (userinteraction))
               (rule "blockEmpty" (formula "15") (term "1,1,1") (userinteraction))
               (rule "tryReturn" (formula "15") (term "1,1,1") (userinteraction))
               (rule "methodCallReturn" (formula "15") (term "1,1,1") (userinteraction))
               (rule "assignment" (formula "15") (term "1,1,1") (userinteraction))
               (rule "methodCallEmpty" (formula "15") (term "1,1,1,1") (userinteraction))
               (rule "tryEmpty" (formula "15") (term "1,1,1,1") (userinteraction))
               (rule "emptyModality" (formula "15") (term "1,1,1,1") (userinteraction))
               (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "13")))
               (rule "andRight" (formula "15") (userinteraction))
               (branch
                  (rule "andRight" (formula "15") (userinteraction))
                  (branch "Case 1"
                     (rule "impRight" (formula "15") (userinteraction))
                     (builtin "One Step Simplification" (formula "12"))
                     (builtin "One Step Simplification" (formula "10"))
                     (rule "orRight" (formula "15"))
                     (rule "andLeft" (formula "12"))
                     (rule "andLeft" (formula "10"))
                     (rule "andLeft" (formula "14"))
                     (rule "andLeft" (formula "11"))
                     (rule "andLeft" (formula "15"))
                     (rule "andLeft" (formula "17"))
                     (rule "andLeft" (formula "11"))
                     (rule "andLeft" (formula "13"))
                     (rule "andLeft" (formula "18"))
                     (rule "andLeft" (formula "13"))
                     (rule "andLeft" (formula "20"))
                     (rule "andLeft" (formula "14"))
                     (rule "notLeft" (formula "21"))
                     (rule "notLeft" (formula "21"))
                     (rule "andLeft" (formula "15"))
                     (rule "notLeft" (formula "15"))
                     (rule "notLeft" (formula "15"))
                     (rule "translateJavaAddInt" (formula "13") (term "0,0") (userinteraction))
                     (rule "translateJavaAddInt" (formula "14") (term "0,0") (userinteraction))
                     (rule "translateJavaAddInt" (formula "14") (term "0,2,1,0,1,1") (userinteraction))
                     (rule "translateJavaAddInt" (formula "14") (term "0,1,1,1,1,1") (userinteraction))
                     (rule "translateJavaAddInt" (formula "14") (term "1,1,1,1,1") (userinteraction))
                     (rule "polySimp_addLiterals" (formula "14") (term "1,1,1,1,1") (userinteraction))
                     (rule "translateJavaAddInt" (formula "28") (term "1,1,1,1") (userinteraction))
                     (rule "impLeft" (formula "14") (userinteraction))
                     (branch "Case 1"
                        (opengoal " ")
                     )
                     (branch "Case 2"
                        (rule "cut" (inst "cutFormula=  array2seq(heapAfter_concatenate, result_0)
= array2seq(heapAfter_concatenateMessageArray,
            result_0)") (userinteraction))
                        (branch "CUT: array2seq(heapAfter_concatenate, result_0) = array2seq(heapAfter_concatenateMessageArray, result_0) TRUE"
                           (rule "applyEq" (formula "20") (term "1,1") (ifseqformula "1") (userinteraction))
                           (rule "applyEq" (formula "20") (term "1,1") (ifseqformula "15") (userinteraction))
                           (rule "pullOut" (formula "20") (term "1,1") (inst "sk=mConcat_0") (userinteraction))
                           (rule "pullOut" (formula "30") (term "1,1") (inst "sk=array2seq_0") (userinteraction))
                           (rule "cut" (inst "cutFormula=array2seq_0 = mConcat_0") (userinteraction))
                           (branch "CUT: array2seq_0 = mConcat_0 TRUE"
                              (rule "applyEq" (formula "32") (term "1,1") (ifseqformula "1") (userinteraction))
                              (rule "cut" (inst "cutFormula=  byte[]::select(heap, messages, arr(i))
= byte[]::select(heapAfter_concatenate,
                 messages,
                 arr(i))") (userinteraction))
                              (branch
                                 (rule "applyEqReverse" (formula "33") (term "1,0,1") (ifseqformula "1") (userinteraction))
                                 (rule "close" (formula "33") (ifseqformula "24") (userinteraction))
                              )
                              (branch "CUT: messages[i] = messages[i]@heapAfter_concatenate FALSE"
                                 (builtin "One Step Simplification" (formula "6"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "28") (ifseqformula "13"))
                                 (rule "true_left" (formula "6"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "1") (ifseqformula "18"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "14") (term "1") (ifseqformula "12"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "0,1") (ifseqformula "12"))
                                 (rule "translateJavaAddInt" (formula "7") (term "0"))
                                 (rule "translateJavaSubInt" (formula "7") (term "0,0"))
                                 (rule "orRight" (formula "27"))
                                 (rule "eqSymm" (formula "33"))
                                 (rule "eqSymm" (formula "15") (term "0"))
                                 (rule "eqSymm" (formula "30"))
                                 (rule "eqSymm" (formula "16"))
                                 (rule "eqSymm" (formula "22"))
                                 (rule "eqSymm" (formula "23"))
                                 (rule "eqSymm" (formula "1"))
                                 (rule "eqSymm" (formula "3"))
                                 (rule "replace_known_right" (formula "6") (term "0") (ifseqformula "29"))
                                 (builtin "One Step Simplification" (formula "6"))
                                 (rule "replace_known_right" (formula "14") (term "0") (ifseqformula "24"))
                                 (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "25")))
                                 (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "26"))
                                 (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "27")) (ifInst ""  (formula "28")))
                                 (rule "polySimp_elimSub" (formula "7") (term "0,0"))
                                 (rule "polySimp_addComm0" (formula "21") (term "0,2,1,0,0"))
                                 (rule "polySimp_addComm0" (formula "21") (term "1,1,1,0"))
                                 (rule "polySimp_addComm0" (formula "2") (term "1,1,0"))
                                 (rule "polySimp_addComm0" (formula "15") (term "1,0"))
                                 (rule "polySimp_addComm0" (formula "16") (term "0,2,1,0,0"))
                                 (rule "polySimp_addComm0" (formula "16") (term "1,1,1,0"))
                                 (rule "polySimp_addComm1" (formula "7") (term "0"))
                                 (rule "polySimp_addComm0" (formula "7") (term "0,0"))
                                 (rule "polySimp_addComm1" (formula "7") (term "0"))
                                 (rule "inEqSimp_leqRight" (formula "31"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                 (rule "inEqSimp_ltRight" (formula "32"))
                                 (rule "times_zero_1" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "inEqSimp_ltToLeq" (formula "6"))
                                 (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "6") (term "0"))
                                 (rule "inEqSimp_commuteLeq" (formula "10"))
                                 (rule "inEqSimp_commuteLeq" (formula "10"))
                                 (rule "applyEq" (formula "23") (term "1,0") (ifseqformula "3"))
                                 (rule "applyEqRigid" (formula "22") (term "1") (ifseqformula "3"))
                                 (rule "applyEq" (formula "32") (term "1,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "17") (term "1") (ifseqformula "5"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                 (rule "polySimp_rightDist" (formula "2") (term "1"))
                                 (rule "mul_literals" (formula "2") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                 (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "6"))
                                 (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                                 (rule "polySimp_elimOne" (formula "6") (term "0"))
                                 (rule "inEqSimp_contradEq7" (formula "30") (ifseqformula "2"))
                                 (rule "polySimp_mulComm0" (formula "30") (term "1,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "30") (term "0,0"))
                                 (rule "add_literals" (formula "30") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "30") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "30") (term "0,0"))
                                 (rule "leq_literals" (formula "30") (term "0"))
                                 (builtin "One Step Simplification" (formula "30"))
                                 (rule "false_right" (formula "30"))
                                 (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "2"))
                                 (rule "inEqSimp_homoInEq0" (formula "9") (term "0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0"))
                                 (rule "add_literals" (formula "9") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "9") (term "1,0,0"))
                                 (rule "add_literals" (formula "9") (term "0,0"))
                                 (rule "qeq_literals" (formula "9") (term "0"))
                                 (builtin "One Step Simplification" (formula "9"))
                                 (rule "true_left" (formula "9"))
                                 (rule "nonNull" (formula "9") (inst "i=i_1"))
                                 (rule "sub_literals" (formula "9") (term "2,1,0,1,1"))
                                 (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "28")))
                                 (rule "greater_literals" (formula "9") (term "0"))
                                 (builtin "One Step Simplification" (formula "9"))
                                 (rule "narrowSelectArrayType" (formula "9") (term "0,0,1,0") (ifseqformula "6") (ifseqformula "28"))
                                 (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
                                 (rule "array2seqDef" (formula "29") (term "0,0") (inst "u=u"))
                                 (rule "array2seqDef" (formula "29") (term "1") (inst "u=u"))
                                 (rule "array2seqDef" (formula "21") (term "1") (inst "u=u"))
                                 (rule "eqSymm" (formula "21"))
                                 (rule "array2seqDef" (formula "5") (term "1") (inst "u=u"))
                                 (rule "eqSymm" (formula "5"))
                                 (rule "array2seqDef" (formula "20") (term "0,0") (inst "u=u"))
                                 (rule "array2seqDef" (formula "20") (term "1,0") (inst "u=u"))
                                 (rule "array2seqDef" (formula "4") (term "0") (inst "u=u"))
                                 (rule "array2seqDef" (formula "15") (term "0,0") (inst "u=u"))
                                 (rule "array2seqDef" (formula "15") (term "1,0") (inst "u=u"))
                                 (rule "array2seqDef" (formula "15") (term "1") (inst "u=u"))
                                 (rule "eqSeqDef" (formula "29") (inst "iv=iv"))
                                 (rule "lenOfSeqDef" (formula "29") (term "1,0"))
                                 (rule "polySimp_elimSub" (formula "29") (term "1,1,0"))
                                 (rule "mul_literals" (formula "29") (term "1,1,1,0"))
                                 (rule "add_zero_right" (formula "29") (term "1,1,0"))
                                 (rule "getOfSeqDef" (formula "29") (term "1,1,0,1"))
                                 (rule "castDel" (formula "29") (term "1,1,1,0,1"))
                                 (rule "castDel" (formula "29") (term "2,1,1,0,1"))
                                 (rule "add_zero_right" (formula "29") (term "0,2,1,1,1,0,1"))
                                 (rule "polySimp_elimSub" (formula "29") (term "1,1,0,1,1,0,1"))
                                 (rule "mul_literals" (formula "29") (term "1,1,1,0,1,1,0,1"))
                                 (rule "add_zero_right" (formula "29") (term "1,1,0,1,1,0,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "29") (term "1,0,0,1"))
                                 (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,0,1"))
                                 (rule "polySimp_addComm1" (formula "29") (term "0,1,0,0,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "29") (term "0,1,0"))
                                 (rule "add_zero_right" (formula "29") (term "0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "29") (term "1,0,1,1,0,1"))
                                 (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,1,1,0,1"))
                                 (rule "inEqSimp_commuteLeq" (formula "29") (term "0,0,0,1"))
                                 (rule "inEqSimp_commuteLeq" (formula "29") (term "0,0,1,1,0,1"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "29") (term "1,0,0,1"))
                                 (rule "polySimp_mulLiterals" (formula "29") (term "0,1,0,0,1"))
                                 (rule "polySimp_elimOne" (formula "29") (term "0,1,0,0,1"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "29") (term "0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "29") (term "0,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "29") (term "0,0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,1,1,0,1"))
                                 (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,1,1,0,1"))
                                 (rule "polySimp_rightDist" (formula "29") (term "1,1,0,1,1,0,1"))
                                 (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,1,1,0,1"))
                                 (rule "mul_literals" (formula "29") (term "0,1,1,0,1,1,0,1"))
                                 (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,1,1,0,1"))
                                 (rule "array2seqDef" (formula "21") (term "0,1") (inst "u=u"))
                                 (rule "eqSymm" (formula "21"))
                                 (rule "array2seqDef" (formula "5") (term "1") (inst "u=u"))
                                 (rule "eqSymm" (formula "5"))
                                 (rule "eqSeqDef" (formula "15") (inst "iv=iv"))
                                 (rule "andLeft" (formula "15"))
                                 (rule "getOfSeqDef" (formula "16") (term "1,1,0"))
                                 (rule "castDel" (formula "16") (term "1,1,1,0"))
                                 (rule "castDel" (formula "16") (term "2,1,1,0"))
                                 (rule "add_zero_right" (formula "16") (term "0,2,1,1,1,0"))
                                 (rule "polySimp_elimSub" (formula "16") (term "1,1,0,1,1,0"))
                                 (rule "times_zero_2" (formula "16") (term "1,1,1,0,1,1,0"))
                                 (rule "add_zero_right" (formula "16") (term "1,1,0,1,1,0"))
                                 (rule "lenOfSeqDef" (formula "15") (term "1"))
                                 (rule "polySimp_elimSub" (formula "15") (term "1,1"))
                                 (rule "times_zero_2" (formula "15") (term "1,1,1"))
                                 (rule "add_zero_right" (formula "15") (term "1,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
                                 (rule "polySimp_addComm1" (formula "16") (term "0,1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,1,1,0"))
                                 (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,1,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "15") (term "0,1"))
                                 (rule "add_zero_right" (formula "15") (term "0,0,1"))
                                 (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1"))
                                 (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,1,1,0"))
                                 (rule "apply_eq_monomials" (formula "16") (term "1,0,1,0,0") (ifseqformula "15"))
                                 (rule "polySimp_rightDist" (formula "16") (term "0,1,0,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "16") (term "1,0,1,0,1,0,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "16") (term "1,0,1,0,0"))
                                 (rule "add_literals" (formula "16") (term "1,1,1,0,1,0,0"))
                                 (rule "times_zero_1" (formula "16") (term "1,1,0,1,0,0"))
                                 (rule "add_zero_right" (formula "16") (term "1,0,1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "16") (term "1,0,1,0,0"))
                                 (rule "polySimp_addComm1" (formula "16") (term "0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,1,1,0"))
                                 (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "16") (term "1,1,0,1,1,0"))
                                 (rule "mul_literals" (formula "16") (term "0,1,1,0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,1,1,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "15") (term "0,0,1"))
                                 (rule "polySimp_elimOne" (formula "15") (term "0,0,1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "16") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "0,1,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "16") (term "0,0,1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "16") (term "0,0,1,1,1,0,0"))
                                 (rule "pullOutSelect" (formula "23") (term "0") (inst "selectSK=arr_69"))
                                 (rule "applyEq" (formula "31") (term "0,1,0,0,0,1,0,1") (ifseqformula "1"))
                                 (rule "applyEq" (formula "31") (term "0,1,0,0,0,1,0,0,1") (ifseqformula "1"))
                                 (rule "applyEq" (formula "31") (term "1,2,0,0,0,1,0,1") (ifseqformula "1"))
                                 (rule "applyEq" (formula "31") (term "0,1,0,0,0,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "31") (term "1,2,0,0,0,1,0,0,1") (ifseqformula "1"))
                                 (rule "applyEq" (formula "31") (term "1,2,0,0,0,0") (ifseqformula "1"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "19"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "30")))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "12"))
                                 (rule "eqSymm" (formula "24"))
                                 (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "8"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "12"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "30")) (ifInst ""  (formula "8")) (ifInst ""  (formula "24")))
                                 (rule "closeFalse" (formula "1"))
                              )
                           )
                           (branch "CUT: array2seq_0 = mConcat_0 FALSE"
                              (rule "applyEqReverse" (formula "23") (term "0") (ifseqformula "1") (userinteraction))
                              (rule "applyEqReverse" (formula "23") (term "1") (ifseqformula "21") (userinteraction))
                              (rule "hide_right" (formula "32") (userinteraction))
                              (rule "hide_left" (formula "21") (userinteraction))
                              (rule "hide_left" (formula "16") (userinteraction))
                              (opengoal " ")
                           )
                        )
                        (branch "CUT: array2seq(heapAfter_concatenate, result_0) = array2seq(heapAfter_concatenateMessageArray, result_0) FALSE"
                           (builtin "One Step Simplification" (formula "3"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "24") (ifseqformula "10"))
                           (rule "true_left" (formula "3"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "11") (term "1") (ifseqformula "9"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "17") (term "1") (ifseqformula "15"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "17") (term "0,1") (ifseqformula "9"))
                           (rule "translateJavaAddInt" (formula "4") (term "0"))
                           (rule "translateJavaSubInt" (formula "4") (term "0,0"))
                           (rule "orRight" (formula "23"))
                           (rule "eqSymm" (formula "26"))
                           (rule "eqSymm" (formula "13"))
                           (rule "eqSymm" (formula "19"))
                           (rule "eqSymm" (formula "29"))
                           (rule "eqSymm" (formula "12") (term "0"))
                           (rule "eqSymm" (formula "18"))
                           (rule "replace_known_right" (formula "3") (term "0") (ifseqformula "25"))
                           (builtin "One Step Simplification" (formula "3"))
                           (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "20"))
                           (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "21")))
                           (rule "replace_known_right" (formula "17") (term "0") (ifseqformula "22"))
                           (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "23")) (ifInst ""  (formula "24")))
                           (rule "polySimp_elimSub" (formula "4") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "13") (term "0,2,1,0,0"))
                           (rule "polySimp_addComm0" (formula "13") (term "1,1,1,0"))
                           (rule "polySimp_addComm0" (formula "29") (term "1,1,1,0"))
                           (rule "polySimp_addComm0" (formula "12") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "4") (term "0"))
                           (rule "polySimp_addComm0" (formula "4") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "4") (term "0"))
                           (rule "inEqSimp_leqRight" (formula "27"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "inEqSimp_ltRight" (formula "28"))
                           (rule "mul_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_ltToLeq" (formula "3"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "3") (term "0"))
                           (rule "inEqSimp_commuteLeq" (formula "7"))
                           (rule "inEqSimp_commuteLeq" (formula "7"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1"))
                           (rule "polySimp_rightDist" (formula "2") (term "1"))
                           (rule "mul_literals" (formula "2") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                           (rule "polySimp_elimOne" (formula "3") (term "0"))
                           (rule "inEqSimp_contradEq7" (formula "26") (ifseqformula "2"))
                           (rule "polySimp_mulComm0" (formula "26") (term "1,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0"))
                           (rule "add_literals" (formula "26") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "26") (term "1,0,0"))
                           (rule "add_zero_right" (formula "26") (term "0,0"))
                           (rule "leq_literals" (formula "26") (term "0"))
                           (builtin "One Step Simplification" (formula "26"))
                           (rule "false_right" (formula "26"))
                           (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "2"))
                           (rule "inEqSimp_homoInEq0" (formula "6") (term "0"))
                           (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0"))
                           (rule "add_literals" (formula "6") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "6") (term "1,0,0"))
                           (rule "add_zero_right" (formula "6") (term "0,0"))
                           (rule "qeq_literals" (formula "6") (term "0"))
                           (builtin "One Step Simplification" (formula "6"))
                           (rule "true_left" (formula "6"))
                           (rule "nonNull" (formula "6") (inst "i=i_1"))
                           (rule "greater_literals" (formula "6") (term "0,1"))
                           (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "24")))
                           (rule "sub_literals" (formula "6") (term "2,1,0"))
                           (builtin "One Step Simplification" (formula "6"))
                           (rule "narrowSelectArrayType" (formula "6") (term "0,0,1,0") (ifseqformula "3") (ifseqformula "24"))
                           (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "6") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "6") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0"))
                           (rule "array2seqDef" (formula "12") (term "1") (inst "u=u"))
                           (rule "eqSymm" (formula "12"))
                           (rule "equalityToSeqGetAndSeqLenRight" (formula "18") (inst "iv=iv"))
                           (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0,1"))
                           (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0,1"))
                           (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0,1"))
                           (rule "mul_literals" (formula "18") (term "0,1,1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0,1"))
                           (rule "array2seqDef" (formula "25") (term "0,0") (inst "u=u"))
                           (rule "array2seqDef" (formula "25") (term "1") (inst "u=u"))
                           (rule "array2seqDef" (formula "17") (term "0,0") (inst "u=u"))
                           (rule "array2seqDef" (formula "17") (term "1,0") (inst "u=u"))
                           (rule "array2seqDef" (formula "17") (term "1") (inst "u=u"))
                           (rule "array2seqDef" (formula "25") (term "1,0") (inst "u=u"))
                           (rule "array2seqDef" (formula "12") (term "0,1") (inst "u=u"))
                           (rule "eqSymm" (formula "12"))
                           (rule "array2seqDef" (formula "18") (term "0,0,0") (inst "u=u"))
                           (rule "lenOfSeqDef" (formula "18") (term "0,0"))
                           (rule "polySimp_elimSub" (formula "18") (term "1,0,0"))
                           (rule "mul_literals" (formula "18") (term "1,1,0,0"))
                           (rule "add_zero_right" (formula "18") (term "1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,0"))
                           (rule "add_zero_right" (formula "18") (term "0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "18") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "18") (term "0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "18") (term "0,0,0,0"))
                           (rule "array2seqDef" (formula "18") (term "0,1,1,0,1") (inst "u=u"))
                           (rule "eqSymm" (formula "18") (term "1,0,1"))
                           (rule "getOfSeqDef" (formula "18") (term "0,1,0,1"))
                           (rule "castDel" (formula "18") (term "2,0,1,0,1"))
                           (rule "castDel" (formula "18") (term "1,0,1,0,1"))
                           (rule "add_zero_right" (formula "18") (term "0,2,1,0,1,0,1"))
                           (rule "polySimp_elimSub" (formula "18") (term "1,1,0,0,1,0,1"))
                           (rule "mul_literals" (formula "18") (term "1,1,1,0,0,1,0,1"))
                           (rule "add_zero_right" (formula "18") (term "1,1,0,0,1,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0,1,0,1"))
                           (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0,1,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0,1,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0,1,0,1"))
                           (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0,1,0,1"))
                           (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0,1,0,1"))
                           (rule "mul_literals" (formula "18") (term "0,1,1,0,0,1,0,1"))
                           (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0,1,0,1"))
                           (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0,1,0,1"))
                           (rule "array2seqDef" (formula "18") (term "0,1,0") (inst "u=u"))
                           (rule "eqSymm" (formula "18") (term "0"))
                           (rule "lenOfSeqDef" (formula "18") (term "0,0"))
                           (rule "polySimp_elimSub" (formula "18") (term "1,0,0"))
                           (rule "times_zero_2" (formula "18") (term "1,1,0,0"))
                           (rule "add_zero_right" (formula "18") (term "1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,0"))
                           (rule "add_zero_right" (formula "18") (term "0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "18") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "18") (term "0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "18") (term "0,0,0,0"))
                           (builtin "One Step Simplification" (formula "18"))
                           (rule "allRight" (formula "18") (inst "sk=iv_0"))
                           (rule "impRight" (formula "18"))
                           (rule "andLeft" (formula "1"))
                           (rule "replace_known_left" (formula "20") (term "0,0,0") (ifseqformula "1"))
                           (builtin "One Step Simplification" (formula "20"))
                           (rule "inEqSimp_homoInEq0" (formula "2"))
                           (rule "polySimp_addComm1" (formula "2") (term "0"))
                           (rule "inEqSimp_homoInEq0" (formula "20") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "20") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1"))
                           (rule "polySimp_rightDist" (formula "2") (term "1"))
                           (rule "mul_literals" (formula "2") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "0,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "20") (term "0,1,0,0"))
                           (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0"))
                           (rule "eqSeqDef" (formula "19") (inst "iv=iv"))
                           (rule "andLeft" (formula "19"))
                           (rule "lenOfSeqDef" (formula "19") (term "1"))
                           (rule "polySimp_elimSub" (formula "19") (term "1,1"))
                           (rule "mul_literals" (formula "19") (term "1,1,1"))
                           (rule "add_zero_right" (formula "19") (term "1,1"))
                           (rule "getOfSeqDef" (formula "20") (term "1,1,0"))
                           (rule "castDel" (formula "20") (term "1,1,1,0"))
                           (rule "castDel" (formula "20") (term "2,1,1,0"))
                           (rule "add_zero_right" (formula "20") (term "0,2,1,1,1,0"))
                           (rule "polySimp_elimSub" (formula "20") (term "1,1,0,1,1,0"))
                           (rule "times_zero_2" (formula "20") (term "1,1,1,0,1,1,0"))
                           (rule "add_zero_right" (formula "20") (term "1,1,0,1,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
                           (rule "polySimp_addComm1" (formula "20") (term "0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "19") (term "0,1"))
                           (rule "add_zero_right" (formula "19") (term "0,0,1"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,1,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,1,1,0"))
                           (rule "apply_eq_monomials" (formula "20") (term "1,0,1,0,0") (ifseqformula "19"))
                           (rule "polySimp_rightDist" (formula "20") (term "0,1,0,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "20") (term "1,0,1,0,1,0,0"))
                           (rule "polySimp_elimOne" (formula "20") (term "1,0,1,0,1,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "20") (term "1,0,1,0,0"))
                           (rule "add_literals" (formula "20") (term "1,1,1,0,1,0,0"))
                           (rule "times_zero_1" (formula "20") (term "1,1,0,1,0,0"))
                           (rule "add_zero_right" (formula "20") (term "1,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0,1,0,0"))
                           (rule "polySimp_addComm1" (formula "20") (term "0,1,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "19") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "19") (term "0,0,1"))
                           (rule "polySimp_elimOne" (formula "19") (term "0,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,1,1,0"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,1,0,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,1,1,0"))
                           (rule "mul_literals" (formula "20") (term "0,1,1,0,1,1,0"))
                           (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,1,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "20") (term "0,1,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "20") (term "0,0,1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "20") (term "0,0,1,1,1,0,0"))
                           (rule "eqSeqDef" (formula "28") (inst "iv=iv"))
                           (rule "lenOfSeqDef" (formula "28") (term "1,0"))
                           (rule "polySimp_elimSub" (formula "28") (term "1,1,0"))
                           (rule "times_zero_2" (formula "28") (term "1,1,1,0"))
                           (rule "add_zero_right" (formula "28") (term "1,1,0"))
                           (rule "getOfSeqDef" (formula "28") (term "1,1,0,1"))
                           (rule "castDel" (formula "28") (term "1,1,1,0,1"))
                           (rule "castDel" (formula "28") (term "2,1,1,0,1"))
                           (rule "add_zero_right" (formula "28") (term "0,2,1,1,1,0,1"))
                           (rule "polySimp_elimSub" (formula "28") (term "1,1,0,1,1,0,1"))
                           (rule "times_zero_2" (formula "28") (term "1,1,1,0,1,1,0,1"))
                           (rule "add_zero_right" (formula "28") (term "1,1,0,1,1,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "28") (term "1,0,0,1"))
                           (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,0,1"))
                           (rule "polySimp_addComm1" (formula "28") (term "0,1,0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "28") (term "0,1,0"))
                           (rule "add_zero_right" (formula "28") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "28") (term "1,0,1,1,0,1"))
                           (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,1,1,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "28") (term "0,0,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "28") (term "0,0,1,1,0,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "28") (term "1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "0,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "28") (term "0,1,0,0,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "28") (term "0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "28") (term "0,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,1,1,0,1"))
                           (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,1,1,0,1"))
                           (rule "polySimp_rightDist" (formula "28") (term "1,1,0,1,1,0,1"))
                           (rule "mul_literals" (formula "28") (term "0,1,1,0,1,1,0,1"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,1,1,0,1"))
                           (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,1,1,0,1"))
                           (rule "eqSeqDef" (formula "14") (inst "iv=iv"))
                           (rule "andLeft" (formula "14"))
                           (rule "getOfSeqDef" (formula "15") (term "1,1,0"))
                           (rule "castDel" (formula "15") (term "1,1,1,0"))
                           (rule "castDel" (formula "15") (term "2,1,1,0"))
                           (rule "add_zero_right" (formula "15") (term "0,2,1,1,1,0"))
                           (rule "polySimp_elimSub" (formula "15") (term "1,1,0,1,1,0"))
                           (rule "times_zero_2" (formula "15") (term "1,1,1,0,1,1,0"))
                           (rule "add_zero_right" (formula "15") (term "1,1,0,1,1,0"))
                           (rule "lenOfSeqDef" (formula "14") (term "1"))
                           (rule "polySimp_elimSub" (formula "14") (term "1,1"))
                           (rule "times_zero_2" (formula "14") (term "1,1,1"))
                           (rule "add_zero_right" (formula "14") (term "1,1"))
                           (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
                           (rule "polySimp_addComm1" (formula "15") (term "0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,1,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "14") (term "0,1"))
                           (rule "add_zero_right" (formula "14") (term "0,0,1"))
                           (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,1,1,0"))
                           (rule "apply_eq_monomials" (formula "15") (term "1,0,1,0,0") (ifseqformula "14"))
                           (rule "polySimp_rightDist" (formula "15") (term "0,1,0,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "15") (term "1,0,1,0,1,0,0"))
                           (rule "polySimp_elimOne" (formula "15") (term "1,0,1,0,1,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "15") (term "1,0,1,0,0"))
                           (rule "add_literals" (formula "15") (term "1,1,1,0,1,0,0"))
                           (rule "times_zero_1" (formula "15") (term "1,1,0,1,0,0"))
                           (rule "add_zero_right" (formula "15") (term "1,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1,0,1,0,0"))
                           (rule "polySimp_addComm1" (formula "15") (term "0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,1,1,0"))
                           (rule "polySimp_rightDist" (formula "15") (term "1,1,0,1,1,0"))
                           (rule "mul_literals" (formula "15") (term "0,1,1,0,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,1,1,0"))
                           (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,1,1,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "14") (term "0,0,1"))
                           (rule "polySimp_elimOne" (formula "14") (term "0,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0,1,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "15") (term "0,0,1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "15") (term "0,0,1,1,1,0,0"))
                           (rule "array2seqDef" (formula "22") (term "0,1") (inst "u=u"))
                           (rule "eqSymm" (formula "22"))
                           (rule "getOfSeqDef" (formula "22") (term "0"))
                           (rule "castDel" (formula "22") (term "2,0"))
                           (rule "castDel" (formula "22") (term "1,0"))
                           (rule "add_zero_right" (formula "22") (term "0,2,1,0"))
                           (rule "polySimp_elimSub" (formula "22") (term "1,1,0,0"))
                           (rule "times_zero_2" (formula "22") (term "1,1,1,0,0"))
                           (rule "add_zero_right" (formula "22") (term "1,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0"))
                           (rule "polySimp_addComm1" (formula "22") (term "0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
                           (rule "replace_known_left" (formula "22") (term "0,0,0") (ifseqformula "1"))
                           (builtin "One Step Simplification" (formula "22"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "22") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "22") (term "0,0,0"))
                           (rule "polySimp_elimOne" (formula "22") (term "0,0,0"))
                           (rule "array2seqDef" (formula "2") (term "0,0") (inst "u=u"))
                           (rule "lenOfSeqDef" (formula "2") (term "0"))
                           (rule "polySimp_elimSub" (formula "2") (term "1,0"))
                           (rule "mul_literals" (formula "2") (term "1,1,0"))
                           (rule "add_zero_right" (formula "2") (term "1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "2") (term "0,0"))
                           (rule "add_zero_right" (formula "2") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0"))
                           (rule "polySimp_elimOne" (formula "2") (term "0,0,0"))
                           (rule "array2seqDef" (formula "14") (term "1,0,0") (inst "u=u"))
                           (rule "array2seqDef" (formula "15") (term "1,0,0,1,0") (inst "u=u"))
                           (rule "pullOutSelect" (formula "29") (term "0,1,0,0,0,0") (inst "selectSK=arr_2"))
                           (rule "applyEq" (formula "30") (term "1,2,0,0,0,1,0,0,1") (ifseqformula "1"))
                           (rule "applyEq" (formula "30") (term "0,1,0,0,0,1,0,1") (ifseqformula "1"))
                           (rule "applyEq" (formula "30") (term "1,2,0,0,0,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "30") (term "0,1,0,0,0,1,0,0,1") (ifseqformula "1"))
                           (rule "applyEq" (formula "30") (term "1,2,0,0,0,1,0,1") (ifseqformula "1"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "18"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "29")))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "11"))
                           (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "7"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "11"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "29")) (ifInst ""  (formula "7")))
                           (rule "applyEqReverse" (formula "30") (term "0,1,0,0,0,1,0,1") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "30") (term "1,2,0,0,0,1,0,0,1") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "30") (term "0,1,0,0,0,0") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "30") (term "1,2,0,0,0,1,0,1") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "30") (term "0,1,0,0,0,1,0,0,1") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "30") (term "1,2,0,0,0,0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "pullOutSelect" (formula "15") (term "1,2,0,0,0,1,0") (inst "selectSK=arr_3"))
                           (rule "applyEq" (formula "16") (term "0,1,0,0,0,1,0") (ifseqformula "15"))
                           (rule "applyEq" (formula "14") (term "1,2,0,0,0") (ifseqformula "15"))
                           (rule "applyEq" (formula "14") (term "0,1,0,0,0") (ifseqformula "15"))
                           (rule "simplifySelectOfAnonEQ" (formula "15") (ifseqformula "10"))
                           (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "29")) (ifInst ""  (formula "6")))
                           (rule "applyEqReverse" (formula "16") (term "1,2,0,0,0,1,0") (ifseqformula "15"))
                           (rule "applyEqReverse" (formula "16") (term "0,1,0,0,0,1,0") (ifseqformula "15"))
                           (rule "applyEqReverse" (formula "14") (term "1,2,0,0,0") (ifseqformula "15"))
                           (rule "applyEqReverse" (formula "14") (term "0,1,0,0,0") (ifseqformula "15"))
                           (rule "hideAuxiliaryEq" (formula "15"))
                           (rule "pullOutSelect" (formula "22") (term "1,0") (inst "selectSK=arr_4"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "11"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "24")) (ifInst ""  (formula "25")))
                           (rule "applyEqReverse" (formula "23") (term "1,0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "eqSymm" (formula "22"))
                           (rule "narrowSelectArrayType" (formula "22") (term "1,1") (ifseqformula "9") (ifseqformula "23"))
                           (rule "pullOutSelect" (formula "22") (term "1,0") (inst "selectSK=arr_5"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "18"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "24")))
                           (rule "replaceKnownSelect_taclet110000010_5" (formula "1") (term "2,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet110000010_6" (formula "1") (term "2,0"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "11"))
                           (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "25"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "13")))
                           (rule "applyEqReverse" (formula "23") (term "1,0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "narrowSelectArrayType" (formula "22") (term "1,0") (ifseqformula "9") (ifseqformula "23"))
                           (builtin "One Step Simplification" (formula "22"))
                           (rule "closeTrue" (formula "22"))
                        )
                     )
                  )
                  (branch "Case 2"
                     (builtin "One Step Simplification" (formula "11"))
                     (builtin "One Step Simplification" (formula "9"))
                     (builtin "One Step Simplification" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "translateJavaAddInt" (formula "3") (term "0"))
                     (rule "translateJavaAddInt" (formula "8") (term "0,0,0,1,0,1,1"))
                     (rule "translateJavaAddInt" (formula "8") (term "0,0,0,0,1,1"))
                     (rule "translateJavaAddInt" (formula "8") (term "0,2,1,0,1,1,0,1,0,1,1"))
                     (rule "translateJavaAddInt" (formula "8") (term "1,1,1,1,1,0,1,0,1,1"))
                     (rule "translateJavaSubInt" (formula "3") (term "0,0"))
                     (rule "translateJavaAddInt" (formula "8") (term "0,1,1,1,1,1,0,1,0,1,1"))
                     (rule "polySimp_addLiterals" (formula "8") (term "1,1,1,1,1,0,1,0,1,1"))
                     (rule "orRight" (formula "13"))
                     (rule "andLeft" (formula "10"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "11") (term "1,1,0") (ifseqformula "10"))
                     (rule "andLeft" (formula "8"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "9") (term "1,1,0") (ifseqformula "8"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "12") (term "0,1,1,0") (ifseqformula "8"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "12") (term "0,0,1,0,1") (ifseqformula "8"))
                     (rule "andLeft" (formula "9"))
                     (rule "andLeft" (formula "13"))
                     (rule "andLeft" (formula "9"))
                     (rule "andLeft" (formula "11"))
                     (rule "andLeft" (formula "14"))
                     (rule "andLeft" (formula "16"))
                     (rule "andLeft" (formula "11"))
                     (rule "andLeft" (formula "17"))
                     (rule "andLeft" (formula "12"))
                     (rule "andLeft" (formula "19"))
                     (rule "andLeft" (formula "13"))
                     (rule "notLeft" (formula "21"))
                     (rule "notLeft" (formula "20"))
                     (rule "notLeft" (formula "14"))
                     (rule "notLeft" (formula "13"))
                     (rule "orRight" (formula "20"))
                     (rule "eqSymm" (formula "24"))
                     (rule "eqSymm" (formula "11") (term "0"))
                     (rule "eqSymm" (formula "17"))
                     (rule "eqSymm" (formula "12") (term "1"))
                     (rule "replace_known_right" (formula "27") (term "0,0") (ifseqformula "20"))
                     (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "22")))
                     (rule "closeTrue" (formula "27"))
                  )
               )
               (branch "Case 2"
                  (builtin "One Step Simplification" (formula "11"))
                  (builtin "One Step Simplification" (formula "9"))
                  (builtin "One Step Simplification" (formula "2"))
                  (rule "true_left" (formula "2"))
                  (rule "translateJavaAddInt" (formula "3") (term "0"))
                  (rule "translateJavaAddInt" (formula "8") (term "1,1,1,1,1,0,1,0,1,1"))
                  (rule "translateJavaAddInt" (formula "8") (term "0,0,0,0,1,1"))
                  (rule "translateJavaAddInt" (formula "8") (term "0,0,0,1,0,1,1"))
                  (rule "translateJavaAddInt" (formula "8") (term "0,2,1,0,1,1,0,1,0,1,1"))
                  (rule "translateJavaSubInt" (formula "3") (term "0,0"))
                  (rule "translateJavaAddInt" (formula "8") (term "0,1,1,1,1,1,0,1,0,1,1"))
                  (rule "polySimp_addLiterals" (formula "8") (term "1,1,1,1,1,0,1,0,1,1"))
                  (rule "orRight" (formula "13"))
                  (rule "andLeft" (formula "10"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "11") (term "1,1,0") (ifseqformula "10"))
                  (rule "andLeft" (formula "8"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "9") (term "1,1,0") (ifseqformula "8"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "12") (term "0,1,1,0") (ifseqformula "8"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "12") (term "0,0,1,0,1") (ifseqformula "8"))
                  (rule "andLeft" (formula "9"))
                  (rule "andLeft" (formula "13"))
                  (rule "andLeft" (formula "10"))
                  (rule "andLeft" (formula "9"))
                  (rule "andLeft" (formula "15"))
                  (rule "andLeft" (formula "14"))
                  (rule "andLeft" (formula "10"))
                  (rule "andLeft" (formula "16"))
                  (rule "andLeft" (formula "11"))
                  (rule "andLeft" (formula "18"))
                  (rule "andLeft" (formula "12"))
                  (rule "notLeft" (formula "20"))
                  (rule "notLeft" (formula "19"))
                  (rule "notLeft" (formula "13"))
                  (rule "notLeft" (formula "12"))
                  (rule "orRight" (formula "20"))
                  (rule "allRight" (formula "27") (inst "sk=f_1"))
                  (rule "allRight" (formula "27") (inst "sk=o_1"))
                  (rule "orRight" (formula "27"))
                  (rule "eqSymm" (formula "24"))
                  (rule "eqSymm" (formula "10") (term "0"))
                  (rule "eqSymm" (formula "16"))
                  (rule "eqSymm" (formula "11") (term "1"))
                  (rule "replace_known_right" (formula "2") (term "0") (ifseqformula "23"))
                  (builtin "One Step Simplification" (formula "2"))
                  (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "19"))
                  (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "18")))
                  (rule "replace_known_right" (formula "15") (term "0") (ifseqformula "22"))
                  (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "20")) (ifInst ""  (formula "21")))
                  (rule "polySimp_elimSub" (formula "3") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "11") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "10") (term "1,0"))
                  (rule "polySimp_addComm0" (formula "11") (term "1,1,1,0,1"))
                  (rule "polySimp_addComm0" (formula "11") (term "0,2,1,0,0,1"))
                  (rule "polySimp_addComm0" (formula "3") (term "0,0"))
                  (rule "polySimp_addComm1" (formula "3") (term "0"))
                  (rule "polySimp_addComm0" (formula "3") (term "0,0"))
                  (rule "inEqSimp_leqRight" (formula "25"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "inEqSimp_ltRight" (formula "26"))
                  (rule "times_zero_1" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "inEqSimp_commuteLeq" (formula "7"))
                  (rule "inEqSimp_commuteLeq" (formula "6"))
                  (rule "inEqSimp_ltToLeq" (formula "12") (term "0"))
                  (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0"))
                  (rule "polySimp_addComm1" (formula "12") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "12") (term "0,0,0"))
                  (rule "add_literals" (formula "12") (term "0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1"))
                  (rule "polySimp_rightDist" (formula "2") (term "1"))
                  (rule "mul_literals" (formula "2") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "0,0"))
                  (rule "polySimp_elimOne" (formula "12") (term "0,0"))
                  (rule "inEqSimp_contradEq7" (formula "25") (ifseqformula "2"))
                  (rule "polySimp_mulComm0" (formula "25") (term "1,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0"))
                  (rule "add_literals" (formula "25") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "25") (term "1,0,0"))
                  (rule "add_zero_right" (formula "25") (term "0,0"))
                  (rule "leq_literals" (formula "25") (term "0"))
                  (builtin "One Step Simplification" (formula "25"))
                  (rule "false_right" (formula "25"))
                  (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "2"))
                  (rule "inEqSimp_homoInEq0" (formula "6") (term "0"))
                  (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0"))
                  (rule "add_literals" (formula "6") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "6") (term "1,0,0"))
                  (rule "add_zero_right" (formula "6") (term "0,0"))
                  (rule "qeq_literals" (formula "6") (term "0"))
                  (builtin "One Step Simplification" (formula "6"))
                  (rule "true_left" (formula "6"))
                  (rule "nonNull" (formula "6") (inst "i=i_1"))
                  (rule "greater_literals" (formula "6") (term "0,1"))
                  (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "23")))
                  (rule "sub_literals" (formula "6") (term "2,1,0"))
                  (builtin "One Step Simplification" (formula "6"))
                  (rule "narrowSelectArrayType" (formula "6") (term "0,0,1,0") (ifseqformula "3") (ifseqformula "23"))
                  (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "6") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "6") (term "0,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0"))
                  (rule "array2seqDef" (formula "16") (term "1") (inst "u=u"))
                  (rule "eqSymm" (formula "16"))
                  (rule "array2seqDef" (formula "11") (term "1,1") (inst "u=u"))
                  (rule "eqSymm" (formula "11") (term "1"))
                  (rule "array2seqDef" (formula "16") (term "1,1") (inst "u=u"))
                  (rule "array2seqDef" (formula "16") (term "0,1") (inst "u=u"))
                  (rule "eqSymm" (formula "16"))
                  (rule "array2seqDef" (formula "11") (term "1,1,1") (inst "u=u"))
                  (rule "eqSymm" (formula "11") (term "1"))
                  (rule "eqSeqDef" (formula "16") (inst "iv=iv"))
                  (rule "andLeft" (formula "16"))
                  (rule "getOfSeqDef" (formula "17") (term "1,1,0"))
                  (rule "castDel" (formula "17") (term "2,1,1,0"))
                  (rule "castDel" (formula "17") (term "1,1,1,0"))
                  (rule "add_zero_right" (formula "17") (term "0,2,1,1,1,0"))
                  (rule "polySimp_elimSub" (formula "17") (term "1,1,0,1,1,0"))
                  (rule "mul_literals" (formula "17") (term "1,1,1,0,1,1,0"))
                  (rule "add_zero_right" (formula "17") (term "1,1,0,1,1,0"))
                  (rule "lenOfSeqDef" (formula "16") (term "1"))
                  (rule "polySimp_elimSub" (formula "16") (term "1,1"))
                  (rule "times_zero_2" (formula "16") (term "1,1,1"))
                  (rule "add_zero_right" (formula "16") (term "1,1"))
                  (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
                  (rule "polySimp_addComm1" (formula "17") (term "0,1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,1,1,0"))
                  (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,1,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "16") (term "0,1"))
                  (rule "add_zero_right" (formula "16") (term "0,0,1"))
                  (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,1,1,0"))
                  (rule "apply_eq_monomials" (formula "17") (term "1,0,1,0,0") (ifseqformula "16"))
                  (rule "polySimp_rightDist" (formula "17") (term "0,1,0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "17") (term "1,0,1,0,1,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "17") (term "1,0,1,0,0"))
                  (rule "add_literals" (formula "17") (term "1,1,1,0,1,0,0"))
                  (rule "times_zero_1" (formula "17") (term "1,1,0,1,0,0"))
                  (rule "add_zero_right" (formula "17") (term "1,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "17") (term "1,0,1,0,0"))
                  (rule "polySimp_addComm1" (formula "17") (term "0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,1,1,0"))
                  (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,1,1,0"))
                  (rule "polySimp_rightDist" (formula "17") (term "1,1,0,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,1,1,0"))
                  (rule "mul_literals" (formula "17") (term "0,1,1,0,1,1,0"))
                  (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,1,1,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "16") (term "0,0,1"))
                  (rule "polySimp_elimOne" (formula "16") (term "0,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "17") (term "0,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "17") (term "0,1,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "17") (term "0,0,1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "17") (term "0,0,1,1,1,0,0"))
                  (rule "eqSeqDef" (formula "11") (term "1") (inst "iv=iv"))
                  (rule "lenOfSeqDef" (formula "11") (term "1,0,1"))
                  (rule "polySimp_elimSub" (formula "11") (term "1,1,0,1"))
                  (rule "times_zero_2" (formula "11") (term "1,1,1,0,1"))
                  (rule "add_zero_right" (formula "11") (term "1,1,0,1"))
                  (rule "getOfSeqDef" (formula "11") (term "1,1,0,1,1"))
                  (rule "castDel" (formula "11") (term "1,1,1,0,1,1"))
                  (rule "castDel" (formula "11") (term "2,1,1,0,1,1"))
                  (rule "add_zero_right" (formula "11") (term "0,2,1,1,1,0,1,1"))
                  (rule "polySimp_elimSub" (formula "11") (term "1,1,0,1,1,0,1,1"))
                  (rule "mul_literals" (formula "11") (term "1,1,1,0,1,1,0,1,1"))
                  (rule "add_zero_right" (formula "11") (term "1,1,0,1,1,0,1,1"))
                  (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,1,1"))
                  (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0,1,1"))
                  (rule "polySimp_addComm1" (formula "11") (term "0,1,0,0,1,1"))
                  (rule "inEqSimp_ltToLeq" (formula "11") (term "0,1,0,1"))
                  (rule "add_zero_right" (formula "11") (term "0,0,1,0,1"))
                  (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,1,1,0,1,1"))
                  (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,1,1,0,1,1"))
                  (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,1,1"))
                  (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,1,1,0,1,1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "1,0,0,1,1"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "0,1,0,0,1,1"))
                  (rule "polySimp_elimOne" (formula "11") (term "0,1,0,0,1,1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0,1,0,1"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "0,0,1,0,1"))
                  (rule "polySimp_elimOne" (formula "11") (term "0,0,1,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,1,1,0,1,1"))
                  (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,1,1,0,1,1"))
                  (rule "polySimp_rightDist" (formula "11") (term "1,1,0,1,1,0,1,1"))
                  (rule "mul_literals" (formula "11") (term "0,1,1,0,1,1,0,1,1"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,1,1,0,1,1"))
                  (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,1,1,0,1,1"))
                  (rule "pullOutSelect" (formula "26") (term "0") (inst "selectSK=f_1_0"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "15"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "9"))
                  (rule "eqSymm" (formula "27"))
                  (rule "array2seqDef" (formula "12") (term "0,0,0,0,1") (inst "u=u"))
                  (rule "array2seqDef" (formula "12") (term "0,0,0,1,0,1,1") (inst "u=u"))
                  (rule "array2seqDef" (formula "12") (term "0,0,0,1,0,0,1,1") (inst "u=u"))
                  (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_1_1"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "10"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "27")))
                  (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "pullOutSelect" (formula "12") (term "1,2,0,0,0,0,1") (inst "selectSK=arr_0"))
                  (rule "applyEq" (formula "13") (term "1,2,0,0,0,1,0,1,1") (ifseqformula "12"))
                  (rule "applyEq" (formula "13") (term "0,1,0,0,0,1,0,0,1,1") (ifseqformula "12"))
                  (rule "applyEq" (formula "13") (term "0,1,0,0,0,1,0,1,1") (ifseqformula "12"))
                  (rule "applyEq" (formula "13") (term "1,2,0,0,0,1,0,0,1,1") (ifseqformula "12"))
                  (rule "applyEq" (formula "13") (term "0,1,0,0,0,0,1") (ifseqformula "12"))
                  (rule "simplifySelectOfAnonEQ" (formula "12") (ifseqformula "9"))
                  (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "26")) (ifInst ""  (formula "5")))
                  (rule "applyEqReverse" (formula "13") (term "1,2,0,0,0,1,0,1,1") (ifseqformula "12"))
                  (rule "applyEqReverse" (formula "13") (term "0,1,0,0,0,1,0,0,1,1") (ifseqformula "12"))
                  (rule "applyEqReverse" (formula "13") (term "0,1,0,0,0,1,0,1,1") (ifseqformula "12"))
                  (rule "applyEqReverse" (formula "13") (term "1,2,0,0,0,1,0,0,1,1") (ifseqformula "12"))
                  (rule "applyEqReverse" (formula "13") (term "0,1,0,0,0,0,1") (ifseqformula "12"))
                  (rule "applyEqReverse" (formula "13") (term "1,2,0,0,0,0,1") (ifseqformula "12"))
                  (rule "hideAuxiliaryEq" (formula "12"))
                  (rule "nnf_imp2or" (formula "7") (term "0"))
                  (rule "nnf_imp2or" (formula "18") (term "0"))
                  (rule "nnf_notAnd" (formula "7") (term "0,0"))
                  (rule "inEqSimp_notLeq" (formula "7") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "7") (term "0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "7") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0"))
                  (rule "inEqSimp_notGeq" (formula "7") (term "0,0,0"))
                  (rule "times_zero_1" (formula "7") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "7") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0"))
                  (rule "mul_literals" (formula "7") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "18") (term "0,0"))
                  (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0"))
                  (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "18") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0"))
                  (rule "mul_literals" (formula "18") (term "1,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "18") (term "0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "18") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0"))
                  (rule "nnf_imp2or" (formula "12") (term "0,1,1"))
                  (rule "nnf_notAnd" (formula "12") (term "0,0,1,1"))
                  (rule "inEqSimp_notGeq" (formula "12") (term "1,0,0,1,1"))
                  (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,1,1"))
                  (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0,1,1"))
                  (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,1,1"))
                  (rule "add_literals" (formula "12") (term "0,0,0,1,0,0,1,1"))
                  (rule "add_zero_left" (formula "12") (term "0,0,1,0,0,1,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,1,1"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,1,1"))
                  (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,1,1"))
                  (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0,1,1"))
                  (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0,1,1"))
                  (rule "add_zero_right" (formula "12") (term "0,0,0,0,0,1,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,1,1"))
                  (rule "mul_literals" (formula "12") (term "1,0,0,0,1,1"))
                  (rule "commute_or_2" (formula "7") (term "0"))
                  (rule "commute_or_2" (formula "18") (term "0"))
                  (rule "commute_or" (formula "7") (term "0,0"))
                  (rule "commute_or" (formula "18") (term "0,0"))
                  (rule "commute_or_2" (formula "12") (term "0,1,1"))
                  (rule "commute_or" (formula "12") (term "0,0,1,1"))
                  (rule "arrayLengthIsAShort" (formula "11") (term "0,1"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "true_left" (formula "11"))
                  (rule "arrayLengthNotNegative" (formula "11") (term "0,1"))
                  (rule "cut_direct" (formula "12") (term "1"))
                  (branch "CUT: result_0.length = 0 TRUE"
                     (builtin "One Step Simplification" (formula "13"))
                     (rule "true_left" (formula "13"))
                     (rule "applyEq" (formula "11") (term "0") (ifseqformula "12"))
                     (rule "qeq_literals" (formula "11"))
                     (rule "true_left" (formula "11"))
                     (rule "applyEq" (formula "17") (term "1,1,0,0") (ifseqformula "11"))
                     (rule "seqDef_lower_equals_upper" (formula "17") (term "1,0,0"))
                     (rule "applyEq" (formula "18") (term "1,1,0,0,0,0,0") (ifseqformula "11"))
                     (rule "seqDef_lower_equals_upper" (formula "18") (term "1,0,0,0,0,0"))
                     (rule "applyEq" (formula "12") (term "1,1,0,1") (ifseqformula "11"))
                     (builtin "One Step Simplification" (formula "12"))
                     (rule "applyEq" (formula "12") (term "1,1,1,0,1,0,0,0,1,1") (ifseqformula "11"))
                     (rule "add_zero_right" (formula "12") (term "1,1,0,1,0,0,0,1,1"))
                     (rule "cut_direct" (formula "26") (term "0,0"))
                     (branch "CUT: o_1 = null TRUE"
                        (builtin "One Step Simplification" (formula "27"))
                        (rule "false_right" (formula "27"))
                        (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
                        (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "27")))
                        (rule "closeFalse" (formula "2"))
                     )
                     (branch "CUT: o_1 = null FALSE"
                        (builtin "One Step Simplification" (formula "27"))
                        (rule "notRight" (formula "27"))
                        (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "27"))
                        (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "1")) (ifInst ""  (formula "28")))
                        (rule "closeFalse" (formula "2"))
                     )
                  )
                  (branch "CUT: result_0.length = 0 FALSE"
                     (builtin "One Step Simplification" (formula "12"))
                     (rule "notLeft" (formula "12"))
                     (rule "inEqSimp_strengthen1" (formula "3") (ifseqformula "20"))
                     (rule "polySimp_addAssoc" (formula "3") (term "1"))
                     (rule "add_literals" (formula "3") (term "0,1"))
                     (rule "replace_known_left" (formula "12") (term "0") (ifseqformula "3"))
                     (builtin "One Step Simplification" (formula "12"))
                     (rule "andLeft" (formula "12"))
                     (rule "inEqSimp_contradEq7" (formula "21") (ifseqformula "3"))
                     (rule "polySimp_rightDist" (formula "21") (term "1,0,0"))
                     (rule "mul_literals" (formula "21") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "21") (term "0,0"))
                     (rule "polySimp_addComm1" (formula "21") (term "0,0,0"))
                     (rule "add_literals" (formula "21") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0"))
                     (rule "add_literals" (formula "21") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "21") (term "1,0,0"))
                     (rule "add_literals" (formula "21") (term "0,0"))
                     (rule "leq_literals" (formula "21") (term "0"))
                     (builtin "One Step Simplification" (formula "21"))
                     (rule "false_right" (formula "21"))
                     (rule "inEqSimp_strengthen1" (formula "11") (ifseqformula "21"))
                     (rule "add_zero_right" (formula "11") (term "1"))
                     (rule "replace_known_left" (formula "12") (term "0,1") (ifseqformula "11"))
                     (builtin "One Step Simplification" (formula "12"))
                     (rule "inEqSimp_contradEq7" (formula "21") (ifseqformula "11"))
                     (rule "times_zero_1" (formula "21") (term "1,0,0"))
                     (rule "add_zero_right" (formula "21") (term "0,0"))
                     (rule "leq_literals" (formula "21") (term "0"))
                     (builtin "One Step Simplification" (formula "21"))
                     (rule "false_right" (formula "21"))
                     (rule "cut_direct" (formula "27") (term "0,0"))
                     (branch "CUT: o_1 = null TRUE"
                        (builtin "One Step Simplification" (formula "28"))
                        (rule "false_right" (formula "28"))
                        (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
                        (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "28")))
                        (rule "closeFalse" (formula "2"))
                     )
                     (branch "CUT: o_1 = null FALSE"
                        (builtin "One Step Simplification" (formula "28"))
                        (rule "notRight" (formula "28"))
                        (rule "replace_known_left" (formula "2") (term "0,0,1,0,0") (ifseqformula "1"))
                        (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "28")) (ifInst ""  (formula "29")))
                        (rule "closeFalse" (formula "2"))
                     )
                  )
               )
            )
            (branch "Exceptional Post (concatenate)"
               (builtin "One Step Simplification" (formula "11"))
               (builtin "One Step Simplification" (formula "9"))
               (builtin "One Step Simplification" (formula "2"))
               (builtin "One Step Simplification" (formula "15"))
               (rule "true_left" (formula "2"))
               (rule "translateJavaAddInt" (formula "3") (term "0"))
               (rule "translateJavaAddInt" (formula "8") (term "0,0,0,0,1,1"))
               (rule "translateJavaAddInt" (formula "8") (term "1,1,1,1,1,0,1,0,1,1"))
               (rule "translateJavaAddInt" (formula "8") (term "0,2,1,0,1,1,0,1,0,1,1"))
               (rule "translateJavaAddInt" (formula "8") (term "0,0,0,1,0,1,1"))
               (rule "translateJavaAddInt" (formula "14") (term "1,1,1,1,1,0,1,0,0,0,1"))
               (rule "translateJavaSubInt" (formula "3") (term "0,0"))
               (rule "translateJavaAddInt" (formula "8") (term "0,1,1,1,1,1,0,1,0,1,1"))
               (rule "polySimp_addLiterals" (formula "8") (term "1,1,1,1,1,0,1,0,1,1"))
               (rule "orRight" (formula "13"))
               (rule "andLeft" (formula "10"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "11") (term "1,0") (ifseqformula "10"))
               (rule "andLeft" (formula "8"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "9") (term "1,1,0") (ifseqformula "8"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "12") (term "0,1,0") (ifseqformula "8"))
               (rule "andLeft" (formula "9"))
               (rule "andLeft" (formula "13"))
               (rule "andLeft" (formula "10"))
               (rule "andLeft" (formula "9"))
               (rule "andLeft" (formula "15"))
               (rule "andLeft" (formula "14"))
               (rule "andLeft" (formula "10"))
               (rule "andLeft" (formula "17"))
               (rule "notLeft" (formula "15"))
               (rule "close" (formula "19") (ifseqformula "18"))
            )
            (branch "Pre (concatenate)"
               (builtin "One Step Simplification" (formula "9"))
               (builtin "One Step Simplification" (formula "2"))
               (builtin "One Step Simplification" (formula "13"))
               (rule "true_left" (formula "2"))
               (rule "translateJavaAddInt" (formula "3") (term "0"))
               (rule "translateJavaAddInt" (formula "8") (term "0,0,0,1,0,1,1"))
               (rule "translateJavaAddInt" (formula "8") (term "0,2,1,0,1,1,0,1,0,1,1"))
               (rule "translateJavaAddInt" (formula "8") (term "0,0,0,0,1,1"))
               (rule "translateJavaAddInt" (formula "8") (term "1,1,1,1,1,0,1,0,1,1"))
               (rule "translateJavaSubInt" (formula "3") (term "0,0"))
               (rule "translateJavaAddInt" (formula "8") (term "0,1,1,1,1,1,0,1,0,1,1"))
               (rule "polySimp_addLiterals" (formula "8") (term "1,1,1,1,1,0,1,0,1,1"))
               (rule "orRight" (formula "11"))
               (rule "andLeft" (formula "8"))
               (rule "wellFormedAnonEQ" (formula "14") (term "0,0,1") (ifseqformula "8"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "14") (term "1,1,1") (ifseqformula "8"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "9") (term "1,1,0") (ifseqformula "8"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "14") (term "1,1,0,1") (ifseqformula "8"))
               (rule "andLeft" (formula "9"))
               (rule "andLeft" (formula "9"))
               (rule "andLeft" (formula "11"))
               (rule "andLeft" (formula "11"))
               (rule "andLeft" (formula "12"))
               (rule "andLeft" (formula "13"))
               (rule "notLeft" (formula "13"))
               (rule "notLeft" (formula "13"))
               (rule "eqSymm" (formula "16"))
               (rule "eqSymm" (formula "11") (term "0"))
               (rule "eqSymm" (formula "12") (term "1"))
               (rule "replace_known_right" (formula "2") (term "0") (ifseqformula "15"))
               (builtin "One Step Simplification" (formula "2"))
               (rule "replace_known_right" (formula "10") (term "0,1") (ifseqformula "14"))
               (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "13")))
               (rule "replace_known_right" (formula "19") (term "0,1,1") (ifseqformula "13"))
               (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "13")) (ifInst ""  (formula "1")) (ifInst ""  (formula "7")) (ifInst ""  (formula "14")) (ifInst ""  (formula "10")))
               (rule "polySimp_elimSub" (formula "3") (term "0,0"))
               (rule "polySimp_addComm0" (formula "12") (term "0,0"))
               (rule "polySimp_addComm0" (formula "11") (term "1,0"))
               (rule "polySimp_addComm0" (formula "12") (term "1,1,1,0,1"))
               (rule "polySimp_addComm0" (formula "12") (term "0,2,1,0,0,1"))
               (rule "polySimp_addComm0" (formula "3") (term "0,0"))
               (rule "polySimp_addComm1" (formula "3") (term "0"))
               (rule "polySimp_addComm0" (formula "3") (term "0,0"))
               (rule "inEqSimp_ltRight" (formula "18"))
               (rule "times_zero_1" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "inEqSimp_leqRight" (formula "18"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "14") (term "0"))
               (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0"))
               (rule "polySimp_addComm1" (formula "14") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "14") (term "0,0,0"))
               (rule "add_literals" (formula "14") (term "0,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "7"))
               (rule "inEqSimp_commuteLeq" (formula "6"))
               (rule "Query_axiom_for_concatenateMessageArray_int_[[B__in_verif_selectvoting_system_core_Utils" (formula "13") (term "1,1,0,1") (inst "concatenateMessageArray_sk=concatenateMessageArray_sk_6") (inst "#p1=x_arr_arr") (inst "#p0=x") (inst "#res=x_arr"))
               (rule "eqSymm" (formula "13") (term "1,0,1"))
               (rule "inEqSimp_sepPosMonomial1" (formula "1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1"))
               (rule "polySimp_rightDist" (formula "1") (term "1"))
               (rule "mul_literals" (formula "1") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
               (rule "polySimp_elimOne" (formula "1") (term "1,1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "0"))
               (rule "polySimp_mulLiterals" (formula "14") (term "0,0"))
               (rule "polySimp_elimOne" (formula "14") (term "0,0"))
               (rule "inEqSimp_contradEq7" (formula "18") (ifseqformula "1"))
               (rule "polySimp_mulComm0" (formula "18") (term "1,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0"))
               (rule "add_literals" (formula "18") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "18") (term "1,0,0"))
               (rule "add_zero_right" (formula "18") (term "0,0"))
               (rule "leq_literals" (formula "18") (term "0"))
               (builtin "One Step Simplification" (formula "18"))
               (rule "false_right" (formula "18"))
               (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "1"))
               (rule "inEqSimp_homoInEq0" (formula "6") (term "0"))
               (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0"))
               (rule "add_literals" (formula "6") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "6") (term "1,0,0"))
               (rule "add_zero_right" (formula "6") (term "0,0"))
               (rule "qeq_literals" (formula "6") (term "0"))
               (builtin "One Step Simplification" (formula "6"))
               (rule "true_left" (formula "6"))
               (rule "nonNull" (formula "6") (inst "i=i_1"))
               (rule "sub_literals" (formula "6") (term "2,1,0,1,1"))
               (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "16")))
               (rule "greater_literals" (formula "6") (term "0"))
               (builtin "One Step Simplification" (formula "6"))
               (rule "narrowSelectArrayType" (formula "6") (term "0,0,1,0") (ifseqformula "3") (ifseqformula "16"))
               (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "6") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0"))
               (rule "mul_literals" (formula "6") (term "0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0"))
               (rule "array2seqDef" (formula "13") (term "1,1") (inst "u=u"))
               (rule "eqSymm" (formula "13") (term "1"))
               (rule "array2seqDef" (formula "13") (term "1,1,1") (inst "u=u"))
               (rule "array2seqDef" (formula "13") (term "0,1,1") (inst "u=u"))
               (rule "eqSymm" (formula "13") (term "1"))
               (rule "eqSeqDef" (formula "13") (term "1") (inst "iv=iv"))
               (rule "lenOfSeqDef" (formula "13") (term "1,0,1"))
               (rule "polySimp_elimSub" (formula "13") (term "1,1,0,1"))
               (rule "mul_literals" (formula "13") (term "1,1,1,0,1"))
               (rule "add_zero_right" (formula "13") (term "1,1,0,1"))
               (rule "getOfSeqDef" (formula "13") (term "1,1,0,1,1"))
               (rule "castDel" (formula "13") (term "2,1,1,0,1,1"))
               (rule "castDel" (formula "13") (term "1,1,1,0,1,1"))
               (rule "add_zero_right" (formula "13") (term "0,2,1,1,1,0,1,1"))
               (rule "polySimp_elimSub" (formula "13") (term "1,1,0,1,1,0,1,1"))
               (rule "times_zero_2" (formula "13") (term "1,1,1,0,1,1,0,1,1"))
               (rule "add_zero_right" (formula "13") (term "1,1,0,1,1,0,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,1,1"))
               (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0,1,1"))
               (rule "polySimp_addComm1" (formula "13") (term "0,1,0,0,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "13") (term "0,1,0,1"))
               (rule "add_zero_right" (formula "13") (term "0,0,1,0,1"))
               (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,1"))
               (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,1,1,0,1,1"))
               (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,1,1,0,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,1,1,0,1,1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "1,0,0,1,1"))
               (rule "polySimp_mulLiterals" (formula "13") (term "0,1,0,0,1,1"))
               (rule "polySimp_elimOne" (formula "13") (term "0,1,0,0,1,1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,1,0,1"))
               (rule "polySimp_mulLiterals" (formula "13") (term "0,0,1,0,1"))
               (rule "polySimp_elimOne" (formula "13") (term "0,0,1,0,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,1,1,0,1,1"))
               (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,1,1,0,1,1"))
               (rule "polySimp_rightDist" (formula "13") (term "1,1,0,1,1,0,1,1"))
               (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,1,1,0,1,1"))
               (rule "mul_literals" (formula "13") (term "0,1,1,0,1,1,0,1,1"))
               (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,1,1,0,1,1"))
               (rule "pullOutSelect" (formula "13") (term "1,2,0,0,0,0,1") (inst "selectSK=arr_1"))
               (rule "applyEq" (formula "14") (term "1,2,0,0,0,1,0,1,1") (ifseqformula "13"))
               (rule "applyEq" (formula "14") (term "1,2,0,0,0,1,0,0,1,1") (ifseqformula "13"))
               (rule "applyEq" (formula "14") (term "0,1,0,0,0,1,0,0,1,1") (ifseqformula "13"))
               (rule "applyEq" (formula "14") (term "0,1,0,0,0,0,1") (ifseqformula "13"))
               (rule "applyEq" (formula "14") (term "0,1,0,0,0,1,0,1,1") (ifseqformula "13"))
               (rule "simplifySelectOfAnonEQ" (formula "13") (ifseqformula "8"))
               (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "17")) (ifInst ""  (formula "4")))
               (rule "applyEqReverse" (formula "14") (term "1,2,0,0,0,0,1") (ifseqformula "13"))
               (rule "applyEqReverse" (formula "14") (term "1,2,0,0,0,1,0,1,1") (ifseqformula "13"))
               (rule "applyEqReverse" (formula "14") (term "1,2,0,0,0,1,0,0,1,1") (ifseqformula "13"))
               (rule "applyEqReverse" (formula "14") (term "0,1,0,0,0,1,0,0,1,1") (ifseqformula "13"))
               (rule "applyEqReverse" (formula "14") (term "0,1,0,0,0,0,1") (ifseqformula "13"))
               (rule "applyEqReverse" (formula "14") (term "0,1,0,0,0,1,0,1,1") (ifseqformula "13"))
               (rule "hideAuxiliaryEq" (formula "13"))
               (rule "boxToDiamond" (formula "12") (term "1"))
               (builtin "One Step Simplification" (formula "12"))
               (rule "notLeft" (formula "12"))
               (rule "nnf_imp2or" (formula "6") (term "0"))
               (rule "nnf_notAnd" (formula "6") (term "0,0"))
               (rule "inEqSimp_notLeq" (formula "6") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "6") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "6") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0"))
               (rule "inEqSimp_notGeq" (formula "6") (term "0,0,0"))
               (rule "times_zero_1" (formula "6") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "6") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0"))
               (rule "mul_literals" (formula "6") (term "1,0,0,0"))
               (rule "nnf_imp2or" (formula "12") (term "0,1,1"))
               (rule "nnf_notAnd" (formula "12") (term "0,0,1,1"))
               (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0,1,1"))
               (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0,1,1"))
               (rule "add_literals" (formula "12") (term "0,0,0,0,0,1,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,1,1"))
               (rule "mul_literals" (formula "12") (term "1,0,0,0,1,1"))
               (rule "inEqSimp_notGeq" (formula "12") (term "1,0,0,1,1"))
               (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,1,1"))
               (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0,1,1"))
               (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,1,1"))
               (rule "add_literals" (formula "12") (term "0,0,0,1,0,0,1,1"))
               (rule "add_zero_left" (formula "12") (term "0,0,1,0,0,1,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,1,1"))
               (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,1,1"))
               (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,1,1"))
               (rule "shift_paren_or" (formula "17") (term "1"))
               (rule "commute_or_2" (formula "6") (term "0"))
               (rule "commute_or" (formula "6") (term "0,0"))
               (rule "commute_or_2" (formula "12") (term "0,1,1"))
               (rule "commute_or" (formula "12") (term "0,0,1,1"))
               (rule "methodBodyExpand" (formula "13") (term "1") (newnames "heapBefore_concatenateMessageArray_7,savedHeapBefore_concatenateMessageArray_6"))
               (builtin "One Step Simplification" (formula "13"))
               (rule "arrayLengthNotNegative" (formula "11") (term "0,1"))
               (rule "arrayLengthIsAShort" (formula "12") (term "0,1"))
               (builtin "One Step Simplification" (formula "12"))
               (rule "true_left" (formula "12"))
               (rule "arrayLengthNotNegative" (formula "12") (term "0,0"))
               (rule "arrayLengthIsAShort" (formula "13") (term "0,0"))
               (builtin "One Step Simplification" (formula "13"))
               (rule "true_left" (formula "13"))
               (rule "ifElseUnfold" (formula "15") (term "1") (inst "#boolv=x_1"))
               (rule "variableDeclaration" (formula "15") (term "1") (newnames "x_36"))
               (rule "compound_equality_comparison_2" (formula "15") (term "1") (inst "#v1=x_38") (inst "#v0=x_37"))
               (rule "variableDeclarationAssign" (formula "15") (term "1"))
               (rule "variableDeclaration" (formula "15") (term "1") (newnames "x_37"))
               (rule "assignment" (formula "15") (term "1"))
               (builtin "One Step Simplification" (formula "15"))
               (rule "variableDeclarationAssign" (formula "15") (term "1"))
               (rule "variableDeclaration" (formula "15") (term "1") (newnames "x_38"))
               (rule "assignment_read_length" (formula "15") (term "1"))
               (branch "Normal Execution (x_arr_arr != null)"
                  (builtin "One Step Simplification" (formula "16"))
                  (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "19")))
                  (rule "false_right" (formula "15"))
                  (rule "equality_comparison_simple" (formula "15") (term "1"))
                  (builtin "One Step Simplification" (formula "15"))
                  (rule "eqSymm" (formula "15") (term "0,0,1,0"))
                  (rule "arrayLengthNotNegative" (formula "14") (term "1,1,0,0,0,1"))
                  (rule "arrayLengthIsAShort" (formula "15") (term "1,1,0,0,0,1"))
                  (builtin "One Step Simplification" (formula "15"))
                  (rule "true_left" (formula "15"))
                  (rule "allLeft" (formula "6") (inst "t=i"))
                  (rule "inEqSimp_commuteGeq" (formula "6") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "6") (term "1") (ifseqformula "1"))
                  (rule "inEqSimp_homoInEq1" (formula "6") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0,1"))
                  (rule "add_literals" (formula "6") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "6") (term "1,0,0,1"))
                  (rule "add_literals" (formula "6") (term "0,0,1"))
                  (rule "leq_literals" (formula "6") (term "0,1"))
                  (builtin "One Step Simplification" (formula "6"))
                  (rule "inEqSimp_contradInEq1" (formula "6") (term "1") (ifseqformula "2"))
                  (rule "qeq_literals" (formula "6") (term "0,1"))
                  (builtin "One Step Simplification" (formula "6"))
                  (rule "notLeft" (formula "6"))
                  (rule "replace_known_right" (formula "21") (term "0,0,1") (ifseqformula "16"))
                  (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "16")))
                  (rule "orRight" (formula "21"))
                  (rule "referencedObjectIsCreatedRight" (formula "21") (ifseqformula "16"))
                  (rule "close" (formula "21") (ifseqformula "3"))
               )
               (branch "Null Reference (x_arr_arr = null)"
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "19")))
                  (rule "closeFalse" (formula "1"))
               )
            )
         )
         (branch "Exceptional Post (concatenateMessageArray)"
            (builtin "One Step Simplification" (formula "9"))
            (builtin "One Step Simplification" (formula "2"))
            (builtin "One Step Simplification" (formula "13"))
            (rule "true_left" (formula "2"))
            (rule "translateJavaAddInt" (formula "3") (term "0"))
            (rule "translateJavaAddInt" (formula "8") (term "0,2,1,0,1,1,0,1,0,1,1"))
            (rule "translateJavaAddInt" (formula "8") (term "0,0,0,1,0,1,1"))
            (rule "translateJavaAddInt" (formula "8") (term "0,0,0,0,1,1"))
            (rule "translateJavaAddInt" (formula "8") (term "1,1,1,1,1,0,1,0,1,1"))
            (rule "translateJavaAddInt" (formula "12") (term "1,1,1,1,1,0,1,0,0,0,1"))
            (rule "translateJavaSubInt" (formula "3") (term "0,0"))
            (rule "translateJavaAddInt" (formula "8") (term "0,1,1,1,1,1,0,1,0,1,1"))
            (rule "polySimp_addLiterals" (formula "8") (term "1,1,1,1,1,0,1,0,1,1"))
            (rule "orRight" (formula "11"))
            (rule "andLeft" (formula "8"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "9") (term "1,0") (ifseqformula "8"))
            (rule "andLeft" (formula "9"))
            (rule "andLeft" (formula "9"))
            (rule "andLeft" (formula "11"))
            (rule "notLeft" (formula "9"))
            (rule "close" (formula "12") (ifseqformula "11"))
         )
         (branch "Pre (concatenateMessageArray)"
            (builtin "One Step Simplification" (formula "2"))
            (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "7")) (ifInst ""  (formula "1")) (ifInst ""  (formula "8")))
            (rule "true_left" (formula "2"))
            (rule "translateJavaAddInt" (formula "3") (term "0"))
            (rule "translateJavaAddInt" (formula "10") (term "1,0,0,0"))
            (rule "translateJavaSubInt" (formula "10") (term "0,0,1"))
            (rule "translateJavaAddInt" (formula "10") (term "0,1,0,0"))
            (rule "translateJavaSubInt" (formula "3") (term "0,0"))
            (rule "translateJavaAddInt" (formula "10") (term "0,1"))
            (rule "translateJavaAddInt" (formula "10") (term "1,0,0,1"))
            (rule "orRight" (formula "9"))
            (rule "eqSymm" (formula "8"))
            (rule "replace_known_right" (formula "2") (term "0") (ifseqformula "7"))
            (builtin "One Step Simplification" (formula "2"))
            (rule "replace_known_left" (formula "11") (term "1,0") (ifseqformula "2"))
            (builtin "One Step Simplification" (formula "11"))
            (rule "polySimp_elimSub" (formula "3") (term "0,0"))
            (rule "polySimp_elimSub" (formula "11") (term "0,0,1"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1"))
            (rule "polySimp_addComm0" (formula "11") (term "0,1,0"))
            (rule "polySimp_addComm0" (formula "11") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "3") (term "0"))
            (rule "polySimp_addComm0" (formula "11") (term "1,1,0,0,1"))
            (rule "polySimp_addComm0" (formula "3") (term "0,0"))
            (rule "polySimp_addComm1" (formula "3") (term "0"))
            (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1"))
            (rule "mul_literals" (formula "11") (term "0,1,0,0,1"))
            (rule "polySimp_addComm0" (formula "11") (term "0,0,1"))
            (rule "polySimp_addComm1" (formula "11") (term "0,1"))
            (rule "polySimp_addComm1" (formula "11") (term "0,0,1"))
            (rule "add_literals" (formula "11") (term "0,0,0,1"))
            (rule "add_zero_left" (formula "11") (term "0,0,1"))
            (rule "inEqSimp_leqRight" (formula "9"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
            (rule "inEqSimp_ltRight" (formula "10"))
            (rule "times_zero_1" (formula "1") (term "0,0"))
            (rule "add_zero_left" (formula "1") (term "0"))
            (rule "measuredByCheck" (formula "11") (term "1") (ifseqformula "5"))
            (rule "precOfInt" (formula "11") (term "1"))
            (rule "inEqSimp_ltToLeq" (formula "11") (term "1,1"))
            (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,1"))
            (rule "polySimp_rightDist" (formula "11") (term "0,1,0,0,1,1"))
            (rule "mul_literals" (formula "11") (term "0,0,1,0,0,1,1"))
            (rule "polySimp_mulLiterals" (formula "11") (term "1,0,1,0,0,1,1"))
            (rule "polySimp_elimOne" (formula "11") (term "1,0,1,0,0,1,1"))
            (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,1"))
            (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,1,1"))
            (rule "add_literals" (formula "11") (term "0,0,0,0,1,1"))
            (rule "add_zero_left" (formula "11") (term "0,0,0,1,1"))
            (rule "polySimp_addAssoc" (formula "11") (term "0,1,1"))
            (rule "polySimp_addComm1" (formula "11") (term "0,0,1,1"))
            (rule "polySimp_pullOutFactor2b" (formula "11") (term "0,1,1"))
            (rule "add_literals" (formula "11") (term "1,1,0,1,1"))
            (rule "times_zero_1" (formula "11") (term "1,0,1,1"))
            (rule "add_zero_right" (formula "11") (term "0,1,1"))
            (rule "polySimp_pullOutFactor1" (formula "11") (term "0,1,1"))
            (rule "add_literals" (formula "11") (term "1,0,1,1"))
            (rule "times_zero_1" (formula "11") (term "0,1,1"))
            (rule "leq_literals" (formula "11") (term "1,1"))
            (builtin "One Step Simplification" (formula "11"))
            (rule "inEqSimp_commuteLeq" (formula "7"))
            (rule "inEqSimp_commuteLeq" (formula "6"))
            (rule "inEqSimp_commuteLeq" (formula "10") (term "1,0"))
            (rule "inEqSimp_homoInEq0" (formula "10") (term "0,0"))
            (rule "times_zero_2" (formula "10") (term "1,0,0,0"))
            (rule "add_zero_right" (formula "10") (term "0,0,0"))
            (rule "inEqSimp_homoInEq0" (formula "10") (term "1"))
            (rule "times_zero_2" (formula "10") (term "1,0,1"))
            (rule "add_zero_right" (formula "10") (term "0,1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "2"))
            (rule "polySimp_mulComm0" (formula "2") (term "1"))
            (rule "polySimp_rightDist" (formula "2") (term "1"))
            (rule "mul_literals" (formula "2") (term "0,1"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
            (rule "polySimp_elimOne" (formula "2") (term "1,1"))
            (rule "replace_known_left" (formula "10") (term "1,0") (ifseqformula "2"))
            (builtin "One Step Simplification" (formula "10"))
            (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1"))
            (rule "polySimp_mulLiterals" (formula "10") (term "1,1"))
            (rule "polySimp_elimOne" (formula "10") (term "1,1"))
            (rule "replace_known_left" (formula "10") (term "1") (ifseqformula "6"))
            (builtin "One Step Simplification" (formula "10"))
            (rule "inEqSimp_geqRight" (formula "10"))
            (rule "times_zero_1" (formula "1") (term "1,0,0"))
            (rule "add_zero_right" (formula "1") (term "0,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1"))
            (rule "mul_literals" (formula "1") (term "1"))
            (rule "inEqSimp_contradEq7" (formula "10") (ifseqformula "3"))
            (rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0"))
            (rule "add_literals" (formula "10") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "10") (term "1,0,0"))
            (rule "add_zero_right" (formula "10") (term "0,0"))
            (rule "leq_literals" (formula "10") (term "0"))
            (builtin "One Step Simplification" (formula "10"))
            (rule "false_right" (formula "10"))
            (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "1"))
            (rule "qeq_literals" (formula "2") (term "0"))
            (builtin "One Step Simplification" (formula "2"))
            (rule "closeFalse" (formula "2"))
         )
      )
      (branch "Null Reference (_messages = null)"
         (builtin "One Step Simplification" (formula "3"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "9")))
         (rule "closeFalse" (formula "1"))
      )
      (branch "Index Out of Bounds (_messages != null, but _i Out of Bounds!)"
         (builtin "One Step Simplification" (formula "3"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "9")))
         (rule "true_left" (formula "3"))
         (rule "translateJavaAddInt" (formula "10") (term "1,1,1,1,1,0,1,0,0,0,1"))
         (rule "translateJavaAddInt" (formula "4") (term "0"))
         (rule "translateJavaSubInt" (formula "4") (term "0,0"))
         (rule "eqSymm" (formula "10") (term "0,0,0,0,0,1"))
         (rule "eqSymm" (formula "9"))
         (rule "eqSymm" (formula "10") (term "1,0,0,1,0,1"))
         (rule "eqSymm" (formula "10") (term "1,0,1,0,0,0,1"))
         (rule "replace_known_right" (formula "3") (term "0") (ifseqformula "8"))
         (builtin "One Step Simplification" (formula "3"))
         (rule "polySimp_elimSub" (formula "4") (term "0,0"))
         (rule "polySimp_addComm0" (formula "10") (term "1,1,1,0,1,0,1,0,0,0,1"))
         (rule "polySimp_addComm1" (formula "4") (term "0"))
         (rule "polySimp_addComm0" (formula "4") (term "0,0"))
         (rule "polySimp_addComm1" (formula "4") (term "0"))
         (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,1,0,0,0,1"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,1,0,0,0,1"))
         (rule "polySimp_addComm1" (formula "10") (term "0,0,0,1,0,0,0,1"))
         (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
         (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
         (rule "add_literals" (formula "1") (term "0,0,1"))
         (rule "inEqSimp_commuteLeq" (formula "5"))
         (rule "inEqSimp_commuteLeq" (formula "6"))
         (rule "blockThrow" (formula "10") (term "1"))
         (builtin "One Step Simplification" (formula "10"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
         (rule "mul_literals" (formula "1") (term "1,1"))
         (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "0,0,1,0,0,0,1"))
         (rule "polySimp_mulLiterals" (formula "10") (term "0,0,0,1,0,0,0,1"))
         (rule "polySimp_elimOne" (formula "10") (term "0,0,0,1,0,0,0,1"))
         (rule "inEqSimp_strengthen1" (formula "6") (ifseqformula "9"))
         (rule "inEqSimp_contradEq7" (formula "9") (ifseqformula "6"))
         (rule "polySimp_mulComm0" (formula "9") (term "1,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0"))
         (rule "add_literals" (formula "9") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "9") (term "1,0,0"))
         (rule "add_literals" (formula "9") (term "0,0"))
         (rule "leq_literals" (formula "9") (term "0"))
         (builtin "One Step Simplification" (formula "9"))
         (rule "false_right" (formula "9"))
         (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "5"))
         (rule "qeq_literals" (formula "1") (term "0,1"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "6"))
         (rule "andLeft" (formula "1"))
         (rule "inEqSimp_homoInEq1" (formula "1"))
         (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
         (rule "add_literals" (formula "1") (term "1,1,0"))
         (rule "times_zero_1" (formula "1") (term "1,0"))
         (rule "add_zero_right" (formula "1") (term "0"))
         (rule "leq_literals" (formula "1"))
         (rule "closeFalse" (formula "1"))
      )
   )
)
(branch "Null Reference (_messages = null)"
   (rule "nonNull" (formula "8") (inst "i=i_1") (userinteraction))
   (builtin "One Step Simplification" (formula "1"))
   (builtin "One Step Simplification" (formula "3"))
   (rule "true_left" (formula "3"))
   (rule "translateJavaAddInt" (formula "8") (term "1,1,1,1,1,0,1,0,0,0,1"))
   (rule "translateJavaAddInt" (formula "4") (term "0"))
   (rule "translateJavaSubInt" (formula "4") (term "0,0"))
   (rule "greater_literals" (formula "7") (term "0,1"))
   (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "1")))
   (rule "closeFalse" (formula "7"))
)
)

}
