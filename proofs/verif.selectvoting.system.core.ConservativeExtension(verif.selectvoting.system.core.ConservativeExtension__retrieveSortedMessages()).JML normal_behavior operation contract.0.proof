\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Sun Mar 20 12:24:54 CET 2016
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=5000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:allow , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\javaSource "../src";

\proofObligation "#Proof Obligation Settings
#Sun Mar 20 12:24:54 CET 2016
name=verif.selectvoting.system.core.ConservativeExtension[verif.selectvoting.system.core.ConservativeExtension\\:\\:retrieveSortedMessages()].JML normal_behavior operation contract.0
contract=verif.selectvoting.system.core.ConservativeExtension[verif.selectvoting.system.core.ConservativeExtension\\:\\:retrieveSortedMessages()].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "mihai" ) (keyVersion "99336ad04cdaa9fea6ec698b0fe69574b8516e91"))
(keyLog "1" (keyUser "mihai" ) (keyVersion "99336ad04cdaa9fea6ec698b0fe69574b8516e91"))
(keyLog "2" (keyUser "mihai" ) (keyVersion "6bc7ade97061383f11985e24decf735b7f2f0af2"))

(autoModeTime "123476")

(branch "dummy ID"
(builtin "One Step Simplification" (formula "1") (newnames "result,exc,heapAtPre,o,f"))
(rule "translateJavaSubInt" (formula "1") (term "1,1,0,0,0,1,0,0,0,1,1"))
(rule "translateJavaAddInt" (formula "1") (term "0,2,2,0,1,0,0,1,0,0,0,1,1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "3"))
(rule "eqSymm" (formula "5") (term "1,0,0,1,0,1"))
(rule "polySimp_elimSub" (formula "5") (term "1,1,0,0,0,1,0,0,0,1"))
(rule "mul_literals" (formula "5") (term "1,1,1,0,0,0,1,0,0,0,1"))
(rule "polySimp_addComm0" (formula "5") (term "0,2,2,0,1,0,0,1,0,0,0,1"))
(rule "polySimp_addComm0" (formula "5") (term "1,1,0,0,0,1,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,0,0,1,1,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,0,0,1,1,1,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "3") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1,0,0"))
(rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,0,0,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "5") (term "1,0,0,1,0,0,0,1,0,0,0,1"))
(rule "mul_literals" (formula "5") (term "0,1,0,0,1,0,0,0,1,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "5") (term "0,0,1,0,0,0,1,0,0,0,1"))
(rule "add_literals" (formula "5") (term "0,0,0,1,0,0,0,1,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0,0,1,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0,0,1,1,1,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,0"))
(rule "assignment" (formula "5") (term "1"))
(builtin "One Step Simplification" (formula "5"))
(rule "inEqSimp_sepPosMonomial0" (formula "3") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "3") (term "1,1,0,0"))
(rule "polySimp_rightDist" (formula "3") (term "1,1,0,0"))
(rule "mul_literals" (formula "3") (term "0,1,1,0,0"))
(rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,0,0"))
(rule "polySimp_elimOne" (formula "3") (term "1,1,1,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0,0,1,1,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "5") (term "1,1,0,0,0,1,1,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "5") (term "1,1,0,0,0,1,1,1,0,0,0,1"))
(rule "mul_literals" (formula "5") (term "0,1,1,0,0,0,1,1,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,0,0,1,1,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "5") (term "1,1,1,0,0,0,1,1,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0,0,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "5") (term "1,1,0,0,0,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "5") (term "1,1,0,0,0,1,0,0,0,1"))
(rule "mul_literals" (formula "5") (term "0,1,1,0,0,0,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,0,0,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "5") (term "1,1,1,0,0,0,1,0,0,0,1"))
(rule "nonNull" (formula "5") (term "1,1,1,1,0,0,0,1") (inst "i=i"))
(rule "greater_literals" (formula "5") (term "0,1,1,1,1,1,0,0,0,1"))
(builtin "One Step Simplification" (formula "5"))
(rule "sub_literals" (formula "5") (term "2,1,0,1,1,1,1,1,0,0,0,1"))
(builtin "One Step Simplification" (formula "5"))
(rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,0,1,1,1,1,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,0,1,1,1,1,1,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0,1,1,1,1,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0,1,1,1,1,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "5") (term "1,1,0,0,1,1,1,1,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "5") (term "1,1,0,0,1,1,1,1,1,0,0,0,1"))
(rule "mul_literals" (formula "5") (term "0,1,1,0,0,1,1,1,1,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,0,1,1,1,1,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "5") (term "1,1,1,0,0,1,1,1,1,1,0,0,0,1"))
(rule "nnf_imp2or" (formula "3") (term "0"))
(rule "nnf_notAnd" (formula "3") (term "0,0"))
(rule "inEqSimp_notLeq" (formula "3") (term "1,0,0"))
(rule "polySimp_rightDist" (formula "3") (term "1,0,0,1,0,0"))
(rule "mul_literals" (formula "3") (term "0,1,0,0,1,0,0"))
(rule "polySimp_addAssoc" (formula "3") (term "0,0,1,0,0"))
(rule "add_literals" (formula "3") (term "0,0,0,1,0,0"))
(rule "add_zero_left" (formula "3") (term "0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "3") (term "1,0,0"))
(rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0"))
(rule "polySimp_elimOne" (formula "3") (term "1,1,0,0"))
(rule "inEqSimp_notGeq" (formula "3") (term "0,0,0"))
(rule "times_zero_1" (formula "3") (term "1,0,0,0,0,0"))
(rule "add_literals" (formula "3") (term "0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "3") (term "0,0,0"))
(rule "mul_literals" (formula "3") (term "1,0,0,0"))
(rule "nnf_imp2or" (formula "5") (term "0,0,1,0,0,0,1"))
(rule "nnf_imp2or" (formula "5") (term "0,0,1,1,1,0,0,0,1"))
(rule "nnf_notAnd" (formula "5") (term "0,0,0,1,0,0,0,1"))
(rule "inEqSimp_notGeq" (formula "5") (term "0,0,0,0,1,0,0,0,1"))
(rule "times_zero_1" (formula "5") (term "1,0,0,0,0,0,0,1,0,0,0,1"))
(rule "add_zero_right" (formula "5") (term "0,0,0,0,0,0,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0,0,1,0,0,0,1"))
(rule "mul_literals" (formula "5") (term "1,0,0,0,0,1,0,0,0,1"))
(rule "inEqSimp_notLeq" (formula "5") (term "1,0,0,0,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "5") (term "1,0,0,1,0,0,0,1,0,0,0,1"))
(rule "mul_literals" (formula "5") (term "0,1,0,0,1,0,0,0,1,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "5") (term "0,0,1,0,0,0,1,0,0,0,1"))
(rule "add_literals" (formula "5") (term "0,0,0,1,0,0,0,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "5") (term "1,0,0,0,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "5") (term "1,1,0,0,0,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "5") (term "1,1,0,0,0,1,0,0,0,1"))
(rule "mul_literals" (formula "5") (term "0,1,1,0,0,0,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,0,0,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "5") (term "1,1,1,0,0,0,1,0,0,0,1"))
(rule "nnf_imp2or" (formula "5") (term "0,1,1,1,1,1,0,0,0,1"))
(rule "nnf_notAnd" (formula "5") (term "0,0,0,1,1,1,0,0,0,1"))
(rule "inEqSimp_notLeq" (formula "5") (term "1,0,0,0,1,1,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "5") (term "1,0,0,1,0,0,0,1,1,1,0,0,0,1"))
(rule "mul_literals" (formula "5") (term "0,1,0,0,1,0,0,0,1,1,1,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "5") (term "0,0,1,0,0,0,1,1,1,0,0,0,1"))
(rule "add_literals" (formula "5") (term "0,0,0,1,0,0,0,1,1,1,0,0,0,1"))
(rule "add_zero_left" (formula "5") (term "0,0,1,0,0,0,1,1,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "5") (term "1,0,0,0,1,1,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0,0,1,1,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "5") (term "1,1,0,0,0,1,1,1,0,0,0,1"))
(rule "inEqSimp_notGeq" (formula "5") (term "0,0,0,0,1,1,1,0,0,0,1"))
(rule "times_zero_1" (formula "5") (term "1,0,0,0,0,0,0,1,1,1,0,0,0,1"))
(rule "add_zero_right" (formula "5") (term "0,0,0,0,0,0,1,1,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0,0,1,1,1,0,0,0,1"))
(rule "mul_literals" (formula "5") (term "1,0,0,0,0,1,1,1,0,0,0,1"))
(rule "nnf_notAnd" (formula "5") (term "0,0,1,1,1,1,1,0,0,0,1"))
(rule "inEqSimp_notLeq" (formula "5") (term "1,0,0,1,1,1,1,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "5") (term "1,0,0,1,0,0,1,1,1,1,1,0,0,0,1"))
(rule "mul_literals" (formula "5") (term "0,1,0,0,1,0,0,1,1,1,1,1,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "5") (term "0,0,1,0,0,1,1,1,1,1,0,0,0,1"))
(rule "add_literals" (formula "5") (term "0,0,0,1,0,0,1,1,1,1,1,0,0,0,1"))
(rule "add_zero_left" (formula "5") (term "0,0,1,0,0,1,1,1,1,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "5") (term "1,0,0,1,1,1,1,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0,1,1,1,1,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "5") (term "1,1,0,0,1,1,1,1,1,0,0,0,1"))
(rule "inEqSimp_notGeq" (formula "5") (term "0,0,0,1,1,1,1,1,0,0,0,1"))
(rule "times_zero_1" (formula "5") (term "1,0,0,0,0,0,1,1,1,1,1,0,0,0,1"))
(rule "add_zero_right" (formula "5") (term "0,0,0,0,0,1,1,1,1,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0,1,1,1,1,1,0,0,0,1"))
(rule "mul_literals" (formula "5") (term "1,0,0,0,1,1,1,1,1,0,0,0,1"))
(rule "commute_or_2" (formula "3") (term "0"))
(rule "commute_or" (formula "3") (term "0,0"))
(rule "methodBodyExpand" (formula "5") (term "1") (newnames "heapBefore_retrieveSortedMessages,savedHeapBefore_retrieveSortedMessages"))
(builtin "One Step Simplification" (formula "5"))
(rule "variableDeclarationAssign" (formula "5") (term "1"))
(rule "variableDeclaration" (formula "5") (term "1") (newnames "result_1"))
(rule "methodCallWithAssignmentUnfoldArguments" (formula "5") (term "1"))
(rule "variableDeclarationAssign" (formula "5") (term "1"))
(rule "variableDeclaration" (formula "5") (term "1") (newnames "var"))
(rule "activeUseStaticFieldReadAccess" (formula "5") (term "1"))
(rule "assignment_read_static_attribute" (formula "5") (term "1"))
(builtin "One Step Simplification" (formula "5"))
(builtin "Use Operation Contract" (formula "5") (newnames "heapBefore_copyOf,result_0,exc_0,heapAfter_copyOf,anon_heap_copyOf") (contract "verif.selectvoting.system.core.ConservativeExtension[verif.selectvoting.system.core.ConservativeExtension::copyOf([[B)].JML normal_behavior operation contract.0"))
(branch "Post (copyOf)"
   (builtin "One Step Simplification" (formula "5"))
   (builtin "One Step Simplification" (formula "7"))
   (rule "andLeft" (formula "5"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "6") (term "1,1,0") (ifseqformula "5"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "9"))
   (rule "notLeft" (formula "10"))
   (rule "notLeft" (formula "9"))
   (rule "eqSymm" (formula "8"))
   (rule "replace_known_right" (formula "7") (term "0,1") (ifseqformula "10"))
   (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "11")))
   (rule "assignment" (formula "13") (term "1"))
   (builtin "One Step Simplification" (formula "13"))
   (rule "blockEmpty" (formula "13") (term "1"))
   (rule "nonNull" (formula "9") (inst "i=i"))
   (rule "greater_literals" (formula "9") (term "0,1"))
   (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "11")))
   (rule "sub_literals" (formula "9") (term "2,1,0"))
   (builtin "One Step Simplification" (formula "9"))
   (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
   (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
   (rule "nnf_imp2or" (formula "9") (term "0"))
   (rule "nnf_notAnd" (formula "9") (term "0,0"))
   (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "9") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "9") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0"))
   (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0"))
   (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0"))
   (rule "add_literals" (formula "9") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
   (rule "mul_literals" (formula "9") (term "1,0,0,0"))
   (rule "commute_or_2" (formula "9") (term "0"))
   (rule "commute_or" (formula "9") (term "0,0"))
   (rule "methodCallUnfoldArguments" (formula "13") (term "1"))
   (rule "variableDeclarationAssign" (formula "13") (term "1"))
   (rule "variableDeclaration" (formula "13") (term "1") (newnames "var_1"))
   (rule "assignment" (formula "13") (term "1"))
   (builtin "One Step Simplification" (formula "13"))
   (rule "variableDeclarationAssign" (formula "13") (term "1"))
   (rule "variableDeclaration" (formula "13") (term "1") (newnames "var_2"))
   (rule "assignment" (formula "13") (term "1"))
   (builtin "One Step Simplification" (formula "13"))
   (rule "variableDeclarationAssign" (formula "13") (term "1"))
   (rule "variableDeclaration" (formula "13") (term "1") (newnames "var_3"))
   (rule "assignment_read_length" (formula "13") (term "1"))
   (branch "Normal Execution (result_1 != null)"
      (builtin "One Step Simplification" (formula "14"))
      (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "11")))
      (rule "false_right" (formula "13"))
      (builtin "Use Operation Contract" (formula "13") (newnames "heapBefore_sort,exc_1,heapAfter_sort,anon_heap_sort") (contract "verif.selectvoting.system.core.ConservativeExtension[verif.selectvoting.system.core.ConservativeExtension::sort([[B,int,int)].JML normal_behavior operation contract.0"))
      (branch "Post (sort)"
         (builtin "One Step Simplification" (formula "11"))
         (builtin "One Step Simplification" (formula "15"))
         (rule "translateJavaSubInt" (formula "11") (term "1,1,0,0,0,1,0,1,1"))
         (rule "translateJavaAddInt" (formula "11") (term "0,2,2,0,1,0,0,1,0,1,1"))
         (rule "andLeft" (formula "11"))
         (rule "andLeft" (formula "12"))
         (rule "andLeft" (formula "13"))
         (rule "andLeft" (formula "13"))
         (rule "andLeft" (formula "14"))
         (rule "polySimp_elimSub" (formula "14") (term "1,1,0,0"))
         (rule "mul_literals" (formula "14") (term "1,1,1,0,0"))
         (rule "polySimp_addComm0" (formula "14") (term "0,2,2,0,1,0"))
         (rule "polySimp_addComm0" (formula "14") (term "1,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "14") (term "0,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
         (rule "blockEmpty" (formula "19") (term "1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
         (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
         (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
         (rule "array2seqDef" (formula "13") (term "0") (inst "u=u"))
         (rule "array2seqDef" (formula "13") (term "1") (inst "u=u"))
         (rule "nnf_imp2or" (formula "15") (term "0"))
         (rule "nnf_imp2or" (formula "14") (term "0"))
         (rule "nnf_notAnd" (formula "15") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "15") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "15") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0"))
         (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0"))
         (rule "add_literals" (formula "15") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
         (rule "mul_literals" (formula "15") (term "1,0,0,0"))
         (rule "nnf_notAnd" (formula "14") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "14") (term "0,0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0"))
         (rule "times_zero_1" (formula "14") (term "1,0,0,0,0,0"))
         (rule "add_literals" (formula "14") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0"))
         (rule "mul_literals" (formula "14") (term "1,0,0,0"))
         (rule "commute_or_2" (formula "15") (term "0"))
         (rule "commute_or" (formula "15") (term "0,0"))
         (rule "methodCallReturn" (formula "19") (term "1"))
         (rule "assignment" (formula "19") (term "1"))
         (builtin "One Step Simplification" (formula "19"))
         (rule "methodCallEmpty" (formula "19") (term "1"))
         (rule "tryEmpty" (formula "19") (term "1"))
         (rule "emptyModality" (formula "19") (term "1"))
         (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "14")) (ifInst ""  (formula "16")) (ifInst ""  (formula "17")) (ifInst ""  (formula "17")))
         (rule "andRight" (formula "19") (userinteraction))
         (branch "Case 1"
            (rule "andRight" (formula "19") (userinteraction))
            (branch "Case 1"
               (rule "pullOut" (formula "13") (term "0") (inst "sk=seqDef_0") (userinteraction))
               (rule "pullOut" (formula "14") (term "1") (inst "sk=seqDef_1") (userinteraction))
               (rule "cut" (inst "cutFormula=seqDef_0 = array2seq(heapAfter_sort, result_0)") (userinteraction))
               (branch "CUT: seqDef_0 = array2seq(heapAfter_sort, result_0) TRUE"
                  (rule "applyEq" (formula "16") (term "0") (ifseqformula "1") (userinteraction))
                  (rule "cut" (inst "cutFormula=seqDef_1 = array2seq(heapAfter_copyOf, result_0)") (userinteraction))
                  (branch "CUT: seqDef_1 = array2seq(heapAfter_copyOf, result_0) TRUE"
                     (rule "applyEq" (formula "17") (term "1") (ifseqformula "1") (userinteraction))
                     (rule "cut" (inst "cutFormula=  array2seq2d(heapAfter_copyOf,
              byte[][]::select(heap,
                               null,
                               verif.selectvoting.system.core.ConservativeExtension::$messages))
= array2seq2d(heapAfter_copyOf,
              byte[][]::select(heapAfter_copyOf,
                               null,
                               verif.selectvoting.system.core.ConservativeExtension::$messages))") (userinteraction))
                     (branch "CUT: array2seq2d(heapAfter_copyOf, verif.selectvoting.system.core.ConservativeExtension.messages) = array2seq2d(heapAfter_copyOf, verif.selectvoting.system.core.ConservativeExtension.messages@heapAfter_copyOf) TRUE"
                        (rule "cut" (inst "cutFormula=  array2seq2d(heapAfter_copyOf,
              byte[][]::select(heap,
                               null,
                               verif.selectvoting.system.core.ConservativeExtension::$messages))
= array2seq2d(heap,
              byte[][]::select(heap,
                               null,
                               verif.selectvoting.system.core.ConservativeExtension::$messages))") (userinteraction))
                        (branch "CUT: array2seq2d(heapAfter_copyOf, verif.selectvoting.system.core.ConservativeExtension.messages) = array2seq2d(heap, verif.selectvoting.system.core.ConservativeExtension.messages) TRUE"
                           (rule "applyEqReverse" (formula "25") (term "1") (ifseqformula "1") (userinteraction))
                           (rule "array2seq2dDef" (formula "12") (term "0") (inst "u=u") (userinteraction))
                           (rule "array2seq2dDef" (formula "12") (term "1") (inst "u=u") (userinteraction))
                           (rule "cut" (inst "cutFormula=seqPerm(array2seq2d(heapAfter_sort, result_0),
        array2seq2d(heapAfter_copyOf, result_0))") (userinteraction))
                           (branch "CUT: seqPerm(array2seq2d(heapAfter_sort, result_0), array2seq2d(heapAfter_copyOf, result_0)) TRUE"
                              (rule "array2seq2dDef" (formula "1") (term "0") (inst "u=u") (userinteraction))
                              (rule "array2seq2dDef" (formula "1") (term "1") (inst "u=u") (userinteraction))
                              (rule "array2seq2dDef" (formula "26") (term "0") (inst "u=u") (userinteraction))
                              (rule "array2seq2dDef" (formula "26") (term "1") (inst "u=u") (userinteraction))
                              (rule "applyEqReverse" (formula "1") (term "1") (ifseqformula "13") (userinteraction))
                              (rule "closeAntec" (formula "1") (ifseqformula "26") (userinteraction))
                           )
                           (branch "CUT: seqPerm(array2seq2d(heapAfter_sort, result_0), array2seq2d(heapAfter_copyOf, result_0)) FALSE"
                              (rule "array2seq2dDef" (formula "22") (term "0") (inst "u=u") (userinteraction))
                              (rule "array2seq2dDef" (formula "22") (term "1") (inst "u=u") (userinteraction))
                              (rule "array2seqDef" (formula "19") (term "0") (inst "u=u") (userinteraction))
                              (rule "array2seqDef" (formula "19") (term "1") (inst "u=u") (userinteraction))
                              (rule "seqPermDefLeft" (formula "19") (inst "iv=iv") (inst "s=s") (userinteraction))
                              (rule "andLeft" (formula "19") (userinteraction))
                              (rule "seqPermDef" (formula "24") (inst "iv=iv") (inst "s=s") (userinteraction))
                              (rule "andRight" (formula "24") (userinteraction))
                              (branch "Case 1"
                                 (rule "exLeft" (formula "20") (inst "sk=s_0"))
                                 (rule "andLeft" (formula "20"))
                                 (rule "andLeft" (formula "20"))
                                 (rule "eqSymm" (formula "3"))
                                 (rule "eqSymm" (formula "4"))
                                 (rule "eqSymm" (formula "2"))
                                 (rule "eqSymm" (formula "20"))
                                 (rule "lenOfSeqDef" (formula "26") (term "1"))
                                 (rule "polySimp_elimSub" (formula "26") (term "1,1"))
                                 (rule "mul_literals" (formula "26") (term "1,1,1"))
                                 (rule "add_zero_right" (formula "26") (term "1,1"))
                                 (rule "lenOfSeqDef" (formula "26") (term "0"))
                                 (rule "polySimp_elimSub" (formula "26") (term "1,0"))
                                 (rule "times_zero_2" (formula "26") (term "1,1,0"))
                                 (rule "add_zero_right" (formula "26") (term "1,0"))
                                 (builtin "One Step Simplification" (formula "26"))
                                 (rule "closeTrue" (formula "26"))
                              )
                              (branch "Case 2"
                                 (rule "exLeft" (formula "20") (inst "sk=s_1") (userinteraction))
                                 (rule "andLeft" (formula "20") (userinteraction))
                                 (rule "andLeft" (formula "20") (userinteraction))
                                 (rule "instEx" (formula "21") (term "0") (ifseqformula "26") (userinteraction))
                                 (rule "andRight" (formula "26") (userinteraction))
                                 (branch "Case 1"
                                    (rule "seqNPermRange" (formula "21") (inst "iv=iv") (userinteraction))
                                    (rule "eqSymm" (formula "2"))
                                    (rule "eqSymm" (formula "28") (term "1,0,1,0"))
                                    (rule "eqSymm" (formula "27") (term "0"))
                                    (rule "eqSymm" (formula "20"))
                                    (rule "eqSymm" (formula "3"))
                                    (rule "eqSymm" (formula "4"))
                                    (rule "replace_known_left" (formula "27") (term "1") (ifseqformula "22"))
                                    (builtin "One Step Simplification" (formula "27"))
                                    (rule "getOfSeqDef" (formula "23") (term "1,1,0"))
                                    (rule "castDel" (formula "23") (term "1,1,1,0"))
                                    (rule "castDel" (formula "23") (term "2,1,1,0"))
                                    (rule "add_zero_right" (formula "23") (term "0,2,1,1,1,0"))
                                    (rule "polySimp_elimSub" (formula "23") (term "1,1,0,1,1,0"))
                                    (rule "times_zero_2" (formula "23") (term "1,1,1,0,1,1,0"))
                                    (rule "add_zero_right" (formula "23") (term "1,1,0,1,1,0"))
                                    (rule "lenOfSeqDef" (formula "19") (term "0"))
                                    (rule "eqSymm" (formula "19"))
                                    (rule "polySimp_elimSub" (formula "19") (term "1,1"))
                                    (rule "times_zero_2" (formula "19") (term "1,1,1"))
                                    (rule "add_zero_right" (formula "19") (term "1,1"))
                                    (rule "getOfSeqDef" (formula "23") (term "0,1,0"))
                                    (rule "castDel" (formula "23") (term "2,0,1,0"))
                                    (rule "castDel" (formula "23") (term "1,0,1,0"))
                                    (rule "add_zero_right" (formula "23") (term "0,2,1,0,1,0"))
                                    (rule "eqSymm" (formula "23") (term "1,0"))
                                    (rule "polySimp_elimSub" (formula "23") (term "1,1,0,1,1,0"))
                                    (rule "mul_literals" (formula "23") (term "1,1,1,0,1,1,0"))
                                    (rule "add_zero_right" (formula "23") (term "1,1,0,1,1,0"))
                                    (rule "lenOfSeqDef" (formula "28") (term "1,0,0,0"))
                                    (rule "polySimp_elimSub" (formula "28") (term "1,1,0,0,0"))
                                    (rule "times_zero_2" (formula "28") (term "1,1,1,0,0,0"))
                                    (rule "add_zero_right" (formula "28") (term "1,1,0,0,0"))
                                    (rule "getOfSeqDef" (formula "28") (term "1,1,0,1,0"))
                                    (rule "castDel" (formula "28") (term "1,1,1,0,1,0"))
                                    (rule "castDel" (formula "28") (term "2,1,1,0,1,0"))
                                    (rule "add_zero_right" (formula "28") (term "0,2,1,1,1,1,0,1,0"))
                                    (rule "polySimp_elimSub" (formula "28") (term "1,1,0,1,1,0,1,0"))
                                    (rule "times_zero_2" (formula "28") (term "1,1,1,0,1,1,0,1,0"))
                                    (rule "add_zero_right" (formula "28") (term "1,1,0,1,1,0,1,0"))
                                    (rule "getOfSeqDef" (formula "28") (term "0,1,0,1,0"))
                                    (rule "castDel" (formula "28") (term "1,0,1,0,1,0"))
                                    (rule "castDel" (formula "28") (term "2,0,1,0,1,0"))
                                    (rule "add_zero_right" (formula "28") (term "0,2,1,1,0,1,0,1,0"))
                                    (rule "polySimp_elimSub" (formula "28") (term "1,1,0,0,1,0,1,0"))
                                    (rule "times_zero_2" (formula "28") (term "1,1,1,0,0,1,0,1,0"))
                                    (rule "add_zero_right" (formula "28") (term "1,1,0,0,1,0,1,0"))
                                    (rule "lenOfSeqDef" (formula "20") (term "0"))
                                    (rule "polySimp_elimSub" (formula "20") (term "1,0"))
                                    (rule "times_zero_2" (formula "20") (term "1,1,0"))
                                    (rule "add_zero_right" (formula "20") (term "1,0"))
                                    (rule "lenOfSeqDef" (formula "27") (term "0"))
                                    (rule "polySimp_elimSub" (formula "27") (term "1,0"))
                                    (rule "times_zero_2" (formula "27") (term "1,1,0"))
                                    (rule "add_zero_right" (formula "27") (term "1,0"))
                                    (rule "close" (formula "27") (ifseqformula "20"))
                                 )
                                 (branch "Case 2"
                                    (rule "allRight" (formula "26") (inst "sk=iv_3") (userinteraction))
                                    (rule "impRight" (formula "26") (userinteraction))
                                    (rule "instAll" (formula "1") (term "1,0") (ifseqformula "23") (userinteraction))
                                    (rule "impLeft" (formula "1") (userinteraction))
                                    (branch "Case 1"
                                       (rule "closeAntec" (formula "1") (ifseqformula "27") (userinteraction))
                                    )
                                    (branch "Case 2"
                                       (rule "getOfSeqDef" (formula "1") (term "0") (userinteraction))
                                       (rule "ifthenelse_split" (formula "1") (term "0") (userinteraction))
                                       (branch "0 <= iv_3 & iv_3 < result_0.length - 0 TRUE"
                                          (rule "castDel" (formula "2") (term "0") (userinteraction))
                                          (rule "add_zero_right" (formula "2") (term "0,2,0") (userinteraction))
                                          (rule "getOfSeqDef" (formula "2") (term "1") (userinteraction))
                                          (rule "ifthenelse_split" (formula "2") (term "1") (userinteraction))
                                          (branch " 0 <= (int)s_1[iv_3] & (int)s_1[iv_3] < result_0.length - 0 TRUE"
                                             (rule "andLeft" (formula "2") (userinteraction))
                                             (rule "andLeft" (formula "1") (userinteraction))
                                             (rule "castDel" (formula "5") (term "1") (userinteraction))
                                             (rule "add_zero_right" (formula "5") (term "0,2,1") (userinteraction))
                                             (rule "sub_zero_2" (formula "2") (term "1") (userinteraction))
                                             (rule "sub_zero_2" (formula "4") (term "1") (userinteraction))
                                             (rule "andLeft" (formula "6"))
                                             (rule "eqSymm" (formula "10"))
                                             (rule "eqSymm" (formula "33") (term "1,0,1,0"))
                                             (rule "eqSymm" (formula "26"))
                                             (rule "eqSymm" (formula "8"))
                                             (rule "eqSymm" (formula "9"))
                                             (rule "getOfSeqDef" (formula "28") (term "1,1,0"))
                                             (rule "castDel" (formula "28") (term "1,1,1,0"))
                                             (rule "castDel" (formula "28") (term "2,1,1,0"))
                                             (rule "add_zero_right" (formula "28") (term "0,2,1,1,1,0"))
                                             (rule "polySimp_elimSub" (formula "28") (term "1,1,0,1,1,0"))
                                             (rule "times_zero_2" (formula "28") (term "1,1,1,0,1,1,0"))
                                             (rule "add_zero_right" (formula "28") (term "1,1,0,1,1,0"))
                                             (rule "getOfSeqDef" (formula "32") (term "1"))
                                             (rule "castDel" (formula "32") (term "2,1"))
                                             (rule "castDel" (formula "32") (term "1,1"))
                                             (rule "add_zero_right" (formula "32") (term "0,2,1,1,1"))
                                             (rule "replace_known_left" (formula "32") (term "0,0,1") (ifseqformula "3"))
                                             (builtin "One Step Simplification" (formula "32"))
                                             (rule "polySimp_elimSub" (formula "32") (term "1,0,1"))
                                             (rule "times_zero_2" (formula "32") (term "1,1,0,1"))
                                             (rule "add_zero_right" (formula "32") (term "1,0,1"))
                                             (rule "replace_known_left" (formula "32") (term "0,1") (ifseqformula "4"))
                                             (builtin "One Step Simplification" (formula "32"))
                                             (rule "lenOfSeqDef" (formula "25") (term "0"))
                                             (rule "eqSymm" (formula "25"))
                                             (rule "polySimp_elimSub" (formula "25") (term "1,1"))
                                             (rule "times_zero_2" (formula "25") (term "1,1,1"))
                                             (rule "add_zero_right" (formula "25") (term "1,1"))
                                             (rule "getOfSeqDef" (formula "28") (term "0,1,0"))
                                             (rule "castDel" (formula "28") (term "1,0,1,0"))
                                             (rule "castDel" (formula "28") (term "2,0,1,0"))
                                             (rule "add_zero_right" (formula "28") (term "0,2,1,0,1,0"))
                                             (rule "eqSymm" (formula "28") (term "1,0"))
                                             (rule "polySimp_elimSub" (formula "28") (term "1,1,0,1,1,0"))
                                             (rule "mul_literals" (formula "28") (term "1,1,1,0,1,1,0"))
                                             (rule "add_zero_right" (formula "28") (term "1,1,0,1,1,0"))
                                             (rule "lenOfSeqDef" (formula "33") (term "1,0,0,0"))
                                             (rule "polySimp_elimSub" (formula "33") (term "1,1,0,0,0"))
                                             (rule "times_zero_2" (formula "33") (term "1,1,1,0,0,0"))
                                             (rule "add_zero_right" (formula "33") (term "1,1,0,0,0"))
                                             (rule "getOfSeqDef" (formula "33") (term "0,1,0,1,0"))
                                             (rule "castDel" (formula "33") (term "2,0,1,0,1,0"))
                                             (rule "castDel" (formula "33") (term "1,0,1,0,1,0"))
                                             (rule "add_zero_right" (formula "33") (term "0,2,1,1,0,1,0,1,0"))
                                             (rule "polySimp_elimSub" (formula "33") (term "1,1,0,0,1,0,1,0"))
                                             (rule "times_zero_2" (formula "33") (term "1,1,1,0,0,1,0,1,0"))
                                             (rule "add_zero_right" (formula "33") (term "1,1,0,0,1,0,1,0"))
                                             (rule "getOfSeqDef" (formula "33") (term "1,1,0,1,0"))
                                             (rule "castDel" (formula "33") (term "2,1,1,0,1,0"))
                                             (rule "castDel" (formula "33") (term "1,1,1,0,1,0"))
                                             (rule "add_zero_right" (formula "33") (term "0,2,1,1,1,1,0,1,0"))
                                             (rule "polySimp_elimSub" (formula "33") (term "1,1,0,1,1,0,1,0"))
                                             (rule "times_zero_2" (formula "33") (term "1,1,1,0,1,1,0,1,0"))
                                             (rule "add_zero_right" (formula "33") (term "1,1,0,1,1,0,1,0"))
                                             (rule "lenOfSeqDef" (formula "26") (term "0"))
                                             (rule "polySimp_elimSub" (formula "26") (term "1,0"))
                                             (rule "times_zero_2" (formula "26") (term "1,1,0"))
                                             (rule "add_zero_right" (formula "26") (term "1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "2"))
                                             (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                             (rule "polySimp_addComm1" (formula "2") (term "0"))
                                             (rule "inEqSimp_ltToLeq" (formula "28") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "4"))
                                             (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "33") (term "1,0,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0,0,1,0"))
                                             (rule "polySimp_addComm1" (formula "33") (term "0,1,0,0,1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "6"))
                                             (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
                                             (rule "polySimp_addComm1" (formula "6") (term "0"))
                                             (rule "getOfSeqDef" (formula "32") (term "0"))
                                             (rule "castDel" (formula "32") (term "1,0"))
                                             (rule "castDel" (formula "32") (term "2,0"))
                                             (rule "add_zero_right" (formula "32") (term "0,2,1,1,0"))
                                             (rule "replace_known_left" (formula "32") (term "0,0,0") (ifseqformula "1"))
                                             (builtin "One Step Simplification" (formula "32"))
                                             (rule "polySimp_elimSub" (formula "32") (term "1,0,0"))
                                             (rule "times_zero_2" (formula "32") (term "1,1,0,0"))
                                             (rule "add_zero_right" (formula "32") (term "1,0,0"))
                                             (rule "lenOfSeqDef" (formula "25") (term "0"))
                                             (rule "polySimp_elimSub" (formula "25") (term "1,0"))
                                             (rule "times_zero_2" (formula "25") (term "1,1,0"))
                                             (rule "add_zero_right" (formula "25") (term "1,0"))
                                             (builtin "One Step Simplification" (formula "25"))
                                             (rule "true_left" (formula "25"))
                                             (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0,1,0"))
                                             (rule "eqSymm" (formula "27") (term "1,0"))
                                             (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,1,1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "32") (term "0,1,0,0,0"))
                                             (rule "add_zero_right" (formula "32") (term "0,0,1,0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "1"))
                                             (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "3"))
                                             (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0,0,1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "32") (term "1,0,0,1,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,0,1,0,1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "32") (term "1,0,1,1,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,1,1,0,1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "25") (term "0,0"))
                                             (rule "add_zero_right" (formula "25") (term "0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "31") (term "0,0"))
                                             (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,0,0"))
                                             (rule "polySimp_addComm1" (formula "31") (term "0,0,0"))
                                             (rule "replace_known_left" (formula "31") (term "0,0") (ifseqformula "2"))
                                             (builtin "One Step Simplification" (formula "31"))
                                             (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0,0,1,0,1,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0,1,1,0,1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0,1,0"))
                                             (rule "eqSymm" (formula "27") (term "1,0"))
                                             (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,1,1,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,1,1,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0,1,0"))
                                             (rule "applyEq" (formula "36") (term "1") (ifseqformula "7"))
                                             (rule "applyEq" (formula "8") (term "1") (ifseqformula "7"))
                                             (rule "applyEq" (formula "32") (term "1,0,0,0") (ifseqformula "25"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                             (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                             (rule "polySimp_elimOne" (formula "2") (term "0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0"))
                                             (rule "mul_literals" (formula "27") (term "0,1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                                             (rule "polySimp_mulComm0" (formula "4") (term "1"))
                                             (rule "polySimp_rightDist" (formula "4") (term "1"))
                                             (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                                             (rule "mul_literals" (formula "4") (term "0,1"))
                                             (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "32") (term "1,0,0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "32") (term "0,1,0,0,1,0"))
                                             (rule "polySimp_elimOne" (formula "32") (term "0,1,0,0,1,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "6"))
                                             (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                                             (rule "polySimp_elimOne" (formula "6") (term "0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0,1,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,0,1,0,1,0"))
                                             (rule "polySimp_rightDist" (formula "32") (term "1,1,0,0,1,0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,0,1,0,1,0"))
                                             (rule "mul_literals" (formula "32") (term "0,1,1,0,0,1,0,1,0"))
                                             (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,0,1,0,1,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,1,1,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,1,1,0,1,0"))
                                             (rule "polySimp_rightDist" (formula "32") (term "1,1,0,1,1,0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,1,1,0,1,0"))
                                             (rule "mul_literals" (formula "32") (term "0,1,1,0,1,1,0,1,0"))
                                             (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,1,1,0,1,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "25") (term "0,0"))
                                             (rule "polySimp_mulLiterals" (formula "25") (term "0,0,0"))
                                             (rule "polySimp_elimOne" (formula "25") (term "0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0,1,0"))
                                             (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0,1,0"))
                                             (rule "mul_literals" (formula "27") (term "0,1,1,0,0,1,0"))
                                             (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0,1,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,1,1,0"))
                                             (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,1,1,0"))
                                             (rule "polySimp_rightDist" (formula "27") (term "1,1,0,1,1,0"))
                                             (rule "mul_literals" (formula "27") (term "0,1,1,0,1,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,1,1,0"))
                                             (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,1,1,0"))
                                             (rule "array2seqDef" (formula "18") (term "2,0") (inst "u=u_1"))
                                             (rule "array2seqDef" (formula "18") (term "2,1") (inst "u=u_1"))
                                             (rule "array2seqDef" (formula "10") (term "0") (inst "u=u"))
                                             (rule "array2seqDef" (formula "9") (term "0") (inst "u=u"))
                                             (rule "array2seqDef" (formula "30") (term "1,0,1,0,1,0") (inst "u=u"))
                                             (rule "array2seqDef" (formula "30") (term "1,1,1,0,1,0") (inst "u=u"))
                                             (rule "pullOutSelect" (formula "5") (term "0") (inst "selectSK=arr_55"))
                                             (rule "simplifySelectOfAnonEQ" (formula "5") (ifseqformula "20"))
                                             (builtin "One Step Simplification" (formula "5"))
                                             (rule "applyEqReverse" (formula "6") (term "0") (ifseqformula "5"))
                                             (rule "hideAuxiliaryEq" (formula "5"))
                                             (rule "eqSymm" (formula "5"))
                                             (rule "narrowSelectArrayType" (formula "5") (term "1") (ifseqformula "18") (ifseqformula "32"))
                                             (rule "pullOutSelect" (formula "8") (term "1,0") (inst "selectSK=verif_selectvoting_system_core_ConservativeExtension_messages_11"))
                                             (rule "simplifySelectOfAnonEQ" (formula "8") (ifseqformula "14"))
                                             (builtin "One Step Simplification" (formula "8"))
                                             (rule "applyEqReverse" (formula "9") (term "1,0") (ifseqformula "8"))
                                             (rule "hideAuxiliaryEq" (formula "8"))
                                             (rule "array2seqDef" (formula "28") (term "1") (inst "u=u"))
                                             (rule "eqSymm" (formula "28"))
                                             (rule "eqSeqDef2" (formula "20") (inst "iv=iv") (ifseqformula "20"))
                                             (builtin "One Step Simplification" (formula "20"))
                                             (rule "true_left" (formula "20"))
                                             (rule "eqSeqDef2" (formula "20") (inst "iv=iv") (ifseqformula "20"))
                                             (builtin "One Step Simplification" (formula "20"))
                                             (rule "true_left" (formula "20"))
                                             (rule "eqSeqDef" (formula "15") (inst "iv=iv"))
                                             (rule "andLeft" (formula "15"))
                                             (rule "lenOfSeqDef" (formula "15") (term "1"))
                                             (rule "polySimp_elimSub" (formula "15") (term "1,1"))
                                             (rule "mul_literals" (formula "15") (term "1,1,1"))
                                             (rule "add_zero_right" (formula "15") (term "1,1"))
                                             (rule "getOfSeqDef" (formula "16") (term "0,1,0"))
                                             (rule "castDel" (formula "16") (term "2,0,1,0"))
                                             (rule "castDel" (formula "16") (term "1,0,1,0"))
                                             (rule "add_zero_right" (formula "16") (term "0,2,1,2,1,0,1,0"))
                                             (rule "add_zero_right" (formula "16") (term "0,2,0,1,1,0,1,0"))
                                             (rule "polySimp_elimSub" (formula "16") (term "1,1,0,0,1,0"))
                                             (rule "times_zero_2" (formula "16") (term "1,1,1,0,0,1,0"))
                                             (rule "add_zero_right" (formula "16") (term "1,1,0,0,1,0"))
                                             (rule "getOfSeqDef" (formula "16") (term "1,1,0"))
                                             (rule "castDel" (formula "16") (term "2,1,1,0"))
                                             (rule "castDel" (formula "16") (term "1,1,1,0"))
                                             (rule "add_zero_right" (formula "16") (term "0,2,1,2,1,1,1,0"))
                                             (rule "add_zero_right" (formula "16") (term "0,2,0,1,1,1,1,0"))
                                             (rule "polySimp_elimSub" (formula "16") (term "1,1,0,1,1,0"))
                                             (rule "mul_literals" (formula "16") (term "1,1,1,0,1,1,0"))
                                             (rule "add_zero_right" (formula "16") (term "1,1,0,1,1,0"))
                                             (rule "lenOfSeqDef" (formula "15") (term "0"))
                                             (rule "polySimp_elimSub" (formula "15") (term "1,0"))
                                             (rule "times_zero_2" (formula "15") (term "1,1,0"))
                                             (rule "add_zero_right" (formula "15") (term "1,0"))
                                             (rule "lenOfSeqDef" (formula "16") (term "1,1,0,0"))
                                             (rule "polySimp_elimSub" (formula "16") (term "1,1,1,0,0"))
                                             (rule "mul_literals" (formula "16") (term "1,1,1,1,0,0"))
                                             (rule "add_zero_right" (formula "16") (term "1,1,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "15") (term "0,1"))
                                             (rule "add_zero_right" (formula "15") (term "0,0,1"))
                                             (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1"))
                                             (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0,1,0"))
                                             (rule "eqSymm" (formula "16") (term "1,0"))
                                             (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,1,1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0"))
                                             (rule "add_zero_right" (formula "15") (term "0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "16") (term "0,1,1,0,0"))
                                             (rule "add_zero_right" (formula "16") (term "0,0,1,1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0,1,0"))
                                             (rule "eqSymm" (formula "16") (term "1,0"))
                                             (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,1,1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0,1,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,1,1,0"))
                                             (rule "applyEq" (formula "16") (term "0,1,0,0,1,0,0") (ifseqformula "15"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0,1"))
                                             (rule "polySimp_mulLiterals" (formula "15") (term "0,0,1"))
                                             (rule "polySimp_elimOne" (formula "15") (term "0,0,1"))
                                             (rule "applyEq" (formula "15") (term "1") (ifseqformula "21"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0,0"))
                                             (rule "polySimp_mulLiterals" (formula "15") (term "0,0,0"))
                                             (rule "polySimp_elimOne" (formula "15") (term "0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0,1,0"))
                                             (rule "eqSymm" (formula "16") (term "1,0"))
                                             (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,1,1,0"))
                                             (rule "polySimp_rightDist" (formula "16") (term "1,1,0,1,1,0"))
                                             (rule "mul_literals" (formula "16") (term "0,1,1,0,1,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,1,1,0"))
                                             (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,1,1,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0"))
                                             (rule "mul_literals" (formula "16") (term "0,1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0,1,0"))
                                             (rule "eqSymm" (formula "16") (term "1,0"))
                                             (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,1,1,0"))
                                             (rule "polySimp_rightDist" (formula "16") (term "1,1,0,1,1,0"))
                                             (rule "mul_literals" (formula "16") (term "0,1,1,0,1,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,1,1,0"))
                                             (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,1,1,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "0,1,1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "16") (term "0,0,1,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "16") (term "0,0,1,1,1,0,0"))
                                             (rule "applyEq" (formula "16") (term "1,1,1,0,0") (ifseqformula "21"))
                                             (rule "array2seqDef" (formula "27") (term "1") (inst "u=u"))
                                             (rule "eqSymm" (formula "27"))
                                             (rule "equalityToSeqGetAndSeqLenRight" (formula "27") (inst "iv=iv"))
                                             (rule "lenOfSeqDef" (formula "27") (term "1,1,0,0,1"))
                                             (rule "polySimp_elimSub" (formula "27") (term "1,1,1,0,0,1"))
                                             (rule "times_zero_2" (formula "27") (term "1,1,1,1,0,0,1"))
                                             (rule "add_zero_right" (formula "27") (term "1,1,1,0,0,1"))
                                             (rule "getOfSeqDef" (formula "27") (term "1,1,0,1"))
                                             (rule "castDel" (formula "27") (term "1,1,1,0,1"))
                                             (rule "castDel" (formula "27") (term "2,1,1,0,1"))
                                             (rule "add_zero_right" (formula "27") (term "0,2,1,1,1,0,1"))
                                             (rule "polySimp_elimSub" (formula "27") (term "1,1,0,1,1,0,1"))
                                             (rule "times_zero_2" (formula "27") (term "1,1,1,0,1,1,0,1"))
                                             (rule "add_zero_right" (formula "27") (term "1,1,0,1,1,0,1"))
                                             (rule "lenOfSeqDef" (formula "27") (term "1,0"))
                                             (rule "polySimp_elimSub" (formula "27") (term "1,1,0"))
                                             (rule "times_zero_2" (formula "27") (term "1,1,1,0"))
                                             (rule "add_zero_right" (formula "27") (term "1,1,0"))
                                             (rule "getOfSeqDef" (formula "27") (term "0,1,0,1"))
                                             (rule "castDel" (formula "27") (term "1,0,1,0,1"))
                                             (rule "castDel" (formula "27") (term "2,0,1,0,1"))
                                             (rule "add_zero_right" (formula "27") (term "0,2,1,0,1,0,1"))
                                             (rule "eqSymm" (formula "27") (term "1,0,1"))
                                             (rule "polySimp_elimSub" (formula "27") (term "1,1,0,1,1,0,1"))
                                             (rule "times_zero_2" (formula "27") (term "1,1,1,0,1,1,0,1"))
                                             (rule "add_zero_right" (formula "27") (term "1,1,0,1,1,0,1"))
                                             (rule "lenOfSeqDef" (formula "27") (term "0,0"))
                                             (rule "eqSymm" (formula "27") (term "0"))
                                             (rule "polySimp_elimSub" (formula "27") (term "1,1,0"))
                                             (rule "times_zero_2" (formula "27") (term "1,1,1,0"))
                                             (rule "add_zero_right" (formula "27") (term "1,1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "27") (term "0,1,1,0,0,1"))
                                             (rule "add_zero_right" (formula "27") (term "0,0,1,1,0,0,1"))
                                             (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,1,0,0,1"))
                                             (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0,1,0,1"))
                                             (rule "eqSymm" (formula "27") (term "1,0,1"))
                                             (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,1,1,0,1"))
                                             (rule "inEqSimp_ltToLeq" (formula "27") (term "0,0,0"))
                                             (rule "add_zero_right" (formula "27") (term "0,0,0,0"))
                                             (rule "eqSymm" (formula "27") (term "0"))
                                             (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0,1"))
                                             (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,0,1"))
                                             (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0,1,0,1"))
                                             (rule "eqSymm" (formula "27") (term "1,0,1"))
                                             (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,1,1,0,1"))
                                             (rule "inEqSimp_ltToLeq" (formula "27") (term "0,0,0"))
                                             (rule "add_zero_right" (formula "27") (term "0,0,0,0"))
                                             (rule "eqSymm" (formula "27") (term "0"))
                                             (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0,1"))
                                             (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0,1,0,1"))
                                             (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,1,1,0,1"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0,1"))
                                             (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0,1"))
                                             (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0,1"))
                                             (rule "mul_literals" (formula "27") (term "0,1,1,0,0,1"))
                                             (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0,1"))
                                             (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0,1"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0,1,0,1"))
                                             (rule "eqSymm" (formula "27") (term "1,0,1"))
                                             (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,1,1,0,1"))
                                             (rule "polySimp_rightDist" (formula "27") (term "1,1,0,1,1,0,1"))
                                             (rule "mul_literals" (formula "27") (term "0,1,1,0,1,1,0,1"))
                                             (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,1,1,0,1"))
                                             (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,1,1,0,1"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "27") (term "0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "27") (term "0,0,0,0"))
                                             (rule "eqSymm" (formula "27") (term "0"))
                                             (rule "polySimp_elimOne" (formula "27") (term "0,0,1,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "27") (term "0,1,1,1,0,0,1"))
                                             (rule "polySimp_mulLiterals" (formula "27") (term "0,0,1,1,1,0,0,1"))
                                             (rule "polySimp_elimOne" (formula "27") (term "0,0,1,1,1,0,0,1"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0,1,0,1"))
                                             (rule "eqSymm" (formula "27") (term "1,0,1"))
                                             (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,1,1,0,1"))
                                             (rule "polySimp_rightDist" (formula "27") (term "1,1,0,1,1,0,1"))
                                             (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,1,1,0,1"))
                                             (rule "mul_literals" (formula "27") (term "0,1,1,0,1,1,0,1"))
                                             (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,1,1,0,1"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "27") (term "0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "27") (term "0,0,0,0"))
                                             (rule "eqSymm" (formula "27") (term "0"))
                                             (rule "polySimp_elimOne" (formula "27") (term "0,0,1,0"))
                                             (rule "pullOutSelect" (formula "5") (term "0") (inst "selectSK=arr_56"))
                                             (rule "simplifySelectOfAnonEQ" (formula "5") (ifseqformula "13"))
                                             (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "31")) (ifInst ""  (formula "30")))
                                             (rule "applyEqReverse" (formula "6") (term "0") (ifseqformula "5"))
                                             (rule "hideAuxiliaryEq" (formula "5"))
                                             (rule "narrowSelectArrayType" (formula "5") (term "0") (ifseqformula "11") (ifseqformula "30"))
                                             (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "4"))
                                             (rule "mul_literals" (formula "3") (term "0,0"))
                                             (rule "add_zero_left" (formula "3") (term "0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                                             (rule "mul_literals" (formula "3") (term "1"))
                                             (rule "replace_known_left" (formula "22") (term "0,0") (ifseqformula "3"))
                                             (builtin "One Step Simplification" (formula "22"))
                                             (rule "eqSymm" (formula "22"))
                                             (rule "applyEq" (formula "7") (term "0") (ifseqformula "22"))
                                             (rule "applyEq" (formula "23") (term "1,1,1,0,0") (ifseqformula "21"))
                                             (rule "applyEq" (formula "16") (term "1,1,1,0,0") (ifseqformula "21"))
                                             (rule "applyEq" (formula "15") (term "1") (ifseqformula "21"))
                                             (rule "applyEq" (formula "28") (term "1,0,0,0") (ifseqformula "21"))
                                             (rule "pullOutSelect" (formula "27") (term "0,1,1,1,1,0,0,1") (inst "selectSK=arr_57"))
                                             (rule "applyEq" (formula "28") (term "1,1,1,1,0,1") (ifseqformula "1"))
                                             (rule "applyEq" (formula "28") (term "0,1,1,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "28") (term "0,0,0,1,1,1,0,0,1") (ifseqformula "1"))
                                             (rule "applyEq" (formula "28") (term "0,0,0,1,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "28") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "1"))
                                             (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "20"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "applyEqReverse" (formula "28") (term "0,1,1,1,1,0,0,1") (ifseqformula "1"))
                                             (rule "applyEqReverse" (formula "28") (term "1,1,1,1,0,1") (ifseqformula "1"))
                                             (rule "applyEqReverse" (formula "28") (term "0,1,1,0") (ifseqformula "1"))
                                             (rule "applyEqReverse" (formula "28") (term "0,0,0,1,1,1,0,0,1") (ifseqformula "1"))
                                             (rule "applyEqReverse" (formula "28") (term "0,0,0,1,0") (ifseqformula "1"))
                                             (rule "applyEqReverse" (formula "28") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "1"))
                                             (rule "hideAuxiliaryEq" (formula "1"))
                                             (rule "pullOutSelect" (formula "27") (term "1,1,0,1,0,1") (inst "selectSK=arr_58"))
                                             (rule "applyEq" (formula "28") (term "0,0,0,0,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "28") (term "0,1,0,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "28") (term "0,1,1,1,0,0,1,0,1") (ifseqformula "1"))
                                             (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "13"))
                                             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "31")) (ifInst ""  (formula "30")))
                                             (rule "applyEqReverse" (formula "28") (term "1,1,0,1,0,1") (ifseqformula "1"))
                                             (rule "applyEqReverse" (formula "28") (term "0,0,0,0,0") (ifseqformula "1"))
                                             (rule "applyEqReverse" (formula "28") (term "0,1,0,0") (ifseqformula "1"))
                                             (rule "applyEqReverse" (formula "28") (term "0,1,1,1,0,0,1,0,1") (ifseqformula "1"))
                                             (rule "hideAuxiliaryEq" (formula "1"))
                                             (rule "applyEq" (formula "27") (term "0,1,0,0") (ifseqformula "6"))
                                             (rule "applyEq" (formula "27") (term "0,1,1,1,0,0,1,0,1") (ifseqformula "6"))
                                             (rule "eqSymm" (formula "27") (term "1,0,1"))
                                             (rule "applyEq" (formula "27") (term "0,0,0,0,0") (ifseqformula "6"))
                                             (builtin "One Step Simplification" (formula "27"))
                                             (rule "allRight" (formula "27") (inst "sk=iv_4"))
                                             (rule "impRight" (formula "27"))
                                             (rule "andLeft" (formula "1"))
                                             (rule "replace_known_left" (formula "29") (term "0,0,1") (ifseqformula "1"))
                                             (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "1")))
                                             (rule "inEqSimp_homoInEq0" (formula "2"))
                                             (rule "polySimp_addComm1" (formula "2") (term "0"))
                                             (rule "inEqSimp_homoInEq0" (formula "29") (term "0,1"))
                                             (rule "polySimp_addComm1" (formula "29") (term "0,0,1"))
                                             (rule "inEqSimp_homoInEq0" (formula "29") (term "0,0"))
                                             (rule "polySimp_addComm1" (formula "29") (term "0,0,0"))
                                             (rule "applyEq" (formula "29") (term "1,1,1") (ifseqformula "8"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                             (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                             (rule "polySimp_rightDist" (formula "2") (term "1"))
                                             (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                             (rule "mul_literals" (formula "2") (term "0,1"))
                                             (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "0,1"))
                                             (rule "polySimp_mulComm0" (formula "29") (term "1,0,1"))
                                             (rule "polySimp_rightDist" (formula "29") (term "1,0,1"))
                                             (rule "mul_literals" (formula "29") (term "0,1,0,1"))
                                             (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,1"))
                                             (rule "polySimp_elimOne" (formula "29") (term "1,1,0,1"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "0,0"))
                                             (rule "polySimp_mulComm0" (formula "29") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "29") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0"))
                                             (rule "mul_literals" (formula "29") (term "0,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0"))
                                             (rule "pullOutSelect" (formula "29") (term "1,0") (inst "selectSK=arr_59"))
                                             (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "22"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,1,0,0") (ifseqformula "15"))
                                             (rule "eqSymm" (formula "30"))
                                             (rule "sortsDisjointModuloNull" (formula "1") (term "0,0,0"))
                                             (rule "replace_known_right" (formula "1") (term "1,0,0,0") (ifseqformula "33"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "pullOutSelect" (formula "30") (term "1,0") (inst "selectSK=arr_60"))
                                             (rule "applyEq" (formula "2") (term "2,0") (ifseqformula "1"))
                                             (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "16"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "nnf_imp2or" (formula "32") (term "0,1,0"))
                                             (rule "nnf_imp2or" (formula "27") (term "0"))
                                             (rule "nnf_imp2or" (formula "20") (term "0"))
                                             (rule "nnf_ex2all" (formula "32"))
                                             (rule "nnf_notAnd" (formula "1") (term "0"))
                                             (rule "nnf_notAnd" (formula "28") (term "0,0"))
                                             (rule "inEqSimp_notLeq" (formula "28") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "28") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "28") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "28") (term "1,1,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "28") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "28") (term "1,0,0,0,0,0"))
                                             (rule "add_literals" (formula "28") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0"))
                                             (rule "mul_literals" (formula "28") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "21") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0"))
                                             (rule "add_literals" (formula "21") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0"))
                                             (rule "mul_literals" (formula "21") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "21") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0"))
                                             (rule "nnf_notAll" (formula "1") (term "1,0"))
                                             (rule "nnf_notAnd" (formula "1") (term "0,0"))
                                             (rule "nnf_notOr" (formula "1") (term "0,1,0"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "arrayLengthNotNegative" (formula "30") (term "1,1,1,0,0"))
                                             (rule "inEqSimp_subsumption1" (formula "30") (ifseqformula "8"))
                                             (rule "leq_literals" (formula "30") (term "0"))
                                             (builtin "One Step Simplification" (formula "30"))
                                             (rule "true_left" (formula "30"))
                                             (rule "arrayLengthIsAShort" (formula "30") (term "1,1,1,0,0"))
                                             (builtin "One Step Simplification" (formula "30"))
                                             (rule "true_left" (formula "30"))
                                             (rule "equalityToSeqGetAndSeqLenLeft" (formula "12") (inst "iv=iv"))
                                             (rule "andLeft" (formula "12"))
                                             (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
                                             (rule "applyEq" (formula "13") (term "0,0,1,0") (ifseqformula "14"))
                                             (builtin "One Step Simplification" (formula "13"))
                                             (rule "true_left" (formula "13"))
                                             (rule "applyEq" (formula "12") (term "0,0") (ifseqformula "13"))
                                             (builtin "One Step Simplification" (formula "12"))
                                             (rule "true_left" (formula "12"))
                                             (rule "arrayLengthIsAShort" (formula "15") (term "1,1,0"))
                                             (builtin "One Step Simplification" (formula "15"))
                                             (rule "true_left" (formula "15"))
                                             (rule "arrayLengthNotNegative" (formula "15") (term "1,1,0"))
                                             (rule "seqGetAlphaCast" (formula "9") (term "0"))
                                             (rule "castedGetAny" (formula "9") (term "0"))
                                             (builtin "One Step Simplification" (formula "9"))
                                             (rule "true_left" (formula "9"))
                                             (rule "commute_or_2" (formula "29") (term "0"))
                                             (rule "commute_or_2" (formula "22") (term "0"))
                                             (rule "ifthenelse_split" (formula "21") (term "0"))
                                             (branch " verif.selectvoting.system.core.ConservativeExtension.messages.length >= 1 TRUE"
                                                (rule "applyEq" (formula "15") (term "0") (ifseqformula "22"))
                                                (rule "applyEq" (formula "23") (term "1,1,1,0,0,1,0,0") (ifseqformula "22"))
                                                (rule "applyEq" (formula "16") (term "1,1,0") (ifseqformula "22"))
                                                (rule "applyEq" (formula "21") (term "0") (ifseqformula "22"))
                                                (rule "inEqSimp_subsumption1" (formula "15") (ifseqformula "8"))
                                                (rule "leq_literals" (formula "15") (term "0"))
                                                (builtin "One Step Simplification" (formula "15"))
                                                (rule "true_left" (formula "15"))
                                                (rule "commute_or" (formula "1") (term "0,0"))
                                                (rule "commute_or" (formula "28") (term "0,0"))
                                                (rule "commute_or" (formula "21") (term "0,0"))
                                                (rule "commute_and_2" (formula "1") (term "0,1,0"))
                                                (rule "commute_and" (formula "1") (term "0,0,1,0"))
                                                (rule "ifthenelse_to_or_left" (formula "28") (term "0,0,0"))
                                                (rule "eqSymm" (formula "28") (term "1,1,0,0,0"))
                                                (builtin "One Step Simplification" (formula "28"))
                                                (rule "eqSymm" (formula "28") (term "1,0,0,0,0"))
                                                (rule "nnf_notAnd" (formula "28") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_notLeq" (formula "28") (term "1,0,0,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0,0,0,0"))
                                                (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0,0,0,0"))
                                                (rule "add_literals" (formula "28") (term "0,0,0,1,0,0,0,0,0"))
                                                (rule "add_zero_left" (formula "28") (term "0,0,1,0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1,0,0,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "28") (term "1,1,0,0,0,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "28") (term "0,0,0,0,0,0"))
                                                (rule "times_zero_1" (formula "28") (term "1,0,0,0,0,0,0,0,0"))
                                                (rule "add_literals" (formula "28") (term "0,0,0,0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0,0,0,0"))
                                                (rule "mul_literals" (formula "28") (term "1,0,0,0,0,0,0"))
                                                (rule "nnf_notAnd" (formula "28") (term "0,1,1,0,0,0"))
                                                (rule "inEqSimp_notLeq" (formula "28") (term "1,0,1,1,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,1,1,0,0,0"))
                                                (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,1,1,0,0,0"))
                                                (rule "add_literals" (formula "28") (term "0,0,0,1,0,1,1,0,0,0"))
                                                (rule "add_zero_left" (formula "28") (term "0,0,1,0,1,1,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1,0,1,1,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,1,1,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "28") (term "1,1,0,1,1,0,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "28") (term "0,0,1,1,0,0,0"))
                                                (rule "times_zero_1" (formula "28") (term "1,0,0,0,0,1,1,0,0,0"))
                                                (rule "add_literals" (formula "28") (term "0,0,0,0,1,1,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,1,1,0,0,0"))
                                                (rule "mul_literals" (formula "28") (term "1,0,0,1,1,0,0,0"))
                                                (rule "commute_or" (formula "28") (term "0,0"))
                                                (rule "commute_or_2" (formula "28") (term "0"))
                                                (rule "commute_or" (formula "28") (term "1,1,0"))
                                                (rule "commute_or_2" (formula "28") (term "0,1,0"))
                                                (rule "commute_or_2" (formula "28") (term "0,1,1,0"))
                                                (rule "commute_or" (formula "28") (term "0,0,1,0"))
                                                (rule "commute_or" (formula "28") (term "0,0,1,1,0"))
                                                (rule "cnf_rightDist" (formula "28") (term "1,1,0"))
                                                (rule "commute_or" (formula "28") (term "1,1,1,0"))
                                                (rule "cnf_rightDist" (formula "28") (term "0"))
                                                (rule "distr_forallAnd" (formula "28"))
                                                (rule "andLeft" (formula "28"))
                                                (rule "commute_or" (formula "29") (term "0"))
                                                (rule "shift_paren_or" (formula "28") (term "0"))
                                                (rule "shift_paren_or" (formula "28") (term "0,0"))
                                                (rule "commute_or_2" (formula "28") (term "0,0,0"))
                                                (rule "cnf_rightDist" (formula "29") (term "0"))
                                                (rule "distr_forallAnd" (formula "29"))
                                                (rule "andLeft" (formula "29"))
                                                (rule "commute_or_2" (formula "30") (term "0"))
                                                (rule "shift_paren_or" (formula "29") (term "0"))
                                                (rule "shift_paren_or" (formula "30") (term "0,0"))
                                                (rule "shift_paren_or" (formula "29") (term "0,0"))
                                                (rule "commute_or_2" (formula "30") (term "0,0,0"))
                                                (builtin "One Step Simplification" (formula "30"))
                                                (rule "commute_or_2" (formula "29") (term "0,0,0"))
                                                (builtin "One Step Simplification" (formula "29"))
                                                (rule "commute_or" (formula "28") (term "0,0,0,0"))
                                                (rule "shift_paren_or" (formula "29") (term "0,0,0"))
                                                (rule "commute_or" (formula "29") (term "0,0,0,0"))
                                                (builtin "One Step Simplification" (formula "29"))
                                                (rule "ifthenelse_to_or_right" (formula "21") (term "0,0,0"))
                                                (builtin "One Step Simplification" (formula "21"))
                                                (rule "nnf_notAnd" (formula "21") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0,0,0,0"))
                                                (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0,0,0,0"))
                                                (rule "add_literals" (formula "21") (term "0,0,0,0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0,0,0,0"))
                                                (rule "mul_literals" (formula "21") (term "1,0,0,0,0,0,0"))
                                                (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0,0,0,0"))
                                                (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0,0,0,0"))
                                                (rule "add_literals" (formula "21") (term "0,0,0,1,0,0,0,0,0"))
                                                (rule "add_zero_left" (formula "21") (term "0,0,1,0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0,0,0,0"))
                                                (rule "nnf_notAnd" (formula "21") (term "0,1,1,0,0,0"))
                                                (rule "inEqSimp_notLeq" (formula "21") (term "1,0,1,1,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,1,1,0,0,0"))
                                                (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,1,1,0,0,0"))
                                                (rule "add_literals" (formula "21") (term "0,0,0,1,0,1,1,0,0,0"))
                                                (rule "add_zero_left" (formula "21") (term "0,0,1,0,1,1,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,1,1,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,1,1,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "21") (term "1,1,0,1,1,0,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "21") (term "0,0,1,1,0,0,0"))
                                                (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,1,1,0,0,0"))
                                                (rule "add_literals" (formula "21") (term "0,0,0,0,1,1,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,1,1,0,0,0"))
                                                (rule "mul_literals" (formula "21") (term "1,0,0,1,1,0,0,0"))
                                                (rule "commute_or" (formula "21") (term "0,0"))
                                                (rule "commute_or_2" (formula "21") (term "0"))
                                                (rule "commute_or" (formula "21") (term "1,1,0"))
                                                (rule "commute_or_2" (formula "21") (term "0,1,0"))
                                                (rule "ifthenelse_split" (formula "5") (term "0"))
                                                (branch " result_0[iv_3]@anon_heap_sort<<anonHeapFunction>>.length >= 1 TRUE"
                                                   (rule "replace_known_left" (formula "35") (term "0,1") (ifseqformula "6"))
                                                   (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "6")))
                                                   (rule "commute_or_2" (formula "22") (term "0,1,1,0"))
                                                   (rule "commute_or" (formula "22") (term "0,0,1,0"))
                                                   (rule "lenNonNegative" (formula "27") (term "0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "27"))
                                                   (rule "applyEq" (formula "27") (term "0") (ifseqformula "28"))
                                                   (rule "inEqSimp_subsumption1" (formula "27") (ifseqformula "9"))
                                                   (rule "leq_literals" (formula "27") (term "0"))
                                                   (builtin "One Step Simplification" (formula "27"))
                                                   (rule "true_left" (formula "27"))
                                                   (rule "ifthenelse_split" (formula "2") (term "0"))
                                                   (branch " ! result_0[iv_3]@anon_heap_sort<<anonHeapFunction>> = null & ! (result_0[iv_3]@anon_heap_sort<<anonHeapFunction>>).<created> = TRUE TRUE"
                                                      (rule "andLeft" (formula "2"))
                                                      (rule "notLeft" (formula "3"))
                                                      (rule "notLeft" (formula "2"))
                                                      (rule "applyEqReverse" (formula "37") (term "0") (ifseqformula "2"))
                                                      (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                                      (rule "hideAuxiliaryEq" (formula "2"))
                                                      (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "34"))
                                                      (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "35")))
                                                      (rule "ifthenelse_negated" (formula "2") (term "0"))
                                                      (rule "narrowSelectArrayType" (formula "36") (term "0") (ifseqformula "16") (ifseqformula "34"))
                                                      (rule "eqSymm" (formula "36"))
                                                      (rule "narrowSelectArrayType" (formula "2") (term "2,0") (ifseqformula "23") (ifseqformula "34"))
                                                      (rule "narrowSelectArrayType" (formula "2") (term "1,0") (ifseqformula "16") (ifseqformula "34"))
                                                      (rule "ifthenelse_to_or_left2" (formula "1") (term "0,0,0,1,0"))
                                                      (rule "eqSymm" (formula "1") (term "0,1,1,0,0,0,1,0"))
                                                      (builtin "One Step Simplification" (formula "1"))
                                                      (rule "nnf_notAnd" (formula "1") (term "0,0,0,0,0,1,0"))
                                                      (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0,0,0,0,1,0"))
                                                      (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0,0,0,0,1,0"))
                                                      (rule "add_literals" (formula "1") (term "0,0,0,0,0,0,0,0,1,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0,0,0,0,1,0"))
                                                      (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0,0,1,0"))
                                                      (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0,0,0,0,1,0"))
                                                      (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,0,0,0,1,0"))
                                                      (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0,0,0,0,1,0"))
                                                      (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,0,0,0,1,0"))
                                                      (rule "add_literals" (formula "1") (term "0,0,0,1,0,0,0,0,0,1,0"))
                                                      (rule "add_zero_left" (formula "1") (term "0,0,1,0,0,0,0,0,1,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0,0,0,0,1,0"))
                                                      (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0,0,0,1,0"))
                                                      (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0,0,0,0,1,0"))
                                                      (rule "nnf_notOr" (formula "1") (term "1,1,0,0,0,1,0"))
                                                      (builtin "One Step Simplification" (formula "1"))
                                                      (rule "commute_or" (formula "21") (term "0,0,1,1,0"))
                                                      (rule "allLeft" (formula "33") (inst "t=int::seqGet(s_1, iv_3)"))
                                                      (rule "inEqSimp_contradInEq1" (formula "33") (term "1,0") (ifseqformula "9"))
                                                      (rule "qeq_literals" (formula "33") (term "0,1,0"))
                                                      (builtin "One Step Simplification" (formula "33"))
                                                      (rule "inEqSimp_contradInEq0" (formula "33") (term "1") (ifseqformula "10"))
                                                      (rule "inEqSimp_homoInEq1" (formula "33") (term "0,1"))
                                                      (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1"))
                                                      (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1"))
                                                      (rule "mul_literals" (formula "33") (term "0,1,0,0,1"))
                                                      (rule "polySimp_addAssoc" (formula "33") (term "0,0,1"))
                                                      (rule "polySimp_addComm0" (formula "33") (term "0,0,0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "33") (term "0,0,1"))
                                                      (rule "add_literals" (formula "33") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "33") (term "1,0,0,1"))
                                                      (rule "add_zero_right" (formula "33") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "33") (term "0,1"))
                                                      (builtin "One Step Simplification" (formula "33"))
                                                      (rule "notLeft" (formula "33"))
                                                      (rule "pullOutSelect" (formula "34") (term "0") (inst "selectSK=arr_64"))
                                                      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                                                      (builtin "One Step Simplification" (formula "1"))
                                                      (rule "applyEqReverse" (formula "35") (term "0") (ifseqformula "1"))
                                                      (rule "hideAuxiliaryEq" (formula "1"))
                                                      (rule "allLeft" (formula "22") (inst "t=iv_3"))
                                                      (rule "inEqSimp_commuteGeq" (formula "22") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "22") (term "1") (ifseqformula "7"))
                                                      (rule "inEqSimp_homoInEq1" (formula "22") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "22") (term "0,0,1"))
                                                      (rule "add_literals" (formula "22") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "22") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "22") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "22") (term "0,1"))
                                                      (builtin "One Step Simplification" (formula "22"))
                                                      (rule "inEqSimp_contradInEq1" (formula "22") (term "1") (ifseqformula "6"))
                                                      (rule "qeq_literals" (formula "22") (term "0,1"))
                                                      (builtin "One Step Simplification" (formula "22"))
                                                      (rule "notLeft" (formula "22"))
                                                      (rule "pullOutSelect" (formula "34") (term "0") (inst "selectSK=arr_65"))
                                                      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "18"))
                                                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "41")) (ifInst ""  (formula "40")))
                                                      (rule "applyEqReverse" (formula "35") (term "0") (ifseqformula "1"))
                                                      (rule "hideAuxiliaryEq" (formula "1"))
                                                      (rule "narrowSelectArrayType" (formula "34") (term "0") (ifseqformula "16") (ifseqformula "40"))
                                                      (rule "allLeft" (formula "22") (inst "t=int::seqGet(s_1, iv_3)"))
                                                      (rule "inEqSimp_contradInEq0" (formula "22") (term "1") (ifseqformula "10"))
                                                      (rule "inEqSimp_homoInEq1" (formula "22") (term "0,1"))
                                                      (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1"))
                                                      (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1"))
                                                      (rule "mul_literals" (formula "22") (term "0,1,0,0,1"))
                                                      (rule "polySimp_addAssoc" (formula "22") (term "0,0,1"))
                                                      (rule "polySimp_addComm0" (formula "22") (term "0,0,0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "22") (term "0,0,1"))
                                                      (rule "add_literals" (formula "22") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "22") (term "1,0,0,1"))
                                                      (rule "add_zero_right" (formula "22") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "22") (term "0,1"))
                                                      (builtin "One Step Simplification" (formula "22"))
                                                      (rule "inEqSimp_contradInEq1" (formula "22") (term "1") (ifseqformula "9"))
                                                      (rule "qeq_literals" (formula "22") (term "0,1"))
                                                      (builtin "One Step Simplification" (formula "22"))
                                                      (rule "notLeft" (formula "22"))
                                                      (rule "pullOutSelect" (formula "34") (term "0") (inst "selectSK=arr_66"))
                                                      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "18"))
                                                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "42")) (ifInst ""  (formula "41")))
                                                      (rule "applyEqReverse" (formula "35") (term "0") (ifseqformula "1"))
                                                      (rule "hideAuxiliaryEq" (formula "1"))
                                                      (rule "narrowSelectArrayType" (formula "34") (term "0") (ifseqformula "16") (ifseqformula "41"))
                                                      (rule "applyEq" (formula "34") (term "0") (ifseqformula "11"))
                                                      (rule "allLeft" (formula "33") (inst "t=iv_3"))
                                                      (rule "replaceKnownSelect_taclet001111000000000_6" (formula "33") (term "0,0,0,0"))
                                                      (rule "replaceKnownAuxiliaryConstant_taclet001111000000000_7" (formula "33") (term "0,0,0,0"))
                                                      (rule "replace_known_right" (formula "33") (term "0,0,0") (ifseqformula "37"))
                                                      (builtin "One Step Simplification" (formula "33"))
                                                      (rule "true_left" (formula "33"))
                                                      (rule "cnf_rightDist" (formula "21") (term "1,1,0"))
                                                      (rule "ifthenelse_to_or_left" (formula "28") (term "0,0,0,0,0"))
                                                      (rule "eqSymm" (formula "28") (term "1,1,0,0,0,0,0"))
                                                      (rule "nnf_notAnd" (formula "28") (term "0,0,0,0,0,0,0"))
                                                      (rule "inEqSimp_notGeq" (formula "28") (term "0,0,0,0,0,0,0,0"))
                                                      (rule "mul_literals" (formula "28") (term "1,0,0,0,0,0,0,0,0,0,0"))
                                                      (rule "add_literals" (formula "28") (term "0,0,0,0,0,0,0,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0,0,0,0,0,0"))
                                                      (rule "mul_literals" (formula "28") (term "1,0,0,0,0,0,0,0,0"))
                                                      (rule "inEqSimp_notLeq" (formula "28") (term "1,0,0,0,0,0,0,0"))
                                                      (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0,0,0,0,0,0"))
                                                      (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0,0,0,0,0,0"))
                                                      (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0,0,0,0,0,0"))
                                                      (rule "add_literals" (formula "28") (term "0,0,0,1,0,0,0,0,0,0,0"))
                                                      (rule "add_zero_left" (formula "28") (term "0,0,1,0,0,0,0,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1,0,0,0,0,0,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0,0,0,0,0,0"))
                                                      (rule "polySimp_elimOne" (formula "28") (term "1,1,0,0,0,0,0,0,0"))
                                                      (rule "commute_or_2" (formula "1") (term "0,0,0,0,1,0"))
                                                      (rule "commute_or_2" (formula "21") (term "0,1,1,0"))
                                                      (rule "inEqSimp_or_tautInEq1" (formula "21") (term "0,0,1,1,0"))
                                                      (rule "add_zero_right" (formula "21") (term "1,1,0,0,1,1,0"))
                                                      (rule "qeq_literals" (formula "21") (term "1,0,0,1,1,0"))
                                                      (builtin "One Step Simplification" (formula "21"))
                                                      (rule "onlyCreatedObjectsAreReferenced" (formula "41") (term "0") (ifseqformula "13"))
                                                      (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "42"))
                                                      (builtin "One Step Simplification" (formula "1"))
                                                      (rule "commute_or" (formula "29") (term "0,0,0,0"))
                                                      (rule "commute_or_2" (formula "29") (term "0,0,0"))
                                                      (rule "commute_or_2" (formula "29") (term "0,0"))
                                                      (rule "commute_or_2" (formula "29") (term "0"))
                                                      (rule "commute_or" (formula "29") (term "1,1,0"))
                                                      (rule "commute_or_2" (formula "29") (term "0,1,0"))
                                                      (rule "shift_paren_or" (formula "22") (term "1,1,0"))
                                                      (rule "commute_and_2" (formula "2") (term "1,1,0,0,0,1,0"))
                                                      (rule "commute_or" (formula "29") (term "0,0,1,0"))
                                                      (rule "commute_or" (formula "22") (term "0,1,1,0"))
                                                      (rule "inEqSimp_or_tautInEq1" (formula "22") (term "1,1,0"))
                                                      (rule "inEqSimp_homoInEq1" (formula "22") (term "1,1,1,0"))
                                                      (rule "polySimp_pullOutFactor1" (formula "22") (term "0,1,1,1,0"))
                                                      (rule "add_literals" (formula "22") (term "1,0,1,1,1,0"))
                                                      (rule "times_zero_1" (formula "22") (term "0,1,1,1,0"))
                                                      (rule "leq_literals" (formula "22") (term "1,1,1,0"))
                                                      (builtin "One Step Simplification" (formula "22"))
                                                      (rule "shift_paren_or" (formula "22") (term "0"))
                                                      (rule "commute_or_2" (formula "22") (term "0,0"))
                                                      (builtin "One Step Simplification" (formula "22"))
                                                      (rule "shift_paren_or" (formula "22") (term "0,0"))
                                                      (rule "commute_or" (formula "22") (term "0,0,0"))
                                                      (builtin "One Step Simplification" (formula "22"))
                                                      (rule "onlyCreatedObjectsAreReferenced" (formula "12") (term "1") (ifseqformula "24"))
                                                      (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "38"))
                                                      (builtin "One Step Simplification" (formula "12"))
                                                      (rule "cnf_rightDist" (formula "30") (term "1,1,0"))
                                                      (rule "cnf_rightDist" (formula "30") (term "0"))
                                                      (rule "distr_forallAnd" (formula "30"))
                                                      (rule "andLeft" (formula "30"))
                                                      (rule "commute_or_2" (formula "30") (term "0"))
                                                      (rule "commute_or" (formula "31") (term "0"))
                                                      (rule "commute_or_2" (formula "30") (term "0,0"))
                                                      (rule "commute_or" (formula "31") (term "1,1,0"))
                                                      (rule "cnf_rightDist" (formula "31") (term "0"))
                                                      (rule "distr_forallAnd" (formula "31"))
                                                      (rule "andLeft" (formula "31"))
                                                      (rule "commute_or_2" (formula "31") (term "0"))
                                                      (rule "shift_paren_or" (formula "32") (term "0"))
                                                      (rule "commute_or_2" (formula "31") (term "0,0"))
                                                      (rule "shift_paren_or" (formula "32") (term "0,0"))
                                                      (rule "commute_or_2" (formula "31") (term "0,0,0"))
                                                      (rule "shift_paren_or" (formula "30") (term "0,0,0"))
                                                      (rule "shift_paren_or" (formula "32") (term "0,0,0"))
                                                      (rule "commute_or_2" (formula "30") (term "0,0,0,0"))
                                                      (builtin "One Step Simplification" (formula "30"))
                                                      (rule "commute_or_2" (formula "32") (term "0,0,0,0"))
                                                      (rule "inEqSimp_or_tautInEq1" (formula "32") (term "0,0,0"))
                                                      (rule "inEqSimp_homoInEq1" (formula "32") (term "1,0,0,0"))
                                                      (rule "polySimp_pullOutFactor1" (formula "32") (term "0,1,0,0,0"))
                                                      (rule "add_literals" (formula "32") (term "1,0,1,0,0,0"))
                                                      (rule "times_zero_1" (formula "32") (term "0,1,0,0,0"))
                                                      (rule "leq_literals" (formula "32") (term "1,0,0,0"))
                                                      (builtin "One Step Simplification" (formula "32"))
                                                      (rule "true_left" (formula "32"))
                                                      (rule "commute_or" (formula "2") (term "0,0,0,0,0,1,0"))
                                                      (rule "shift_paren_or" (formula "31") (term "0,0,0,0"))
                                                      (rule "shift_paren_or" (formula "30") (term "0,0,0,0"))
                                                      (rule "ifthenelse_split" (formula "3") (term "0"))
                                                      (branch " (result_0[iv_3]@anon_heap_sort<<anonHeapFunction>>).<created>@anon_heap_copyOf<<anonHeapFunction>> = TRUE TRUE"
                                                         (rule "applyEqReverse" (formula "42") (term "0") (ifseqformula "4"))
                                                         (builtin "One Step Simplification" (formula "42"))
                                                         (rule "closeTrue" (formula "42"))
                                                      )
                                                      (branch " (result_0[iv_3]@anon_heap_sort<<anonHeapFunction>>).<created>@anon_heap_copyOf<<anonHeapFunction>> = TRUE FALSE"
                                                         (rule "referencedObjectIsCreatedRightEQ" (formula "37") (ifseqformula "13") (ifseqformula "40"))
                                                         (rule "close" (formula "37") (ifseqformula "18"))
                                                      )
                                                   )
                                                   (branch " ! result_0[iv_3]@anon_heap_sort<<anonHeapFunction>> = null & ! (result_0[iv_3]@anon_heap_sort<<anonHeapFunction>>).<created> = TRUE FALSE"
                                                      (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                                      (rule "applyEqReverse" (formula "36") (term "0") (ifseqformula "2"))
                                                      (rule "hideAuxiliaryEq" (formula "2"))
                                                      (rule "ifthenelse_to_or_left2" (formula "1") (term "0,0,0,1,0"))
                                                      (rule "eqSymm" (formula "1") (term "0,1,1,0,0,0,1,0"))
                                                      (builtin "One Step Simplification" (formula "1"))
                                                      (rule "nnf_notOr" (formula "1") (term "1,1,0,0,0,1,0"))
                                                      (builtin "One Step Simplification" (formula "1"))
                                                      (rule "nnf_notAnd" (formula "1") (term "0,0,0,0,0,1,0"))
                                                      (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0,0,0,0,1,0"))
                                                      (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0,0,0,0,1,0"))
                                                      (rule "add_zero_right" (formula "1") (term "0,0,0,0,0,0,0,0,1,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0,0,0,0,1,0"))
                                                      (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0,0,1,0"))
                                                      (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0,0,0,0,1,0"))
                                                      (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,0,0,0,1,0"))
                                                      (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0,0,0,0,1,0"))
                                                      (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,0,0,0,1,0"))
                                                      (rule "add_literals" (formula "1") (term "0,0,0,1,0,0,0,0,0,1,0"))
                                                      (rule "add_zero_left" (formula "1") (term "0,0,1,0,0,0,0,0,1,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0,0,0,0,1,0"))
                                                      (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0,0,0,1,0"))
                                                      (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0,0,0,0,1,0"))
                                                      (rule "commute_or" (formula "21") (term "0,0,1,1,0"))
                                                      (rule "allLeft" (formula "33") (inst "t=int::seqGet(s_1, iv_3)"))
                                                      (rule "inEqSimp_contradInEq1" (formula "33") (term "1,0") (ifseqformula "9"))
                                                      (rule "qeq_literals" (formula "33") (term "0,1,0"))
                                                      (builtin "One Step Simplification" (formula "33"))
                                                      (rule "inEqSimp_contradInEq0" (formula "33") (term "1") (ifseqformula "10"))
                                                      (rule "inEqSimp_homoInEq1" (formula "33") (term "0,1"))
                                                      (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1"))
                                                      (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1"))
                                                      (rule "mul_literals" (formula "33") (term "0,1,0,0,1"))
                                                      (rule "polySimp_addAssoc" (formula "33") (term "0,0,1"))
                                                      (rule "polySimp_addComm0" (formula "33") (term "0,0,0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "33") (term "0,0,1"))
                                                      (rule "add_literals" (formula "33") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "33") (term "1,0,0,1"))
                                                      (rule "add_zero_right" (formula "33") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "33") (term "0,1"))
                                                      (builtin "One Step Simplification" (formula "33"))
                                                      (rule "notLeft" (formula "33"))
                                                      (rule "pullOutSelect" (formula "34") (term "0") (inst "selectSK=arr_61"))
                                                      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                                                      (builtin "One Step Simplification" (formula "1"))
                                                      (rule "applyEqReverse" (formula "35") (term "0") (ifseqformula "1"))
                                                      (rule "hideAuxiliaryEq" (formula "1"))
                                                      (rule "allLeft" (formula "22") (inst "t=iv_3"))
                                                      (rule "inEqSimp_commuteGeq" (formula "22") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "22") (term "1,0") (ifseqformula "6"))
                                                      (rule "qeq_literals" (formula "22") (term "0,1,0"))
                                                      (builtin "One Step Simplification" (formula "22"))
                                                      (rule "inEqSimp_contradInEq1" (formula "22") (term "1") (ifseqformula "7"))
                                                      (rule "inEqSimp_homoInEq1" (formula "22") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "22") (term "0,0,1"))
                                                      (rule "add_literals" (formula "22") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "22") (term "1,0,0,1"))
                                                      (rule "add_zero_right" (formula "22") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "22") (term "0,1"))
                                                      (builtin "One Step Simplification" (formula "22"))
                                                      (rule "notLeft" (formula "22"))
                                                      (rule "pullOutSelect" (formula "34") (term "0") (inst "selectSK=arr_62"))
                                                      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "18"))
                                                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "40")) (ifInst ""  (formula "39")))
                                                      (rule "applyEqReverse" (formula "35") (term "0") (ifseqformula "1"))
                                                      (rule "hideAuxiliaryEq" (formula "1"))
                                                      (rule "narrowSelectArrayType" (formula "34") (term "0") (ifseqformula "16") (ifseqformula "39"))
                                                      (rule "allLeft" (formula "22") (inst "t=int::seqGet(s_1, iv_3)"))
                                                      (rule "inEqSimp_contradInEq0" (formula "22") (term "1") (ifseqformula "10"))
                                                      (rule "inEqSimp_homoInEq1" (formula "22") (term "0,1"))
                                                      (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1"))
                                                      (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1"))
                                                      (rule "mul_literals" (formula "22") (term "0,1,0,0,1"))
                                                      (rule "polySimp_addAssoc" (formula "22") (term "0,0,1"))
                                                      (rule "polySimp_addComm0" (formula "22") (term "0,0,0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "22") (term "0,0,1"))
                                                      (rule "add_literals" (formula "22") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "22") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "22") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "22") (term "0,1"))
                                                      (builtin "One Step Simplification" (formula "22"))
                                                      (rule "inEqSimp_contradInEq1" (formula "22") (term "1") (ifseqformula "9"))
                                                      (rule "qeq_literals" (formula "22") (term "0,1"))
                                                      (builtin "One Step Simplification" (formula "22"))
                                                      (rule "notLeft" (formula "22"))
                                                      (rule "pullOutSelect" (formula "34") (term "0") (inst "selectSK=arr_63"))
                                                      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "18"))
                                                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "41")) (ifInst ""  (formula "40")))
                                                      (rule "applyEqReverse" (formula "35") (term "0") (ifseqformula "1"))
                                                      (rule "hideAuxiliaryEq" (formula "1"))
                                                      (rule "narrowSelectArrayType" (formula "34") (term "0") (ifseqformula "16") (ifseqformula "40"))
                                                      (rule "applyEq" (formula "34") (term "0") (ifseqformula "11"))
                                                      (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "34"))
                                                      (builtin "One Step Simplification" (formula "2"))
                                                      (rule "replace_known_right" (formula "37") (term "0,0") (ifseqformula "34"))
                                                      (builtin "One Step Simplification" (formula "37"))
                                                      (rule "notRight" (formula "37"))
                                                      (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "1"))
                                                      (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "38")))
                                                      (rule "closeFalse" (formula "3"))
                                                   )
                                                )
                                                (branch " result_0[iv_3]@anon_heap_sort<<anonHeapFunction>>.length >= 1 FALSE"
                                                   (rule "inEqSimp_geqRight" (formula "34"))
                                                   (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0"))
                                                   (rule "add_zero_left" (formula "1") (term "0"))
                                                   (rule "inEqSimp_homoInEq1" (formula "6"))
                                                   (rule "times_zero_2" (formula "6") (term "1,0"))
                                                   (rule "add_zero_right" (formula "6") (term "0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "6"))
                                                   (rule "mul_literals" (formula "6") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "6") (ifseqformula "5"))
                                                   (rule "qeq_literals" (formula "6") (term "0"))
                                                   (builtin "One Step Simplification" (formula "6"))
                                                   (rule "closeFalse" (formula "6"))
                                                )
                                             )
                                             (branch " verif.selectvoting.system.core.ConservativeExtension.messages.length >= 1 FALSE"
                                                (rule "eqSymm" (formula "21"))
                                                (rule "inEqSimp_geqRight" (formula "33"))
                                                (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0"))
                                                (rule "add_zero_left" (formula "1") (term "0"))
                                                (rule "applyEq" (formula "30") (term "1,1,1,0,0,1,0,0") (ifseqformula "22"))
                                                (rule "add_zero_right" (formula "30") (term "1,1,0,0,1,0,0"))
                                                (rule "applyEq" (formula "8") (term "0") (ifseqformula "22"))
                                                (rule "inEqSimp_homoInEq1" (formula "8"))
                                                (rule "times_zero_2" (formula "8") (term "1,0"))
                                                (rule "add_zero_right" (formula "8") (term "0"))
                                                (rule "applyEq" (formula "2") (term "1,1,1,0,0,0,1,0,1,0") (ifseqformula "22"))
                                                (rule "add_zero_right" (formula "2") (term "1,1,0,0,0,1,0,1,0"))
                                                (rule "applyEq" (formula "31") (term "1,0") (ifseqformula "22"))
                                                (rule "seqDef_lower_equals_upper" (formula "31") (term "0"))
                                                (rule "seqPermEmpty1" (formula "31"))
                                                (rule "eqSymm" (formula "31"))
                                                (rule "eqSeqEmpty" (formula "31"))
                                                (rule "lenOfSeqDef" (formula "31") (term "0"))
                                                (builtin "One Step Simplification" (formula "31"))
                                                (rule "polySimp_elimSub" (formula "31") (term "0,1"))
                                                (rule "mul_literals" (formula "31") (term "1,0,1"))
                                                (rule "add_zero_right" (formula "31") (term "0,1"))
                                                (rule "replace_known_left" (formula "31") (term "1") (ifseqformula "22"))
                                                (builtin "One Step Simplification" (formula "31"))
                                                (rule "true_left" (formula "31"))
                                                (rule "applyEq" (formula "9") (term "0") (ifseqformula "22"))
                                                (rule "qeq_literals" (formula "9"))
                                                (rule "closeFalse" (formula "9"))
                                             )
                                          )
                                          (branch " 0 <= (int)s_1[iv_3] & (int)s_1[iv_3] < result_0.length - 0 FALSE"
                                             (rule "seqNPermRange" (formula "24") (inst "iv=iv") (userinteraction))
                                             (rule "castDel" (formula "2") (term "1"))
                                             (rule "andLeft" (formula "1"))
                                             (rule "andLeft" (formula "4"))
                                             (rule "eqSymm" (formula "33") (term "1,0,1,0"))
                                             (rule "eqSymm" (formula "6"))
                                             (rule "eqSymm" (formula "7"))
                                             (rule "eqSymm" (formula "24"))
                                             (rule "eqSymm" (formula "8"))
                                             (rule "polySimp_elimSub" (formula "31") (term "1,1"))
                                             (rule "times_zero_2" (formula "31") (term "1,1,1"))
                                             (rule "add_zero_right" (formula "31") (term "1,1"))
                                             (rule "polySimp_elimSub" (formula "2") (term "1"))
                                             (rule "times_zero_2" (formula "2") (term "1,1"))
                                             (rule "add_zero_right" (formula "2") (term "1"))
                                             (rule "getOfSeqDef" (formula "27") (term "0,1,0"))
                                             (rule "castDel" (formula "27") (term "1,0,1,0"))
                                             (rule "castDel" (formula "27") (term "2,0,1,0"))
                                             (rule "add_zero_right" (formula "27") (term "0,2,1,0,1,0"))
                                             (rule "eqSymm" (formula "27") (term "1,0"))
                                             (rule "polySimp_elimSub" (formula "27") (term "1,1,0,1,1,0"))
                                             (rule "times_zero_2" (formula "27") (term "1,1,1,0,1,1,0"))
                                             (rule "add_zero_right" (formula "27") (term "1,1,0,1,1,0"))
                                             (rule "lenOfSeqDef" (formula "23") (term "1"))
                                             (rule "polySimp_elimSub" (formula "23") (term "1,1"))
                                             (rule "mul_literals" (formula "23") (term "1,1,1"))
                                             (rule "add_zero_right" (formula "23") (term "1,1"))
                                             (rule "lenOfSeqDef" (formula "33") (term "1,0,0,0"))
                                             (rule "polySimp_elimSub" (formula "33") (term "1,1,0,0,0"))
                                             (rule "times_zero_2" (formula "33") (term "1,1,1,0,0,0"))
                                             (rule "add_zero_right" (formula "33") (term "1,1,0,0,0"))
                                             (rule "getOfSeqDef" (formula "32") (term "1"))
                                             (rule "castDel" (formula "32") (term "2,1"))
                                             (rule "castDel" (formula "32") (term "1,1"))
                                             (rule "add_zero_right" (formula "32") (term "0,2,1,1,1"))
                                             (rule "polySimp_elimSub" (formula "32") (term "1,1,0,1"))
                                             (rule "times_zero_2" (formula "32") (term "1,1,1,0,1"))
                                             (rule "add_zero_right" (formula "32") (term "1,1,0,1"))
                                             (rule "replace_known_right" (formula "32") (term "0,1") (ifseqformula "31"))
                                             (builtin "One Step Simplification" (formula "32"))
                                             (rule "lenOfSeqDef" (formula "23") (term "0"))
                                             (rule "polySimp_elimSub" (formula "23") (term "1,0"))
                                             (rule "times_zero_2" (formula "23") (term "1,1,0"))
                                             (rule "add_zero_right" (formula "23") (term "1,0"))
                                             (builtin "One Step Simplification" (formula "23"))
                                             (rule "true_left" (formula "23"))
                                             (rule "getOfSeqDef" (formula "32") (term "1,1,0,1,0"))
                                             (rule "castDel" (formula "32") (term "1,1,1,0,1,0"))
                                             (rule "castDel" (formula "32") (term "2,1,1,0,1,0"))
                                             (rule "add_zero_right" (formula "32") (term "0,2,1,1,1,1,0,1,0"))
                                             (rule "polySimp_elimSub" (formula "32") (term "1,1,0,1,1,0,1,0"))
                                             (rule "times_zero_2" (formula "32") (term "1,1,1,0,1,1,0,1,0"))
                                             (rule "add_zero_right" (formula "32") (term "1,1,0,1,1,0,1,0"))
                                             (rule "getOfSeqDef" (formula "32") (term "0,1,0,1,0"))
                                             (rule "castDel" (formula "32") (term "1,0,1,0,1,0"))
                                             (rule "castDel" (formula "32") (term "2,0,1,0,1,0"))
                                             (rule "add_zero_right" (formula "32") (term "0,2,1,1,0,1,0,1,0"))
                                             (rule "polySimp_elimSub" (formula "32") (term "1,1,0,0,1,0,1,0"))
                                             (rule "times_zero_2" (formula "32") (term "1,1,1,0,0,1,0,1,0"))
                                             (rule "add_zero_right" (formula "32") (term "1,1,0,0,1,0,1,0"))
                                             (rule "lenOfSeqDef" (formula "23") (term "0"))
                                             (rule "polySimp_elimSub" (formula "23") (term "1,0"))
                                             (rule "times_zero_2" (formula "23") (term "1,1,0"))
                                             (rule "add_zero_right" (formula "23") (term "1,0"))
                                             (rule "getOfSeqDef" (formula "26") (term "0,1,0"))
                                             (rule "castDel" (formula "26") (term "1,0,1,0"))
                                             (rule "castDel" (formula "26") (term "2,0,1,0"))
                                             (rule "add_zero_right" (formula "26") (term "0,2,1,0,1,0"))
                                             (rule "polySimp_elimSub" (formula "26") (term "1,1,0,0,1,0"))
                                             (rule "times_zero_2" (formula "26") (term "1,1,1,0,0,1,0"))
                                             (rule "add_zero_right" (formula "26") (term "1,1,0,0,1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "24") (term "1,1,0"))
                                             (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "32") (term "1,0,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,0,1,0"))
                                             (rule "polySimp_addComm1" (formula "32") (term "0,1,0,0,1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "4"))
                                             (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
                                             (rule "polySimp_addComm1" (formula "4") (term "0"))
                                             (rule "inEqSimp_ltToLeq" (formula "30") (term "1"))
                                             (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,1"))
                                             (rule "inEqSimp_ltToLeq" (formula "2"))
                                             (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                             (rule "polySimp_addComm1" (formula "2") (term "0"))
                                             (rule "getOfSeqDef" (formula "31") (term "0"))
                                             (rule "castDel" (formula "31") (term "2,0"))
                                             (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "1")))
                                             (rule "castDel" (formula "31") (term "0,1"))
                                             (rule "add_zero_right" (formula "31") (term "0,2,1,0,1"))
                                             (rule "orRight" (formula "31"))
                                             (rule "notRight" (formula "31"))
                                             (rule "eqSymm" (formula "32"))
                                             (rule "polySimp_elimSub" (formula "1") (term "1"))
                                             (rule "times_zero_2" (formula "1") (term "1,1"))
                                             (rule "add_zero_right" (formula "1") (term "1"))
                                             (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,1,1,0"))
                                             (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,1,1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "33") (term "0,1,0,0,0"))
                                             (rule "add_zero_right" (formula "33") (term "0,0,1,0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "31") (term "0"))
                                             (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "25") (term "0,1,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "33") (term "0,0,0,1,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "2"))
                                             (rule "inEqSimp_ltToLeq" (formula "33") (term "1,0,1,1,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0,1,1,0,1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "33") (term "1,0,0,1,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0,0,1,0,1,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,1,1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "24") (term "0,0"))
                                             (rule "add_zero_right" (formula "24") (term "0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,0,1,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "33") (term "0,0,1,1,0,1,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "33") (term "0,0,0,1,0,1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "1"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                             (rule "polySimp_addComm1" (formula "1") (term "0"))
                                             (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0,1,0"))
                                             (rule "applyEq" (formula "36") (term "1") (ifseqformula "5"))
                                             (rule "applyEq" (formula "6") (term "1") (ifseqformula "5"))
                                             (rule "applyEq" (formula "32") (term "1,0,0,0") (ifseqformula "23"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,1,0"))
                                             (rule "polySimp_mulComm0" (formula "24") (term "1,1,1,0"))
                                             (rule "polySimp_rightDist" (formula "24") (term "1,1,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,1,0"))
                                             (rule "mul_literals" (formula "24") (term "0,1,1,1,0"))
                                             (rule "polySimp_elimOne" (formula "24") (term "1,1,1,1,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "32") (term "1,0,0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "32") (term "0,1,0,0,1,0"))
                                             (rule "polySimp_elimOne" (formula "32") (term "0,1,0,0,1,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0"))
                                             (rule "mul_literals" (formula "24") (term "0,1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0"))
                                             (rule "mul_literals" (formula "26") (term "0,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                                             (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                                             (rule "polySimp_elimOne" (formula "4") (term "0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1"))
                                             (rule "polySimp_mulComm0" (formula "30") (term "1,1"))
                                             (rule "polySimp_rightDist" (formula "30") (term "1,1"))
                                             (rule "mul_literals" (formula "30") (term "0,1,1"))
                                             (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1"))
                                             (rule "polySimp_elimOne" (formula "30") (term "1,1,1"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                             (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                             (rule "polySimp_elimOne" (formula "2") (term "0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,1,1,0"))
                                             (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,1,1,0"))
                                             (rule "polySimp_rightDist" (formula "26") (term "1,1,0,1,1,0"))
                                             (rule "mul_literals" (formula "26") (term "0,1,1,0,1,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,1,1,0"))
                                             (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,1,1,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,1,1,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,1,1,0,1,0"))
                                             (rule "polySimp_rightDist" (formula "32") (term "1,1,0,1,1,0,1,0"))
                                             (rule "mul_literals" (formula "32") (term "0,1,1,0,1,1,0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,1,1,0,1,0"))
                                             (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,1,1,0,1,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0,1,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,0,1,0,1,0"))
                                             (rule "polySimp_rightDist" (formula "32") (term "1,1,0,0,1,0,1,0"))
                                             (rule "mul_literals" (formula "32") (term "0,1,1,0,0,1,0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,0,1,0,1,0"))
                                             (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,0,1,0,1,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "23") (term "0,0"))
                                             (rule "polySimp_mulLiterals" (formula "23") (term "0,0,0"))
                                             (rule "polySimp_elimOne" (formula "23") (term "0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0,1,0"))
                                             (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0,1,0"))
                                             (rule "mul_literals" (formula "26") (term "0,1,1,0,0,1,0"))
                                             (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0,1,0"))
                                             (rule "array2seqDef" (formula "16") (term "2,1") (inst "u=u_1"))
                                             (rule "eqSymm" (formula "16"))
                                             (rule "array2seqDef" (formula "7") (term "0") (inst "u=u"))
                                             (rule "array2seqDef" (formula "7") (term "0") (inst "u=u"))
                                             (rule "array2seqDef" (formula "30") (term "1,1,1,0,1,0") (inst "u=u"))
                                             (rule "array2seqDef" (formula "30") (term "1,0,1,0,1,0") (inst "u=u"))
                                             (rule "array2seqDef" (formula "29") (term "1") (inst "u=u"))
                                             (rule "eqSymm" (formula "29"))
                                             (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_50"))
                                             (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "18"))
                                             (builtin "One Step Simplification" (formula "3"))
                                             (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                                             (rule "hideAuxiliaryEq" (formula "3"))
                                             (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "16") (ifseqformula "32"))
                                             (rule "eqSymm" (formula "3"))
                                             (rule "applyEq" (formula "30") (term "2,1,1,0,1,0") (ifseqformula "3"))
                                             (rule "applyEq" (formula "24") (term "2,1,1,0") (ifseqformula "3"))
                                             (rule "applyEq" (formula "30") (term "2,0,1,0,1,0") (ifseqformula "3"))
                                             (rule "applyEq" (formula "29") (term "1") (ifseqformula "3"))
                                             (builtin "One Step Simplification" (formula "29"))
                                             (rule "false_right" (formula "29"))
                                             (rule "applyEq" (formula "24") (term "2,0,1,0") (ifseqformula "3"))
                                             (rule "pullOutSelect" (formula "6") (term "1,0") (inst "selectSK=verif_selectvoting_system_core_ConservativeExtension_messages_10"))
                                             (rule "simplifySelectOfAnonEQ" (formula "6") (ifseqformula "12"))
                                             (builtin "One Step Simplification" (formula "6"))
                                             (rule "applyEqReverse" (formula "7") (term "1,0") (ifseqformula "6"))
                                             (rule "hideAuxiliaryEq" (formula "6"))
                                             (rule "eqSeqDef2" (formula "19") (inst "iv=iv") (ifseqformula "19"))
                                             (builtin "One Step Simplification" (formula "19"))
                                             (rule "true_left" (formula "19"))
                                             (rule "eqSeqDef2" (formula "18") (inst "iv=iv") (ifseqformula "18"))
                                             (builtin "One Step Simplification" (formula "18"))
                                             (rule "true_left" (formula "18"))
                                             (rule "array2seqDef" (formula "13") (term "2,1") (inst "u=u_1"))
                                             (rule "eqSymm" (formula "13"))
                                             (rule "eqSeqDef" (formula "13") (inst "iv=iv"))
                                             (rule "andLeft" (formula "13"))
                                             (rule "getOfSeqDef" (formula "14") (term "1,1,0"))
                                             (rule "castDel" (formula "14") (term "2,1,1,0"))
                                             (rule "castDel" (formula "14") (term "1,1,1,0"))
                                             (rule "add_zero_right" (formula "14") (term "0,2,0,1,1,1,1,0"))
                                             (rule "add_zero_right" (formula "14") (term "0,2,1,2,1,1,1,0"))
                                             (rule "eqSymm" (formula "14") (term "1,0"))
                                             (rule "polySimp_elimSub" (formula "14") (term "1,1,0,0,1,0"))
                                             (rule "times_zero_2" (formula "14") (term "1,1,1,0,0,1,0"))
                                             (rule "add_zero_right" (formula "14") (term "1,1,0,0,1,0"))
                                             (rule "lenOfSeqDef" (formula "13") (term "0"))
                                             (rule "eqSymm" (formula "13"))
                                             (rule "polySimp_elimSub" (formula "13") (term "1,1"))
                                             (rule "times_zero_2" (formula "13") (term "1,1,1"))
                                             (rule "add_zero_right" (formula "13") (term "1,1"))
                                             (rule "lenOfSeqDef" (formula "14") (term "1,1,0,0"))
                                             (rule "polySimp_elimSub" (formula "14") (term "1,1,1,0,0"))
                                             (rule "times_zero_2" (formula "14") (term "1,1,1,1,0,0"))
                                             (rule "add_zero_right" (formula "14") (term "1,1,1,0,0"))
                                             (rule "getOfSeqDef" (formula "14") (term "1,1,0"))
                                             (rule "castDel" (formula "14") (term "1,1,1,0"))
                                             (rule "castDel" (formula "14") (term "2,1,1,0"))
                                             (rule "add_zero_right" (formula "14") (term "0,2,1,2,1,1,1,0"))
                                             (rule "add_zero_right" (formula "14") (term "0,2,0,1,1,1,1,0"))
                                             (rule "eqSymm" (formula "14") (term "1,0"))
                                             (rule "polySimp_elimSub" (formula "14") (term "1,1,0,0,1,0"))
                                             (rule "times_zero_2" (formula "14") (term "1,1,1,0,0,1,0"))
                                             (rule "add_zero_right" (formula "14") (term "1,1,0,0,1,0"))
                                             (rule "lenOfSeqDef" (formula "13") (term "0"))
                                             (rule "eqSymm" (formula "13"))
                                             (rule "polySimp_elimSub" (formula "13") (term "1,1"))
                                             (rule "times_zero_2" (formula "13") (term "1,1,1"))
                                             (rule "add_zero_right" (formula "13") (term "1,1"))
                                             (rule "inEqSimp_ltToLeq" (formula "14") (term "0,1,1,0,0"))
                                             (rule "add_zero_right" (formula "14") (term "0,0,1,1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,1,1,0"))
                                             (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,1,1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0,1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "13") (term "0,1"))
                                             (rule "add_zero_right" (formula "13") (term "0,0,1"))
                                             (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1"))
                                             (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0"))
                                             (rule "add_zero_right" (formula "13") (term "0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,1,1,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0,1,0"))
                                             (rule "applyEq" (formula "14") (term "2,0,1,0") (ifseqformula "3"))
                                             (rule "applyEq" (formula "14") (term "2,1,1,0") (ifseqformula "3"))
                                             (rule "applyEq" (formula "14") (term "0,1,0,0,1,0,0") (ifseqformula "13"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,1,1,0"))
                                             (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,1,1,0"))
                                             (rule "polySimp_rightDist" (formula "14") (term "1,1,0,1,1,0"))
                                             (rule "mul_literals" (formula "14") (term "0,1,1,0,1,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,1,1,0"))
                                             (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,1,1,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0,1,0"))
                                             (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0,1,0"))
                                             (rule "mul_literals" (formula "14") (term "0,1,1,0,0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0,1,0"))
                                             (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0,1,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,1"))
                                             (rule "polySimp_mulLiterals" (formula "13") (term "0,0,1"))
                                             (rule "polySimp_elimOne" (formula "13") (term "0,0,1"))
                                             (rule "applyEq" (formula "13") (term "1") (ifseqformula "19"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,0"))
                                             (rule "polySimp_mulLiterals" (formula "13") (term "0,0,0"))
                                             (rule "polySimp_elimOne" (formula "13") (term "0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
                                             (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "0,1,1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "14") (term "0,0,1,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "14") (term "0,0,1,1,1,0,0"))
                                             (rule "applyEq" (formula "14") (term "1,1,1,0,0") (ifseqformula "19"))
                                             (rule "nnf_imp2or" (formula "20") (term "0"))
                                             (rule "nnf_ex2all" (formula "27"))
                                             (rule "nnf_imp2or" (formula "23") (term "0"))
                                             (rule "nnf_imp2or" (formula "15") (term "0"))
                                             (rule "nnf_notAnd" (formula "1") (term "0"))
                                             (rule "nnf_notAnd" (formula "21") (term "0,0"))
                                             (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "21") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "21") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0"))
                                             (rule "mul_literals" (formula "21") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "23") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "23") (term "1,0,0,0,0,0"))
                                             (rule "add_literals" (formula "23") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0"))
                                             (rule "mul_literals" (formula "23") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "23") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "23") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0"))
                                             (rule "nnf_notAnd" (formula "15") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "15") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
                                             (rule "mul_literals" (formula "15") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "15") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "15") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0"))
                                             (rule "nnf_notAll" (formula "1") (term "1,0"))
                                             (rule "nnf_notAnd" (formula "1") (term "0,0"))
                                             (rule "nnf_imp2or" (formula "1") (term "0,0,1,0"))
                                             (rule "nnf_notOr" (formula "1") (term "0,1,0"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "arrayLengthNotNegative" (formula "9") (term "1,1,0"))
                                             (rule "arrayLengthNotNegative" (formula "25") (term "1,1"))
                                             (rule "arrayLengthIsAShort" (formula "28") (term "1,1,0"))
                                             (builtin "One Step Simplification" (formula "28"))
                                             (rule "true_left" (formula "28"))
                                             (rule "arrayLengthIsAShort" (formula "10") (term "1,1,0"))
                                             (builtin "One Step Simplification" (formula "10"))
                                             (rule "true_left" (formula "10"))
                                             (rule "equalityToSeqGetAndSeqLenLeft" (formula "6") (inst "iv=iv"))
                                             (rule "andLeft" (formula "6"))
                                             (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
                                             (rule "applyEq" (formula "6") (term "0,0") (ifseqformula "8"))
                                             (builtin "One Step Simplification" (formula "6"))
                                             (rule "true_left" (formula "6"))
                                             (rule "applyEq" (formula "6") (term "0,0,1,0") (ifseqformula "7"))
                                             (builtin "One Step Simplification" (formula "6"))
                                             (rule "true_left" (formula "6"))
                                             (rule "lenNonNegative" (formula "21") (term "1"))
                                             (rule "inEqSimp_commuteLeq" (formula "21"))
                                             (rule "commute_or_2" (formula "25") (term "0"))
                                             (rule "commute_or_2" (formula "16") (term "0"))
                                             (rule "cnf_rightDist" (formula "23") (term "0"))
                                             (rule "distr_forallAnd" (formula "23"))
                                             (rule "andLeft" (formula "23"))
                                             (rule "commute_or" (formula "1") (term "0,0"))
                                             (rule "commute_or" (formula "24") (term "0"))
                                             (rule "commute_or" (formula "26") (term "0,0"))
                                             (rule "commute_or" (formula "16") (term "0,0"))
                                             (rule "cut_direct" (formula "31") (term "0"))
                                             (branch "CUT: (int)s_1[iv_3] >= 0 TRUE"
                                                (builtin "One Step Simplification" (formula "32"))
                                                (rule "inEqSimp_leqRight" (formula "32"))
                                                (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                                (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0,0"))
                                                (rule "add_zero_left" (formula "1") (term "0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                                (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                                (rule "polySimp_elimOne" (formula "1") (term "1"))
                                                (rule "ifthenelse_split" (formula "24") (term "0"))
                                                (branch "result_0.length >= 1 TRUE"
                                                   (rule "eqSymm" (formula "25"))
                                                   (rule "applyEq" (formula "27") (term "1,1,0,0") (ifseqformula "25"))
                                                   (rule "applyEq" (formula "7") (term "0") (ifseqformula "25"))
                                                   (rule "applyEq" (formula "28") (term "1,1,0") (ifseqformula "24"))
                                                   (rule "applyEq" (formula "17") (term "1,1,0") (ifseqformula "24"))
                                                   (rule "applyEq" (formula "25") (term "1,1,0,0") (ifseqformula "24"))
                                                   (rule "applyEq" (formula "22") (term "0") (ifseqformula "24"))
                                                   (rule "applyEq" (formula "25") (term "1,1,1,0") (ifseqformula "23"))
                                                   (rule "applyEq" (formula "3") (term "1,0,1,0,0") (ifseqformula "23"))
                                                   (rule "applyEq" (formula "16") (term "1") (ifseqformula "23"))
                                                   (rule "inEqSimp_subsumption1" (formula "28") (ifseqformula "22"))
                                                   (rule "leq_literals" (formula "28") (term "0"))
                                                   (builtin "One Step Simplification" (formula "28"))
                                                   (rule "true_left" (formula "28"))
                                                   (rule "commute_and_2" (formula "3") (term "0,1,0"))
                                                   (rule "commute_and" (formula "3") (term "0,0,1,0"))
                                                   (rule "ifthenelse_to_or_right" (formula "27") (term "0,0,0"))
                                                   (builtin "One Step Simplification" (formula "27"))
                                                   (rule "nnf_notAnd" (formula "27") (term "0,0,0,0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0,0,0,0"))
                                                   (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0,0,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0,0,0,0"))
                                                   (rule "add_literals" (formula "27") (term "0,0,0,1,0,0,0,0,0"))
                                                   (rule "add_zero_left" (formula "27") (term "0,0,1,0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0,0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0,0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0,0,0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0,0,0,0"))
                                                   (rule "mul_literals" (formula "27") (term "1,0,0,0,0,0,0,0,0"))
                                                   (rule "add_zero_right" (formula "27") (term "0,0,0,0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0,0,0,0"))
                                                   (rule "mul_literals" (formula "27") (term "1,0,0,0,0,0,0"))
                                                   (rule "nnf_notAnd" (formula "27") (term "0,1,1,0,0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "27") (term "1,0,1,1,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,1,1,0,0,0"))
                                                   (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,1,1,0,0,0"))
                                                   (rule "add_literals" (formula "27") (term "0,0,0,1,0,1,1,0,0,0"))
                                                   (rule "add_zero_left" (formula "27") (term "0,0,1,0,1,1,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,1,1,0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,1,1,0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "27") (term "1,1,0,1,1,0,0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "27") (term "0,0,1,1,0,0,0"))
                                                   (rule "times_zero_1" (formula "27") (term "1,0,0,0,0,1,1,0,0,0"))
                                                   (rule "add_zero_right" (formula "27") (term "0,0,0,0,1,1,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,1,1,0,0,0"))
                                                   (rule "mul_literals" (formula "27") (term "1,0,0,1,1,0,0,0"))
                                                   (rule "commute_or" (formula "27") (term "0,0"))
                                                   (rule "commute_or_2" (formula "27") (term "0"))
                                                   (rule "commute_or" (formula "27") (term "1,1,0"))
                                                   (rule "commute_or_2" (formula "27") (term "0,1,0"))
                                                   (rule "commute_or_2" (formula "27") (term "0,1,1,0"))
                                                   (rule "commute_or" (formula "27") (term "0,0,1,0"))
                                                   (rule "ifthenelse_to_or_right" (formula "17") (term "0,0,0"))
                                                   (builtin "One Step Simplification" (formula "17"))
                                                   (rule "nnf_notAnd" (formula "17") (term "0,0,0,0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0,0,0,0"))
                                                   (rule "times_zero_1" (formula "17") (term "1,0,0,0,0,0,0,0,0"))
                                                   (rule "add_zero_right" (formula "17") (term "0,0,0,0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0,0,0,0"))
                                                   (rule "mul_literals" (formula "17") (term "1,0,0,0,0,0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0,0,0,0"))
                                                   (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0,0,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0,0,0,0"))
                                                   (rule "add_literals" (formula "17") (term "0,0,0,1,0,0,0,0,0"))
                                                   (rule "add_zero_left" (formula "17") (term "0,0,1,0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0,0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,0,0,0"))
                                                   (rule "nnf_notAnd" (formula "17") (term "1,1,0,0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "17") (term "1,1,1,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,1,1,0,0,0"))
                                                   (rule "mul_literals" (formula "17") (term "0,1,0,0,1,1,1,0,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,1,1,0,0,0"))
                                                   (rule "add_literals" (formula "17") (term "0,0,0,1,1,1,0,0,0"))
                                                   (rule "add_zero_left" (formula "17") (term "0,0,1,1,1,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,1,1,0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,1,0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "17") (term "1,1,1,1,0,0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "17") (term "0,1,1,0,0,0"))
                                                   (rule "times_zero_1" (formula "17") (term "1,0,0,0,1,1,0,0,0"))
                                                   (rule "add_zero_right" (formula "17") (term "0,0,0,1,1,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,1,1,0,0,0"))
                                                   (rule "mul_literals" (formula "17") (term "1,0,1,1,0,0,0"))
                                                   (rule "commute_or" (formula "17") (term "0,0"))
                                                   (rule "commute_or_2" (formula "17") (term "0"))
                                                   (rule "commute_or_2" (formula "17") (term "0,1,0"))
                                                   (rule "commute_or" (formula "17") (term "1,1,0"))
                                                   (rule "commute_or" (formula "27") (term "0,0,1,1,0"))
                                                   (rule "ifthenelse_split" (formula "16") (term "0"))
                                                   (branch " verif.selectvoting.system.core.ConservativeExtension.messages.length >= 1 TRUE"
                                                      (rule "applyEq" (formula "16") (term "0") (ifseqformula "17"))
                                                      (rule "applyEq" (formula "11") (term "1,1,0") (ifseqformula "16"))
                                                      (rule "applyEq" (formula "17") (term "1,1,1,0,0,1,0,0,1,0") (ifseqformula "16"))
                                                      (rule "applyEq" (formula "17") (term "1,1,0,1,1,0") (ifseqformula "16"))
                                                      (rule "applyEq" (formula "10") (term "0") (ifseqformula "16"))
                                                      (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "22"))
                                                      (rule "leq_literals" (formula "10") (term "0"))
                                                      (builtin "One Step Simplification" (formula "10"))
                                                      (rule "true_left" (formula "10"))
                                                      (rule "commute_or" (formula "16") (term "0,0,1,0"))
                                                      (rule "cnf_rightDist" (formula "26") (term "1,1,0"))
                                                      (rule "commute_or_2" (formula "26") (term "0,1,1,0"))
                                                      (rule "shift_paren_or" (formula "26") (term "1,1,1,0"))
                                                      (rule "commute_or_2" (formula "26") (term "0,0,1,1,0"))
                                                      (rule "cnf_rightDist" (formula "16") (term "1,1,0"))
                                                      (rule "commute_or_2" (formula "16") (term "0,1,1,0"))
                                                      (rule "inEqSimp_or_tautInEq0" (formula "16") (term "0,0,1,1,0"))
                                                      (rule "add_zero_right" (formula "16") (term "1,1,0,0,1,1,0"))
                                                      (rule "qeq_literals" (formula "16") (term "1,0,0,1,1,0"))
                                                      (builtin "One Step Simplification" (formula "16"))
                                                      (rule "shift_paren_or" (formula "16") (term "1,1,0"))
                                                      (rule "cnf_rightDist" (formula "16") (term "0"))
                                                      (rule "distr_forallAnd" (formula "16"))
                                                      (rule "andLeft" (formula "16"))
                                                      (rule "shift_paren_or" (formula "17") (term "0"))
                                                      (rule "shift_paren_or" (formula "16") (term "0"))
                                                      (rule "commute_or_2" (formula "17") (term "0,0"))
                                                      (builtin "One Step Simplification" (formula "17"))
                                                      (rule "commute_or_2" (formula "16") (term "0,0"))
                                                      (builtin "One Step Simplification" (formula "16"))
                                                      (rule "commute_or" (formula "17") (term "0,0"))
                                                      (rule "inEqSimp_or_tautInEq1" (formula "17") (term "0"))
                                                      (rule "inEqSimp_homoInEq1" (formula "17") (term "1,0"))
                                                      (rule "polySimp_pullOutFactor1" (formula "17") (term "0,1,0"))
                                                      (rule "add_literals" (formula "17") (term "1,0,1,0"))
                                                      (rule "times_zero_1" (formula "17") (term "0,1,0"))
                                                      (rule "leq_literals" (formula "17") (term "1,0"))
                                                      (builtin "One Step Simplification" (formula "17"))
                                                      (rule "true_left" (formula "17"))
                                                      (rule "shift_paren_or" (formula "16") (term "0,0"))
                                                      (rule "commute_or" (formula "16") (term "0,0,0"))
                                                      (builtin "One Step Simplification" (formula "16"))
                                                      (rule "ifthenelse_to_or_right2" (formula "3") (term "0,0,0,1,0"))
                                                      (builtin "One Step Simplification" (formula "3"))
                                                      (rule "nnf_notAnd" (formula "3") (term "0,0,0,0,0,1,0"))
                                                      (rule "inEqSimp_notLeq" (formula "3") (term "1,0,0,0,0,0,1,0"))
                                                      (rule "polySimp_rightDist" (formula "3") (term "1,0,0,1,0,0,0,0,0,1,0"))
                                                      (rule "mul_literals" (formula "3") (term "0,1,0,0,1,0,0,0,0,0,1,0"))
                                                      (rule "polySimp_addAssoc" (formula "3") (term "0,0,1,0,0,0,0,0,1,0"))
                                                      (rule "add_literals" (formula "3") (term "0,0,0,1,0,0,0,0,0,1,0"))
                                                      (rule "add_zero_left" (formula "3") (term "0,0,1,0,0,0,0,0,1,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "1,0,0,0,0,0,1,0"))
                                                      (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0,0,0,0,1,0"))
                                                      (rule "polySimp_elimOne" (formula "3") (term "1,1,0,0,0,0,0,1,0"))
                                                      (rule "inEqSimp_notGeq" (formula "3") (term "0,0,0,0,0,0,1,0"))
                                                      (rule "mul_literals" (formula "3") (term "1,0,0,0,0,0,0,0,0,1,0"))
                                                      (rule "add_zero_right" (formula "3") (term "0,0,0,0,0,0,0,0,1,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "0,0,0,0,0,0,1,0"))
                                                      (rule "mul_literals" (formula "3") (term "1,0,0,0,0,0,0,1,0"))
                                                      (rule "allLeft" (formula "17") (inst "t=iv_3"))
                                                      (rule "inEqSimp_commuteGeq" (formula "17") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "17") (term "1,0") (ifseqformula "4"))
                                                      (rule "qeq_literals" (formula "17") (term "0,1,0"))
                                                      (builtin "One Step Simplification" (formula "17"))
                                                      (rule "inEqSimp_contradInEq1" (formula "17") (term "1") (ifseqformula "5"))
                                                      (rule "inEqSimp_homoInEq1" (formula "17") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,0,1"))
                                                      (rule "add_literals" (formula "17") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "17") (term "1,0,0,1"))
                                                      (rule "add_zero_right" (formula "17") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "17") (term "0,1"))
                                                      (builtin "One Step Simplification" (formula "17"))
                                                      (rule "notLeft" (formula "17"))
                                                      (rule "pullOutSelect" (formula "30") (term "0") (inst "selectSK=arr_53"))
                                                      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "13"))
                                                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "33")) (ifInst ""  (formula "32")))
                                                      (rule "applyEqReverse" (formula "31") (term "0") (ifseqformula "1"))
                                                      (rule "hideAuxiliaryEq" (formula "1"))
                                                      (rule "narrowSelectArrayType" (formula "30") (term "0") (ifseqformula "11") (ifseqformula "32"))
                                                      (rule "allLeft" (formula "29") (inst "t=iv_3"))
                                                      (rule "inEqSimp_commuteGeq" (formula "29") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "29") (term "1") (ifseqformula "5"))
                                                      (rule "inEqSimp_homoInEq1" (formula "29") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0,1"))
                                                      (rule "add_literals" (formula "29") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "29") (term "1,0,0,1"))
                                                      (rule "add_zero_right" (formula "29") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "29") (term "0,1"))
                                                      (builtin "One Step Simplification" (formula "29"))
                                                      (rule "inEqSimp_contradInEq1" (formula "29") (term "1") (ifseqformula "4"))
                                                      (rule "qeq_literals" (formula "29") (term "0,1"))
                                                      (builtin "One Step Simplification" (formula "29"))
                                                      (rule "notLeft" (formula "29"))
                                                      (rule "pullOutSelect" (formula "30") (term "0") (inst "selectSK=arr_54"))
                                                      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "20"))
                                                      (builtin "One Step Simplification" (formula "1"))
                                                      (rule "applyEqReverse" (formula "31") (term "0") (ifseqformula "1"))
                                                      (rule "hideAuxiliaryEq" (formula "1"))
                                                      (rule "shift_paren_or" (formula "26") (term "0,1,1,1,0"))
                                                      (rule "ifthenelse_to_or_left" (formula "26") (term "0,0,0,1,0"))
                                                      (rule "eqSymm" (formula "26") (term "1,0,0,0,0,1,0"))
                                                      (rule "eqSymm" (formula "26") (term "1,1,0,0,0,1,0"))
                                                      (rule "nnf_notAnd" (formula "26") (term "0,0,0,0,0,1,0"))
                                                      (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0,0,0,0,1,0"))
                                                      (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0,0,0,0,1,0"))
                                                      (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0,0,0,0,1,0"))
                                                      (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0,0,0,0,1,0"))
                                                      (rule "add_literals" (formula "26") (term "0,0,0,1,0,0,0,0,0,1,0"))
                                                      (rule "add_zero_left" (formula "26") (term "0,0,1,0,0,0,0,0,1,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0,0,0,0,1,0"))
                                                      (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0,0,0,0,1,0"))
                                                      (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0,0,0,0,1,0"))
                                                      (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0,0,0,0,1,0"))
                                                      (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0,0,0,0,1,0"))
                                                      (rule "add_literals" (formula "26") (term "0,0,0,0,0,0,0,0,1,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0,0,0,0,1,0"))
                                                      (rule "mul_literals" (formula "26") (term "1,0,0,0,0,0,0,1,0"))
                                                      (rule "allLeft" (formula "24") (inst "t=iv_3"))
                                                      (rule "inEqSimp_commuteGeq" (formula "24") (term "1,0"))
                                                      (rule "inEqSimp_contradInEq1" (formula "24") (term "0,0") (ifseqformula "4"))
                                                      (rule "qeq_literals" (formula "24") (term "0,0,0"))
                                                      (builtin "One Step Simplification" (formula "24"))
                                                      (rule "inEqSimp_contradInEq1" (formula "24") (term "0") (ifseqformula "5"))
                                                      (rule "inEqSimp_homoInEq1" (formula "24") (term "0,0"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,0,0"))
                                                      (rule "add_literals" (formula "24") (term "1,1,0,0,0"))
                                                      (rule "times_zero_1" (formula "24") (term "1,0,0,0"))
                                                      (rule "add_zero_right" (formula "24") (term "0,0,0"))
                                                      (rule "leq_literals" (formula "24") (term "0,0"))
                                                      (builtin "One Step Simplification" (formula "24"))
                                                      (rule "inEqSimp_contradInEq1" (formula "24") (ifseqformula "1"))
                                                      (rule "andLeft" (formula "24"))
                                                      (rule "inEqSimp_homoInEq1" (formula "24"))
                                                      (rule "polySimp_mulComm0" (formula "24") (term "1,0"))
                                                      (rule "polySimp_rightDist" (formula "24") (term "1,0"))
                                                      (rule "mul_literals" (formula "24") (term "0,1,0"))
                                                      (rule "polySimp_addAssoc" (formula "24") (term "0"))
                                                      (rule "polySimp_addComm0" (formula "24") (term "0,0"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "24") (term "0"))
                                                      (rule "add_literals" (formula "24") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "24") (term "1,0"))
                                                      (rule "add_literals" (formula "24") (term "0"))
                                                      (rule "leq_literals" (formula "24"))
                                                      (rule "closeFalse" (formula "24"))
                                                   )
                                                   (branch " verif.selectvoting.system.core.ConservativeExtension.messages.length >= 1 FALSE"
                                                      (rule "eqSymm" (formula "16"))
                                                      (rule "inEqSimp_geqRight" (formula "31"))
                                                      (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                      (rule "add_literals" (formula "1") (term "0,0"))
                                                      (rule "add_zero_left" (formula "1") (term "0"))
                                                      (rule "applyEq" (formula "28") (term "1,1,0,1,1,0") (ifseqformula "17"))
                                                      (rule "applyEq" (formula "31") (term "1,1,0") (ifseqformula "17"))
                                                      (rule "applyEq" (formula "2") (term "1") (ifseqformula "17"))
                                                      (rule "applyEq" (formula "17") (term "1,1,0,1,0") (ifseqformula "16"))
                                                      (rule "applyEq" (formula "25") (term "1,1,1,0") (ifseqformula "16"))
                                                      (rule "add_zero_right" (formula "25") (term "1,1,0"))
                                                      (rule "applyEq" (formula "28") (term "1,1") (ifseqformula "16"))
                                                      (rule "seqDef_lower_equals_upper" (formula "28") (term "1"))
                                                      (rule "seqPermEmpty2" (formula "28"))
                                                      (rule "eqSymm" (formula "28"))
                                                      (rule "eqSeqEmpty" (formula "28"))
                                                      (rule "lenOfSeqDef" (formula "28") (term "0"))
                                                      (builtin "One Step Simplification" (formula "28"))
                                                      (rule "polySimp_elimSub" (formula "28") (term "0,1"))
                                                      (rule "times_zero_2" (formula "28") (term "1,0,1"))
                                                      (rule "add_zero_right" (formula "28") (term "0,1"))
                                                      (rule "replace_known_left" (formula "28") (term "1") (ifseqformula "16"))
                                                      (builtin "One Step Simplification" (formula "28"))
                                                      (rule "true_left" (formula "28"))
                                                      (rule "applyEq" (formula "18") (term "1,1,0") (ifseqformula "16"))
                                                      (rule "applyEq" (formula "28") (term "1,1,1,0,0") (ifseqformula "16"))
                                                      (rule "add_zero_right" (formula "28") (term "1,1,0,0"))
                                                      (rule "applyEq" (formula "3") (term "1,1,1,0,0,0,0,0,0,1,0") (ifseqformula "16"))
                                                      (rule "add_zero_right" (formula "3") (term "1,1,0,0,0,0,0,0,1,0"))
                                                      (rule "applyEq" (formula "27") (term "1,1,0,1,0") (ifseqformula "16"))
                                                      (rule "applyEq" (formula "17") (term "1,1,1,1,1,1,0") (ifseqformula "16"))
                                                      (rule "add_zero_right" (formula "17") (term "1,1,1,1,1,0"))
                                                      (rule "applyEq" (formula "27") (term "1,1,1,1,1,1,0") (ifseqformula "16"))
                                                      (rule "add_zero_right" (formula "27") (term "1,1,1,1,1,0"))
                                                      (rule "applyEq" (formula "5") (term "0") (ifseqformula "16"))
                                                      (rule "inEqSimp_homoInEq1" (formula "5"))
                                                      (rule "times_zero_2" (formula "5") (term "1,0"))
                                                      (rule "add_zero_right" (formula "5") (term "0"))
                                                      (rule "applyEq" (formula "25") (term "1,1,0,0") (ifseqformula "16"))
                                                      (rule "applyEq" (formula "27") (term "1,1,1,0,0,0,0,0,1,0") (ifseqformula "16"))
                                                      (rule "add_zero_right" (formula "27") (term "1,1,0,0,0,0,0,1,0"))
                                                      (rule "applyEq" (formula "22") (term "0") (ifseqformula "16"))
                                                      (rule "qeq_literals" (formula "22"))
                                                      (rule "closeFalse" (formula "22"))
                                                   )
                                                )
                                                (branch "result_0.length >= 1 FALSE"
                                                   (rule "eqSymm" (formula "24"))
                                                   (rule "inEqSimp_geqRight" (formula "33"))
                                                   (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0"))
                                                   (rule "add_zero_left" (formula "1") (term "0"))
                                                   (rule "applyEqRigid" (formula "29") (term "1,1,0") (ifseqformula "25"))
                                                   (rule "applyEqRigid" (formula "24") (term "0") (ifseqformula "25"))
                                                   (rule "qeq_literals" (formula "24"))
                                                   (rule "true_left" (formula "24"))
                                                   (rule "applyEqRigid" (formula "26") (term "1,1,0,0") (ifseqformula "24"))
                                                   (rule "applyEq" (formula "19") (term "1,1,0") (ifseqformula "24"))
                                                   (rule "applyEq" (formula "26") (term "1,1,1,0") (ifseqformula "24"))
                                                   (rule "add_literals" (formula "26") (term "1,1,0"))
                                                   (rule "applyEq" (formula "25") (term "1,1,0,0") (ifseqformula "24"))
                                                   (rule "applyEqRigid" (formula "8") (term "0") (ifseqformula "24"))
                                                   (rule "inEqSimp_homoInEq1" (formula "8"))
                                                   (rule "times_zero_2" (formula "8") (term "1,0"))
                                                   (rule "add_zero_right" (formula "8") (term "0"))
                                                   (rule "applyEq" (formula "4") (term "1,0,1,0,0") (ifseqformula "24"))
                                                   (rule "applyEq" (formula "18") (term "1") (ifseqformula "24"))
                                                   (builtin "One Step Simplification" (formula "18"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "8"))
                                                   (rule "mul_literals" (formula "8") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "8") (ifseqformula "5"))
                                                   (rule "qeq_literals" (formula "8") (term "0"))
                                                   (builtin "One Step Simplification" (formula "8"))
                                                   (rule "closeFalse" (formula "8"))
                                                )
                                             )
                                             (branch "CUT: (int)s_1[iv_3] >= 0 FALSE"
                                                (builtin "One Step Simplification" (formula "32"))
                                                (rule "false_right" (formula "32"))
                                                (rule "inEqSimp_geqRight" (formula "31"))
                                                (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                (rule "mul_literals" (formula "1") (term "1"))
                                                (rule "ifthenelse_split" (formula "23") (term "0"))
                                                (branch "result_0.length >= 1 TRUE"
                                                   (rule "eqSymm" (formula "24"))
                                                   (rule "applyEq" (formula "6") (term "0") (ifseqformula "24"))
                                                   (rule "applyEq" (formula "16") (term "1,1,0") (ifseqformula "23"))
                                                   (rule "applyEq" (formula "25") (term "1,1,1,0") (ifseqformula "23"))
                                                   (rule "applyEq" (formula "24") (term "1,1,0,0") (ifseqformula "23"))
                                                   (rule "applyEq" (formula "27") (term "1,1,0") (ifseqformula "23"))
                                                   (rule "applyEq" (formula "21") (term "0") (ifseqformula "23"))
                                                   (rule "applyEq" (formula "24") (term "1,1,0,0") (ifseqformula "22"))
                                                   (rule "applyEq" (formula "15") (term "1") (ifseqformula "22"))
                                                   (rule "applyEq" (formula "2") (term "1,0,1,0,0") (ifseqformula "22"))
                                                   (rule "inEqSimp_subsumption1" (formula "27") (ifseqformula "21"))
                                                   (rule "leq_literals" (formula "27") (term "0"))
                                                   (builtin "One Step Simplification" (formula "27"))
                                                   (rule "true_left" (formula "27"))
                                                   (rule "commute_and_2" (formula "2") (term "0,1,0"))
                                                   (rule "commute_and" (formula "2") (term "0,0,1,0"))
                                                   (rule "ifthenelse_to_or_left" (formula "26") (term "0,0,0"))
                                                   (rule "eqSymm" (formula "26") (term "1,0,0,0,0"))
                                                   (rule "eqSymm" (formula "26") (term "1,1,0,0,0"))
                                                   (builtin "One Step Simplification" (formula "26"))
                                                   (rule "nnf_notAnd" (formula "26") (term "0,0,0,0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0,0,0,0"))
                                                   (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0,0,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0,0,0,0"))
                                                   (rule "add_literals" (formula "26") (term "0,0,0,1,0,0,0,0,0"))
                                                   (rule "add_zero_left" (formula "26") (term "0,0,1,0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0,0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0,0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0,0,0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0,0,0,0"))
                                                   (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0,0,0,0"))
                                                   (rule "add_zero_right" (formula "26") (term "0,0,0,0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0,0,0,0"))
                                                   (rule "mul_literals" (formula "26") (term "1,0,0,0,0,0,0"))
                                                   (rule "nnf_notAnd" (formula "26") (term "0,1,1,0,0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "26") (term "1,0,1,1,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,1,1,0,0,0"))
                                                   (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,1,1,0,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,1,1,0,0,0"))
                                                   (rule "add_literals" (formula "26") (term "0,0,0,1,0,1,1,0,0,0"))
                                                   (rule "add_zero_left" (formula "26") (term "0,0,1,0,1,1,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,1,1,0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,1,1,0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "26") (term "1,1,0,1,1,0,0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "26") (term "0,0,1,1,0,0,0"))
                                                   (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,1,1,0,0,0"))
                                                   (rule "add_zero_right" (formula "26") (term "0,0,0,0,1,1,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,1,1,0,0,0"))
                                                   (rule "mul_literals" (formula "26") (term "1,0,0,1,1,0,0,0"))
                                                   (rule "commute_or" (formula "26") (term "0,0"))
                                                   (rule "commute_or_2" (formula "26") (term "0"))
                                                   (rule "commute_or_2" (formula "26") (term "0,1,0"))
                                                   (rule "commute_or" (formula "26") (term "1,1,0"))
                                                   (rule "commute_or" (formula "26") (term "0,0,1,0"))
                                                   (rule "commute_or_2" (formula "26") (term "0,1,1,0"))
                                                   (rule "ifthenelse_to_or_left" (formula "16") (term "0,0,0"))
                                                   (rule "eqSymm" (formula "16") (term "1,1,0,0,0"))
                                                   (builtin "One Step Simplification" (formula "16"))
                                                   (rule "eqSymm" (formula "16") (term "1,0,0,0,0"))
                                                   (rule "nnf_notAnd" (formula "16") (term "0,0,0,0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0,0,0,0"))
                                                   (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0,0,0,0"))
                                                   (rule "add_zero_right" (formula "16") (term "0,0,0,0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0,0,0,0"))
                                                   (rule "mul_literals" (formula "16") (term "1,0,0,0,0,0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0,0,0,0"))
                                                   (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0,0,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0,0,0,0"))
                                                   (rule "add_literals" (formula "16") (term "0,0,0,1,0,0,0,0,0"))
                                                   (rule "add_zero_left" (formula "16") (term "0,0,1,0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0,0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,0,0,0"))
                                                   (rule "nnf_notAnd" (formula "16") (term "1,1,0,0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "16") (term "1,1,1,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,1,1,0,0,0"))
                                                   (rule "mul_literals" (formula "16") (term "0,1,0,0,1,1,1,0,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,1,1,0,0,0"))
                                                   (rule "add_literals" (formula "16") (term "0,0,0,1,1,1,0,0,0"))
                                                   (rule "add_zero_left" (formula "16") (term "0,0,1,1,1,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,1,1,0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,1,0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "16") (term "1,1,1,1,0,0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "16") (term "0,1,1,0,0,0"))
                                                   (rule "times_zero_1" (formula "16") (term "1,0,0,0,1,1,0,0,0"))
                                                   (rule "add_zero_right" (formula "16") (term "0,0,0,1,1,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,1,1,0,0,0"))
                                                   (rule "mul_literals" (formula "16") (term "1,0,1,1,0,0,0"))
                                                   (rule "commute_or" (formula "16") (term "0,0"))
                                                   (rule "commute_or_2" (formula "16") (term "0"))
                                                   (rule "commute_or" (formula "16") (term "1,1,0"))
                                                   (rule "commute_or_2" (formula "16") (term "0,1,0"))
                                                   (rule "commute_or" (formula "26") (term "0,0,1,1,0"))
                                                   (rule "ifthenelse_split" (formula "15") (term "0"))
                                                   (branch " verif.selectvoting.system.core.ConservativeExtension.messages.length >= 1 TRUE"
                                                      (rule "applyEq" (formula "15") (term "0") (ifseqformula "16"))
                                                      (rule "applyEq" (formula "10") (term "1,1,0") (ifseqformula "15"))
                                                      (rule "applyEq" (formula "9") (term "0") (ifseqformula "15"))
                                                      (rule "applyEq" (formula "16") (term "1,1,0,1,0") (ifseqformula "15"))
                                                      (rule "applyEq" (formula "16") (term "1,1,1,1,1,1,0") (ifseqformula "15"))
                                                      (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "21"))
                                                      (rule "leq_literals" (formula "9") (term "0"))
                                                      (builtin "One Step Simplification" (formula "9"))
                                                      (rule "true_left" (formula "9"))
                                                      (rule "commute_or" (formula "15") (term "0,0,1,0"))
                                                      (rule "cnf_rightDist" (formula "25") (term "1,1,0"))
                                                      (rule "commute_or" (formula "25") (term "1,1,1,0"))
                                                      (rule "cnf_rightDist" (formula "25") (term "0"))
                                                      (rule "distr_forallAnd" (formula "25"))
                                                      (rule "andLeft" (formula "25"))
                                                      (rule "commute_or" (formula "26") (term "0"))
                                                      (rule "shift_paren_or" (formula "25") (term "0"))
                                                      (rule "shift_paren_or" (formula "25") (term "0,0"))
                                                      (rule "commute_or_2" (formula "25") (term "0,0,0"))
                                                      (rule "cnf_rightDist" (formula "26") (term "0"))
                                                      (rule "distr_forallAnd" (formula "26"))
                                                      (rule "andLeft" (formula "26"))
                                                      (rule "commute_or_2" (formula "27") (term "0"))
                                                      (rule "shift_paren_or" (formula "26") (term "0"))
                                                      (rule "shift_paren_or" (formula "27") (term "0,0"))
                                                      (rule "shift_paren_or" (formula "26") (term "0,0"))
                                                      (rule "commute_or_2" (formula "27") (term "0,0,0"))
                                                      (builtin "One Step Simplification" (formula "27"))
                                                      (rule "commute_or_2" (formula "26") (term "0,0,0"))
                                                      (builtin "One Step Simplification" (formula "26"))
                                                      (rule "commute_or" (formula "25") (term "0,0,0,0"))
                                                      (rule "shift_paren_or" (formula "26") (term "0,0,0"))
                                                      (rule "commute_or" (formula "26") (term "0,0,0,0"))
                                                      (builtin "One Step Simplification" (formula "26"))
                                                      (rule "cnf_rightDist" (formula "15") (term "1,1,0"))
                                                      (rule "commute_or_2" (formula "15") (term "0,1,1,0"))
                                                      (rule "inEqSimp_or_tautInEq0" (formula "15") (term "0,0,1,1,0"))
                                                      (rule "add_zero_right" (formula "15") (term "1,1,0,0,1,1,0"))
                                                      (rule "qeq_literals" (formula "15") (term "1,0,0,1,1,0"))
                                                      (builtin "One Step Simplification" (formula "15"))
                                                      (rule "ifthenelse_to_or_right2" (formula "2") (term "0,0,0,1,0"))
                                                      (builtin "One Step Simplification" (formula "2"))
                                                      (rule "nnf_notAnd" (formula "2") (term "0,0,0,0,0,1,0"))
                                                      (rule "inEqSimp_notLeq" (formula "2") (term "1,0,0,0,0,0,1,0"))
                                                      (rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0,0,0,0,0,1,0"))
                                                      (rule "mul_literals" (formula "2") (term "0,1,0,0,1,0,0,0,0,0,1,0"))
                                                      (rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0,0,0,0,0,1,0"))
                                                      (rule "add_literals" (formula "2") (term "0,0,0,1,0,0,0,0,0,1,0"))
                                                      (rule "add_zero_left" (formula "2") (term "0,0,1,0,0,0,0,0,1,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "1,0,0,0,0,0,1,0"))
                                                      (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0,0,0,0,0,1,0"))
                                                      (rule "polySimp_elimOne" (formula "2") (term "1,1,0,0,0,0,0,1,0"))
                                                      (rule "inEqSimp_notGeq" (formula "2") (term "0,0,0,0,0,0,1,0"))
                                                      (rule "times_zero_1" (formula "2") (term "1,0,0,0,0,0,0,0,0,1,0"))
                                                      (rule "add_zero_right" (formula "2") (term "0,0,0,0,0,0,0,0,1,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "0,0,0,0,0,0,1,0"))
                                                      (rule "mul_literals" (formula "2") (term "1,0,0,0,0,0,0,1,0"))
                                                      (rule "shift_paren_or" (formula "15") (term "1,1,0"))
                                                      (rule "allLeft" (formula "30") (inst "t=iv_3"))
                                                      (rule "inEqSimp_commuteGeq" (formula "30") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "30") (term "1,0") (ifseqformula "3"))
                                                      (rule "qeq_literals" (formula "30") (term "0,1,0"))
                                                      (builtin "One Step Simplification" (formula "30"))
                                                      (rule "inEqSimp_contradInEq1" (formula "30") (term "1") (ifseqformula "4"))
                                                      (rule "inEqSimp_homoInEq1" (formula "30") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "30") (term "0,0,1"))
                                                      (rule "add_literals" (formula "30") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "30") (term "1,0,0,1"))
                                                      (rule "add_zero_right" (formula "30") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "30") (term "0,1"))
                                                      (builtin "One Step Simplification" (formula "30"))
                                                      (rule "notLeft" (formula "30"))
                                                      (rule "pullOutSelect" (formula "31") (term "0") (inst "selectSK=arr_51"))
                                                      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "19"))
                                                      (builtin "One Step Simplification" (formula "1"))
                                                      (rule "applyEqReverse" (formula "32") (term "0") (ifseqformula "1"))
                                                      (rule "hideAuxiliaryEq" (formula "1"))
                                                      (rule "allLeft" (formula "16") (inst "t=iv_3"))
                                                      (rule "inEqSimp_commuteGeq" (formula "16") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "16") (term "1,0") (ifseqformula "3"))
                                                      (rule "qeq_literals" (formula "16") (term "0,1,0"))
                                                      (builtin "One Step Simplification" (formula "16"))
                                                      (rule "inEqSimp_contradInEq1" (formula "16") (term "1") (ifseqformula "4"))
                                                      (rule "inEqSimp_homoInEq1" (formula "16") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,1"))
                                                      (rule "add_literals" (formula "16") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "16") (term "1,0,0,1"))
                                                      (rule "add_zero_right" (formula "16") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "16") (term "0,1"))
                                                      (builtin "One Step Simplification" (formula "16"))
                                                      (rule "notLeft" (formula "16"))
                                                      (rule "pullOutSelect" (formula "31") (term "0") (inst "selectSK=arr_52"))
                                                      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "12"))
                                                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "35")) (ifInst ""  (formula "34")))
                                                      (rule "applyEqReverse" (formula "32") (term "0") (ifseqformula "1"))
                                                      (rule "hideAuxiliaryEq" (formula "1"))
                                                      (rule "narrowSelectArrayType" (formula "31") (term "0") (ifseqformula "10") (ifseqformula "34"))
                                                      (rule "cnf_rightDist" (formula "15") (term "0"))
                                                      (rule "distr_forallAnd" (formula "15"))
                                                      (rule "andLeft" (formula "15"))
                                                      (rule "shift_paren_or" (formula "15") (term "0"))
                                                      (rule "shift_paren_or" (formula "16") (term "0"))
                                                      (rule "commute_or_2" (formula "15") (term "0,0"))
                                                      (builtin "One Step Simplification" (formula "15"))
                                                      (rule "commute_or_2" (formula "16") (term "0,0"))
                                                      (builtin "One Step Simplification" (formula "16"))
                                                      (rule "commute_or" (formula "16") (term "0,0"))
                                                      (rule "inEqSimp_or_tautInEq1" (formula "16") (term "0"))
                                                      (rule "inEqSimp_homoInEq1" (formula "16") (term "1,0"))
                                                      (rule "polySimp_pullOutFactor1" (formula "16") (term "0,1,0"))
                                                      (rule "add_literals" (formula "16") (term "1,0,1,0"))
                                                      (rule "times_zero_1" (formula "16") (term "0,1,0"))
                                                      (rule "leq_literals" (formula "16") (term "1,0"))
                                                      (builtin "One Step Simplification" (formula "16"))
                                                      (rule "true_left" (formula "16"))
                                                      (rule "allLeft" (formula "22") (inst "t=iv_3"))
                                                      (rule "inEqSimp_commuteGeq" (formula "22") (term "1,0"))
                                                      (rule "inEqSimp_contradInEq0" (formula "22") (term "1") (ifseqformula "1"))
                                                      (rule "qeq_literals" (formula "22") (term "0,1"))
                                                      (builtin "One Step Simplification" (formula "22"))
                                                      (rule "inEqSimp_contradInEq1" (formula "22") (term "0") (ifseqformula "3"))
                                                      (rule "qeq_literals" (formula "22") (term "0,0"))
                                                      (builtin "One Step Simplification" (formula "22"))
                                                      (rule "inEqSimp_contradInEq0" (formula "4") (ifseqformula "22"))
                                                      (rule "andLeft" (formula "4"))
                                                      (rule "inEqSimp_homoInEq1" (formula "4"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "4") (term "0"))
                                                      (rule "add_literals" (formula "4") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "4") (term "1,0"))
                                                      (rule "add_literals" (formula "4") (term "0"))
                                                      (rule "leq_literals" (formula "4"))
                                                      (rule "closeFalse" (formula "4"))
                                                   )
                                                   (branch " verif.selectvoting.system.core.ConservativeExtension.messages.length >= 1 FALSE"
                                                      (rule "eqSymm" (formula "15"))
                                                      (rule "inEqSimp_geqRight" (formula "30"))
                                                      (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                      (rule "add_literals" (formula "1") (term "0,0"))
                                                      (rule "add_zero_left" (formula "1") (term "0"))
                                                      (rule "applyEq" (formula "27") (term "1,1,0,0") (ifseqformula "16"))
                                                      (rule "applyEq" (formula "17") (term "1,1,0,1,1,0") (ifseqformula "16"))
                                                      (rule "applyEq" (formula "18") (term "1,1,0") (ifseqformula "16"))
                                                      (rule "applyEq" (formula "17") (term "1,1,1,0,0,1,0,0,1,0") (ifseqformula "16"))
                                                      (rule "add_zero_right" (formula "17") (term "1,1,0,0,1,0,0,1,0"))
                                                      (rule "applyEq" (formula "27") (term "1,1,0,1,0") (ifseqformula "16"))
                                                      (rule "applyEq" (formula "27") (term "1,1,0,1,1,0") (ifseqformula "16"))
                                                      (rule "applyEq" (formula "28") (term "1,1") (ifseqformula "16"))
                                                      (rule "seqDef_lower_equals_upper" (formula "28") (term "1"))
                                                      (rule "seqPermEmpty2" (formula "28"))
                                                      (rule "eqSymm" (formula "28"))
                                                      (rule "eqSeqEmpty" (formula "28"))
                                                      (rule "lenOfSeqDef" (formula "28") (term "0"))
                                                      (builtin "One Step Simplification" (formula "28"))
                                                      (rule "polySimp_elimSub" (formula "28") (term "0,1"))
                                                      (rule "times_zero_2" (formula "28") (term "1,0,1"))
                                                      (rule "add_zero_right" (formula "28") (term "0,1"))
                                                      (rule "replace_known_left" (formula "28") (term "1") (ifseqformula "16"))
                                                      (builtin "One Step Simplification" (formula "28"))
                                                      (rule "true_left" (formula "28"))
                                                      (rule "applyEq" (formula "24") (term "1,1,0,0") (ifseqformula "16"))
                                                      (rule "applyEq" (formula "25") (term "1,1,1,0") (ifseqformula "16"))
                                                      (rule "add_zero_right" (formula "25") (term "1,1,0"))
                                                      (rule "applyEq" (formula "22") (term "0") (ifseqformula "16"))
                                                      (rule "qeq_literals" (formula "22"))
                                                      (rule "closeFalse" (formula "22"))
                                                   )
                                                )
                                                (branch "result_0.length >= 1 FALSE"
                                                   (rule "eqSymm" (formula "23"))
                                                   (rule "inEqSimp_geqRight" (formula "32"))
                                                   (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0"))
                                                   (rule "add_zero_left" (formula "1") (term "0"))
                                                   (rule "applyEq" (formula "25") (term "1,1,0,0") (ifseqformula "24"))
                                                   (rule "applyEqRigid" (formula "18") (term "1,1,0") (ifseqformula "24"))
                                                   (rule "applyEq" (formula "26") (term "1,1,0,0") (ifseqformula "24"))
                                                   (rule "applyEq" (formula "7") (term "0") (ifseqformula "24"))
                                                   (rule "inEqSimp_homoInEq1" (formula "7"))
                                                   (rule "mul_literals" (formula "7") (term "1,0"))
                                                   (rule "add_zero_right" (formula "7") (term "0"))
                                                   (rule "applyEqRigid" (formula "28") (term "1,1,0") (ifseqformula "24"))
                                                   (rule "applyEqRigid" (formula "23") (term "0") (ifseqformula "24"))
                                                   (rule "qeq_literals" (formula "23"))
                                                   (rule "true_left" (formula "23"))
                                                   (rule "applyEq" (formula "25") (term "1,1,1,0") (ifseqformula "23"))
                                                   (rule "add_zero_right" (formula "25") (term "1,1,0"))
                                                   (rule "applyEqRigid" (formula "3") (term "1,0,1,0,0") (ifseqformula "23"))
                                                   (rule "applyEq" (formula "17") (term "1") (ifseqformula "23"))
                                                   (builtin "One Step Simplification" (formula "17"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "7"))
                                                   (rule "mul_literals" (formula "7") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "7") (ifseqformula "4"))
                                                   (rule "qeq_literals" (formula "7") (term "0"))
                                                   (builtin "One Step Simplification" (formula "7"))
                                                   (rule "closeFalse" (formula "7"))
                                                )
                                             )
                                          )
                                       )
                                       (branch "0 <= iv_3 & iv_3 < result_0.length - 0 FALSE"
                                          (rule "castDel" (formula "1") (term "0"))
                                          (rule "andLeft" (formula "2"))
                                          (rule "eqSymm" (formula "7"))
                                          (rule "eqSymm" (formula "6"))
                                          (rule "eqSymm" (formula "5"))
                                          (rule "eqSymm" (formula "31") (term "1,0,1,0"))
                                          (rule "eqSymm" (formula "23"))
                                          (rule "eqSymm" (formula "1"))
                                          (rule "replace_known_left" (formula "29") (term "0") (ifseqformula "2"))
                                          (builtin "One Step Simplification" (formula "29"))
                                          (rule "polySimp_elimSub" (formula "29") (term "1"))
                                          (rule "times_zero_2" (formula "29") (term "1,1"))
                                          (rule "add_zero_right" (formula "29") (term "1"))
                                          (rule "getOfSeqDef" (formula "30") (term "1"))
                                          (rule "castDel" (formula "30") (term "1,1"))
                                          (rule "castDel" (formula "30") (term "2,1"))
                                          (rule "add_zero_right" (formula "30") (term "0,2,1,1,1"))
                                          (rule "polySimp_elimSub" (formula "30") (term "1,1,0,1"))
                                          (rule "times_zero_2" (formula "30") (term "1,1,1,0,1"))
                                          (rule "add_zero_right" (formula "30") (term "1,1,0,1"))
                                          (rule "lenOfSeqDef" (formula "22") (term "0"))
                                          (rule "eqSymm" (formula "22"))
                                          (rule "polySimp_elimSub" (formula "22") (term "1,1"))
                                          (rule "times_zero_2" (formula "22") (term "1,1,1"))
                                          (rule "add_zero_right" (formula "22") (term "1,1"))
                                          (rule "lenOfSeqDef" (formula "31") (term "1,0,0,0"))
                                          (rule "polySimp_elimSub" (formula "31") (term "1,1,0,0,0"))
                                          (rule "times_zero_2" (formula "31") (term "1,1,1,0,0,0"))
                                          (rule "add_zero_right" (formula "31") (term "1,1,0,0,0"))
                                          (rule "getOfSeqDef" (formula "25") (term "0,1,0"))
                                          (rule "castDel" (formula "25") (term "1,0,1,0"))
                                          (rule "castDel" (formula "25") (term "2,0,1,0"))
                                          (rule "add_zero_right" (formula "25") (term "0,2,1,0,1,0"))
                                          (rule "eqSymm" (formula "25") (term "1,0"))
                                          (rule "polySimp_elimSub" (formula "25") (term "1,1,0,1,1,0"))
                                          (rule "times_zero_2" (formula "25") (term "1,1,1,0,1,1,0"))
                                          (rule "add_zero_right" (formula "25") (term "1,1,0,1,1,0"))
                                          (rule "getOfSeqDef" (formula "30") (term "0"))
                                          (rule "castDel" (formula "30") (term "1,0"))
                                          (rule "castDel" (formula "30") (term "2,0"))
                                          (rule "add_zero_right" (formula "30") (term "0,2,1,1,0"))
                                          (rule "eqSymm" (formula "30"))
                                          (rule "replace_known_left" (formula "30") (term "0,0,1") (ifseqformula "2"))
                                          (builtin "One Step Simplification" (formula "30"))
                                          (rule "polySimp_elimSub" (formula "30") (term "1,0,1"))
                                          (rule "times_zero_2" (formula "30") (term "1,1,0,1"))
                                          (rule "add_zero_right" (formula "30") (term "1,0,1"))
                                          (rule "replace_known_right" (formula "30") (term "0,1") (ifseqformula "29"))
                                          (builtin "One Step Simplification" (formula "30"))
                                          (rule "orRight" (formula "30"))
                                          (rule "notRight" (formula "30"))
                                          (rule "andLeft" (formula "1"))
                                          (rule "eqSymm" (formula "32"))
                                          (rule "getOfSeqDef" (formula "33") (term "1,1,0,1,0"))
                                          (rule "castDel" (formula "33") (term "1,1,1,0,1,0"))
                                          (rule "castDel" (formula "33") (term "2,1,1,0,1,0"))
                                          (rule "add_zero_right" (formula "33") (term "0,2,1,1,1,1,0,1,0"))
                                          (rule "polySimp_elimSub" (formula "33") (term "1,1,0,1,1,0,1,0"))
                                          (rule "times_zero_2" (formula "33") (term "1,1,1,0,1,1,0,1,0"))
                                          (rule "add_zero_right" (formula "33") (term "1,1,0,1,1,0,1,0"))
                                          (rule "getOfSeqDef" (formula "33") (term "0,1,0,1,0"))
                                          (rule "castDel" (formula "33") (term "1,0,1,0,1,0"))
                                          (rule "castDel" (formula "33") (term "2,0,1,0,1,0"))
                                          (rule "add_zero_right" (formula "33") (term "0,2,1,1,0,1,0,1,0"))
                                          (rule "polySimp_elimSub" (formula "33") (term "1,1,0,0,1,0,1,0"))
                                          (rule "times_zero_2" (formula "33") (term "1,1,1,0,0,1,0,1,0"))
                                          (rule "add_zero_right" (formula "33") (term "1,1,0,0,1,0,1,0"))
                                          (rule "lenOfSeqDef" (formula "25") (term "0"))
                                          (rule "polySimp_elimSub" (formula "25") (term "1,0"))
                                          (rule "times_zero_2" (formula "25") (term "1,1,0"))
                                          (rule "add_zero_right" (formula "25") (term "1,0"))
                                          (rule "getOfSeqDef" (formula "3") (term "0"))
                                          (rule "castDel" (formula "3") (term "1,0"))
                                          (rule "castDel" (formula "3") (term "2,0"))
                                          (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "1")))
                                          (rule "add_zero_right" (formula "3") (term "0,2,0,1"))
                                          (rule "polySimp_elimSub" (formula "3") (term "1,0,0"))
                                          (rule "times_zero_2" (formula "3") (term "1,1,0,0"))
                                          (rule "add_zero_right" (formula "3") (term "1,0,0"))
                                          (rule "replace_known_left" (formula "3") (term "0,0") (ifseqformula "2"))
                                          (builtin "One Step Simplification" (formula "3"))
                                          (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "33") (term "1,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0,0,1,0"))
                                          (rule "lenOfSeqDef" (formula "24") (term "0"))
                                          (rule "polySimp_elimSub" (formula "24") (term "1,0"))
                                          (rule "times_zero_2" (formula "24") (term "1,1,0"))
                                          (rule "add_zero_right" (formula "24") (term "1,0"))
                                          (builtin "One Step Simplification" (formula "24"))
                                          (rule "true_left" (formula "24"))
                                          (rule "inEqSimp_ltToLeq" (formula "5"))
                                          (rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
                                          (rule "inEqSimp_ltRight" (formula "30"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                                          (rule "polySimp_addComm1" (formula "32") (term "0,1,0,0,1,0"))
                                          (rule "polySimp_addComm1" (formula "6") (term "0"))
                                          (rule "getOfSeqDef" (formula "27") (term "0,1,0"))
                                          (rule "castDel" (formula "27") (term "1,0,1,0"))
                                          (rule "castDel" (formula "27") (term "2,0,1,0"))
                                          (rule "add_zero_right" (formula "27") (term "0,2,1,0,1,0"))
                                          (rule "polySimp_elimSub" (formula "27") (term "1,1,0,0,1,0"))
                                          (rule "times_zero_2" (formula "27") (term "1,1,1,0,0,1,0"))
                                          (rule "add_zero_right" (formula "27") (term "1,1,0,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "1") (term "0"))
                                          (rule "inEqSimp_ltToLeq" (formula "32") (term "0,1,0,0,0"))
                                          (rule "add_zero_right" (formula "32") (term "0,0,1,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,1,1,0"))
                                          (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,1,1,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0,0,1,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "5"))
                                          (rule "inEqSimp_ltToLeq" (formula "3"))
                                          (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "32") (term "1,0,1,1,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,1,1,0,1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "32") (term "1,0,0,1,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,0,1,0,1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "25") (term "0,0"))
                                          (rule "add_zero_right" (formula "25") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,1,1,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "2"))
                                          (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0,1,1,0,1,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0,0,1,0,1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,0,1,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0,1,0"))
                                          (rule "applyEq" (formula "8") (term "1") (ifseqformula "7"))
                                          (rule "applyEq" (formula "36") (term "1") (ifseqformula "7"))
                                          (rule "applyEq" (formula "32") (term "1,0,0,0") (ifseqformula "25"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0"))
                                          (rule "mul_literals" (formula "27") (term "0,1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "32") (term "1,0,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "32") (term "0,1,0,0,1,0"))
                                          (rule "polySimp_elimOne" (formula "32") (term "0,1,0,0,1,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "6"))
                                          (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                                          (rule "polySimp_elimOne" (formula "6") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                          (rule "polySimp_elimOne" (formula "1") (term "0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,1,1,0"))
                                          (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,1,1,0"))
                                          (rule "polySimp_rightDist" (formula "27") (term "1,1,0,1,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,1,1,0"))
                                          (rule "mul_literals" (formula "27") (term "0,1,1,0,1,1,0"))
                                          (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,1,1,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                                          (rule "polySimp_mulComm0" (formula "3") (term "1"))
                                          (rule "polySimp_rightDist" (formula "3") (term "1"))
                                          (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                                          (rule "mul_literals" (formula "3") (term "0,1"))
                                          (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,1,1,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,1,1,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "32") (term "1,1,0,1,1,0,1,0"))
                                          (rule "mul_literals" (formula "32") (term "0,1,1,0,1,1,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,1,1,0,1,0"))
                                          (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,1,1,0,1,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0,1,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,0,1,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "32") (term "1,1,0,0,1,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,0,1,0,1,0"))
                                          (rule "mul_literals" (formula "32") (term "0,1,1,0,0,1,0,1,0"))
                                          (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,0,1,0,1,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "25") (term "0,0"))
                                          (rule "polySimp_mulLiterals" (formula "25") (term "0,0,0"))
                                          (rule "polySimp_elimOne" (formula "25") (term "0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0,1,0"))
                                          (rule "mul_literals" (formula "27") (term "0,1,1,0,0,1,0"))
                                          (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0,1,0"))
                                          (rule "array2seqDef" (formula "18") (term "2,1") (inst "u=u_1"))
                                          (rule "eqSymm" (formula "18"))
                                          (rule "array2seqDef" (formula "10") (term "0") (inst "u=u"))
                                          (rule "array2seqDef" (formula "9") (term "0") (inst "u=u"))
                                          (rule "array2seqDef" (formula "29") (term "1") (inst "u=u"))
                                          (rule "eqSymm" (formula "29"))
                                          (rule "array2seqDef" (formula "30") (term "1,1,1,0,1,0") (inst "u=u"))
                                          (rule "array2seqDef" (formula "30") (term "1,0,1,0,1,0") (inst "u=u"))
                                          (rule "pullOutSelect" (formula "8") (term "1,0") (inst "selectSK=verif_selectvoting_system_core_ConservativeExtension_messages_8"))
                                          (rule "simplifySelectOfAnonEQ" (formula "8") (ifseqformula "14"))
                                          (builtin "One Step Simplification" (formula "8"))
                                          (rule "applyEqReverse" (formula "9") (term "1,0") (ifseqformula "8"))
                                          (rule "hideAuxiliaryEq" (formula "8"))
                                          (rule "eqSeqDef2" (formula "21") (inst "iv=iv") (ifseqformula "21"))
                                          (builtin "One Step Simplification" (formula "21"))
                                          (rule "true_left" (formula "21"))
                                          (rule "eqSeqDef2" (formula "20") (inst "iv=iv") (ifseqformula "20"))
                                          (builtin "One Step Simplification" (formula "20"))
                                          (rule "true_left" (formula "20"))
                                          (rule "pullOutSelect" (formula "4") (term "0") (inst "selectSK=arr_41"))
                                          (rule "simplifySelectOfAnonEQ" (formula "4") (ifseqformula "13"))
                                          (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "30")) (ifInst ""  (formula "29")))
                                          (rule "applyEqReverse" (formula "5") (term "0") (ifseqformula "4"))
                                          (rule "hideAuxiliaryEq" (formula "4"))
                                          (rule "narrowSelectArrayType" (formula "4") (term "0") (ifseqformula "11") (ifseqformula "29"))
                                          (rule "eqSymm" (formula "4"))
                                          (rule "applyEq" (formula "22") (term "2,0,1,0") (ifseqformula "4"))
                                          (rule "applyEq" (formula "27") (term "2,0,1,0,1,0") (ifseqformula "4"))
                                          (rule "applyEq" (formula "22") (term "2,1,1,0") (ifseqformula "4"))
                                          (rule "applyEq" (formula "26") (term "1") (ifseqformula "4"))
                                          (builtin "One Step Simplification" (formula "26"))
                                          (rule "false_right" (formula "26"))
                                          (rule "applyEq" (formula "26") (term "2,1,1,0,1,0") (ifseqformula "4"))
                                          (rule "eqSeqDef" (formula "15") (inst "iv=iv"))
                                          (rule "andLeft" (formula "15"))
                                          (rule "lenOfSeqDef" (formula "15") (term "1"))
                                          (rule "polySimp_elimSub" (formula "15") (term "1,1"))
                                          (rule "mul_literals" (formula "15") (term "1,1,1"))
                                          (rule "add_zero_right" (formula "15") (term "1,1"))
                                          (rule "getOfSeqDef" (formula "16") (term "0,1,0"))
                                          (rule "castDel" (formula "16") (term "1,0,1,0"))
                                          (rule "castDel" (formula "16") (term "2,0,1,0"))
                                          (rule "add_zero_right" (formula "16") (term "0,2,1,2,1,0,1,0"))
                                          (rule "add_zero_right" (formula "16") (term "0,2,0,1,1,0,1,0"))
                                          (rule "polySimp_elimSub" (formula "16") (term "1,1,0,0,1,0"))
                                          (rule "times_zero_2" (formula "16") (term "1,1,1,0,0,1,0"))
                                          (rule "add_zero_right" (formula "16") (term "1,1,0,0,1,0"))
                                          (rule "getOfSeqDef" (formula "16") (term "1,1,0"))
                                          (rule "castDel" (formula "16") (term "2,1,1,0"))
                                          (rule "castDel" (formula "16") (term "1,1,1,0"))
                                          (rule "add_zero_right" (formula "16") (term "0,2,1,1,1,1,0"))
                                          (rule "polySimp_elimSub" (formula "16") (term "1,1,0,1,1,0"))
                                          (rule "times_zero_2" (formula "16") (term "1,1,1,0,1,1,0"))
                                          (rule "add_zero_right" (formula "16") (term "1,1,0,1,1,0"))
                                          (rule "lenOfSeqDef" (formula "15") (term "0"))
                                          (rule "eqSymm" (formula "15"))
                                          (rule "polySimp_elimSub" (formula "15") (term "1,1"))
                                          (rule "times_zero_2" (formula "15") (term "1,1,1"))
                                          (rule "add_zero_right" (formula "15") (term "1,1"))
                                          (rule "lenOfSeqDef" (formula "16") (term "1,1,0,0"))
                                          (rule "polySimp_elimSub" (formula "16") (term "1,1,1,0,0"))
                                          (rule "times_zero_2" (formula "16") (term "1,1,1,1,0,0"))
                                          (rule "add_zero_right" (formula "16") (term "1,1,1,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0,1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,1,1,0"))
                                          (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,1,1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0"))
                                          (rule "add_zero_right" (formula "15") (term "0,0,0"))
                                          (rule "eqSymm" (formula "15"))
                                          (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "16") (term "0,1,1,0,0"))
                                          (rule "add_zero_right" (formula "16") (term "0,0,1,1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,1,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0"))
                                          (rule "add_zero_right" (formula "15") (term "0,0,0"))
                                          (rule "eqSymm" (formula "15"))
                                          (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0,1,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,1,1,0"))
                                          (rule "applyEq" (formula "16") (term "2,0,1,0") (ifseqformula "4"))
                                          (rule "applyEq" (formula "16") (term "2,1,1,0") (ifseqformula "4"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0,1,0"))
                                          (rule "mul_literals" (formula "16") (term "0,1,1,0,0,1,0"))
                                          (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0,1,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,1,1,0"))
                                          (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,1,1,0"))
                                          (rule "polySimp_rightDist" (formula "16") (term "1,1,0,1,1,0"))
                                          (rule "mul_literals" (formula "16") (term "0,1,1,0,1,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,1,1,0"))
                                          (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,1,1,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0,0"))
                                          (rule "polySimp_mulLiterals" (formula "15") (term "0,0,0"))
                                          (rule "eqSymm" (formula "15"))
                                          (rule "polySimp_elimOne" (formula "15") (term "0,0,1"))
                                          (rule "applyEq" (formula "16") (term "0,1,0,0,1,0,0") (ifseqformula "15"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0,0"))
                                          (rule "polySimp_mulLiterals" (formula "15") (term "0,0,0"))
                                          (rule "eqSymm" (formula "15"))
                                          (rule "polySimp_elimOne" (formula "15") (term "0,0,1"))
                                          (rule "applyEq" (formula "16") (term "0,1,0,0,1,0,0") (ifseqformula "15"))
                                          (rule "applyEq" (formula "15") (term "1") (ifseqformula "21"))
                                          (rule "applyEq" (formula "16") (term "0,1,0,0,1,0,0") (ifseqformula "21"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0"))
                                          (rule "mul_literals" (formula "16") (term "0,1,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0"))
                                          (rule "array2seqDef" (formula "16") (term "1,1,1,0") (inst "u=u"))
                                          (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "3"))
                                          (rule "mul_literals" (formula "2") (term "0,0"))
                                          (rule "add_zero_left" (formula "2") (term "0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                          (rule "mul_literals" (formula "2") (term "1"))
                                          (rule "replace_known_left" (formula "22") (term "0,0") (ifseqformula "2"))
                                          (builtin "One Step Simplification" (formula "22"))
                                          (rule "eqSymm" (formula "22"))
                                          (rule "applyEq" (formula "17") (term "1,1,1,0,0") (ifseqformula "22"))
                                          (rule "applyEq" (formula "24") (term "1,1,1,0,0") (ifseqformula "22"))
                                          (rule "applyEq" (formula "7") (term "0") (ifseqformula "22"))
                                          (rule "applyEq" (formula "16") (term "1") (ifseqformula "22"))
                                          (rule "applyEq" (formula "28") (term "1,0,0,0") (ifseqformula "22"))
                                          (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "1"))
                                          (rule "andLeft" (formula "7"))
                                          (rule "inEqSimp_homoInEq1" (formula "7"))
                                          (rule "polySimp_pullOutFactor1b" (formula "7") (term "0"))
                                          (rule "add_literals" (formula "7") (term "1,1,0"))
                                          (rule "times_zero_1" (formula "7") (term "1,0"))
                                          (rule "add_zero_right" (formula "7") (term "0"))
                                          (rule "leq_literals" (formula "7"))
                                          (rule "closeFalse" (formula "7"))
                                       )
                                    )
                                 )
                              )
                           )
                        )
                        (branch "CUT: array2seq2d(heapAfter_copyOf, verif.selectvoting.system.core.ConservativeExtension.messages) = array2seq2d(heap, verif.selectvoting.system.core.ConservativeExtension.messages) FALSE"
                           (rule "array2seq2dDef" (formula "21") (term "0") (inst "u=u") (userinteraction))
                           (rule "array2seq2dDef" (formula "21") (term "1") (inst "u=u") (userinteraction))
                           (rule "eqSymm" (formula "1"))
                           (rule "eqSymm" (formula "2"))
                           (rule "eqSymm" (formula "3"))
                           (rule "applyEq" (formula "18") (term "0") (ifseqformula "3"))
                           (rule "applyEq" (formula "18") (term "1") (ifseqformula "2"))
                           (rule "applyEq" (formula "1") (term "1") (ifseqformula "11"))
                           (rule "array2seqDef" (formula "21") (term "2,1") (inst "u=u_1"))
                           (rule "eqSymm" (formula "21"))
                           (rule "array2seqDef" (formula "2") (term "0") (inst "u=u"))
                           (rule "array2seqDef" (formula "2") (term "0") (inst "u=u"))
                           (rule "eqSeqDef2" (formula "14") (inst "iv=iv") (ifseqformula "14"))
                           (builtin "One Step Simplification" (formula "14"))
                           (rule "true_left" (formula "14"))
                           (rule "eqSeqDef2" (formula "14") (inst "iv=iv") (ifseqformula "14"))
                           (builtin "One Step Simplification" (formula "14"))
                           (rule "true_left" (formula "14"))
                           (rule "equalityToSeqGetAndSeqLenRight" (formula "17") (inst "iv=iv"))
                           (rule "getOfSeqDef" (formula "17") (term "1,1,0,1"))
                           (rule "castDel" (formula "17") (term "2,1,1,0,1"))
                           (rule "castDel" (formula "17") (term "1,1,1,0,1"))
                           (rule "add_zero_right" (formula "17") (term "0,2,1,1,1,1,0,1"))
                           (rule "polySimp_elimSub" (formula "17") (term "1,1,0,1,1,0,1"))
                           (rule "times_zero_2" (formula "17") (term "1,1,1,0,1,1,0,1"))
                           (rule "add_zero_right" (formula "17") (term "1,1,0,1,1,0,1"))
                           (rule "lenOfSeqDef" (formula "17") (term "1,0"))
                           (rule "polySimp_elimSub" (formula "17") (term "1,1,0"))
                           (rule "mul_literals" (formula "17") (term "1,1,1,0"))
                           (rule "add_zero_right" (formula "17") (term "1,1,0"))
                           (rule "lenOfSeqDef" (formula "17") (term "1,1,0,0,1"))
                           (rule "polySimp_elimSub" (formula "17") (term "1,1,1,0,0,1"))
                           (rule "times_zero_2" (formula "17") (term "1,1,1,1,0,0,1"))
                           (rule "add_zero_right" (formula "17") (term "1,1,1,0,0,1"))
                           (rule "lenOfSeqDef" (formula "17") (term "0,0"))
                           (rule "polySimp_elimSub" (formula "17") (term "1,0,0"))
                           (rule "times_zero_2" (formula "17") (term "1,1,0,0"))
                           (rule "add_zero_right" (formula "17") (term "1,0,0"))
                           (builtin "One Step Simplification" (formula "17"))
                           (rule "allRight" (formula "17") (inst "sk=iv_0"))
                           (rule "impRight" (formula "17"))
                           (rule "andLeft" (formula "1"))
                           (rule "replace_known_left" (formula "19") (term "0,0,1") (ifseqformula "1"))
                           (builtin "One Step Simplification" (formula "19"))
                           (rule "getOfSeqDef" (formula "19") (term "0"))
                           (rule "castDel" (formula "19") (term "2,0"))
                           (rule "castDel" (formula "19") (term "1,0"))
                           (rule "add_zero_right" (formula "19") (term "0,2,0,1,1,0"))
                           (rule "add_zero_right" (formula "19") (term "0,2,1,2,1,0"))
                           (rule "replace_known_left" (formula "19") (term "0,0,0") (ifseqformula "1"))
                           (builtin "One Step Simplification" (formula "19"))
                           (rule "polySimp_elimSub" (formula "19") (term "1,0,0"))
                           (rule "times_zero_2" (formula "19") (term "1,1,0,0"))
                           (rule "add_zero_right" (formula "19") (term "1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "2") (term "0,1"))
                           (rule "add_zero_right" (formula "2") (term "0,0,1"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "19") (term "0,1"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,1"))
                           (rule "polySimp_addComm1" (formula "19") (term "0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,0"))
                           (rule "polySimp_addComm1" (formula "19") (term "0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "2"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "2") (term "0"))
                           (rule "inEqSimp_commuteLeq" (formula "1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "19") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "19") (term "0,0,1"))
                           (rule "polySimp_elimOne" (formula "19") (term "0,0,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "19") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "19") (term "0,0,0"))
                           (rule "polySimp_elimOne" (formula "19") (term "0,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                           (rule "polySimp_elimOne" (formula "2") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0"))
                           (rule "polySimp_elimOne" (formula "2") (term "0,0,0"))
                           (rule "array2seqDef" (formula "19") (term "1,1") (inst "u=u"))
                           (rule "pullOutSelect" (formula "3") (term "1,0") (inst "selectSK=verif_selectvoting_system_core_ConservativeExtension_messages_3"))
                           (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "9"))
                           (builtin "One Step Simplification" (formula "3"))
                           (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                           (rule "hideAuxiliaryEq" (formula "3"))
                           (rule "pullOutSelect" (formula "18") (term "1,2,1,1") (inst "selectSK=arr_11"))
                           (rule "applyEq" (formula "19") (term "0,1,1,1") (ifseqformula "1"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "8"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "22")))
                           (rule "ifthenelse_negated" (formula "1") (term "0"))
                           (rule "ifthenelse_split" (formula "19") (term "0"))
                           (branch " verif.selectvoting.system.core.ConservativeExtension.messages.length >= 1 + iv_0 TRUE"
                              (rule "replace_known_left" (formula "20") (term "0,1") (ifseqformula "1"))
                              (builtin "One Step Simplification" (formula "20"))
                              (rule "eqSeqDef" (formula "20") (inst "iv=iv"))
                              (rule "lenOfSeqDef" (formula "20") (term "1,1,0,0,1"))
                              (rule "polySimp_elimSub" (formula "20") (term "1,1,1,0,0,1"))
                              (rule "mul_literals" (formula "20") (term "1,1,1,1,0,0,1"))
                              (rule "add_zero_right" (formula "20") (term "1,1,1,0,0,1"))
                              (rule "lenOfSeqDef" (formula "20") (term "0,0"))
                              (rule "eqSymm" (formula "20") (term "0"))
                              (rule "polySimp_elimSub" (formula "20") (term "1,1,0"))
                              (rule "times_zero_2" (formula "20") (term "1,1,1,0"))
                              (rule "add_zero_right" (formula "20") (term "1,1,0"))
                              (rule "getOfSeqDef" (formula "20") (term "0,1,0,1"))
                              (rule "castDel" (formula "20") (term "1,0,1,0,1"))
                              (rule "castDel" (formula "20") (term "2,0,1,0,1"))
                              (rule "add_zero_right" (formula "20") (term "0,2,1,0,1,0,1"))
                              (rule "eqSymm" (formula "20") (term "1,0,1"))
                              (rule "polySimp_elimSub" (formula "20") (term "1,1,0,1,1,0,1"))
                              (rule "times_zero_2" (formula "20") (term "1,1,1,0,1,1,0,1"))
                              (rule "add_zero_right" (formula "20") (term "1,1,0,1,1,0,1"))
                              (rule "lenOfSeqDef" (formula "20") (term "0,0"))
                              (rule "eqSymm" (formula "20") (term "0"))
                              (rule "polySimp_elimSub" (formula "20") (term "1,1,0"))
                              (rule "times_zero_2" (formula "20") (term "1,1,1,0"))
                              (rule "add_zero_right" (formula "20") (term "1,1,0"))
                              (rule "getOfSeqDef" (formula "20") (term "0,1,0,1"))
                              (rule "castDel" (formula "20") (term "1,0,1,0,1"))
                              (rule "castDel" (formula "20") (term "2,0,1,0,1"))
                              (rule "add_zero_right" (formula "20") (term "0,2,1,0,1,0,1"))
                              (rule "eqSymm" (formula "20") (term "1,0,1"))
                              (rule "polySimp_elimSub" (formula "20") (term "1,1,0,1,1,0,1"))
                              (rule "times_zero_2" (formula "20") (term "1,1,1,0,1,1,0,1"))
                              (rule "add_zero_right" (formula "20") (term "1,1,0,1,1,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "20") (term "0,1,1,0,0,1"))
                              (rule "add_zero_right" (formula "20") (term "0,0,1,1,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,1,0,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "20") (term "0,0,0"))
                              (rule "add_zero_right" (formula "20") (term "0,0,0,0"))
                              (rule "eqSymm" (formula "20") (term "0"))
                              (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0,1,0,1"))
                              (rule "eqSymm" (formula "20") (term "1,0,1"))
                              (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,1,1,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "20") (term "0,0,0"))
                              (rule "add_zero_right" (formula "20") (term "0,0,0,0"))
                              (rule "eqSymm" (formula "20") (term "0"))
                              (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0,1,0,1"))
                              (rule "eqSymm" (formula "20") (term "1,0,1"))
                              (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,1,1,0,1"))
                              (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0,1"))
                              (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0,1,0,1"))
                              (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,1,1,0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0,1"))
                              (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0,1"))
                              (rule "mul_literals" (formula "20") (term "0,1,1,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0,1"))
                              (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0,1"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "20") (term "0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "20") (term "0,0,0,0"))
                              (rule "eqSymm" (formula "20") (term "0"))
                              (rule "polySimp_elimOne" (formula "20") (term "0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0,1,0,1"))
                              (rule "eqSymm" (formula "20") (term "1,0,1"))
                              (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,1,1,0,1"))
                              (rule "polySimp_rightDist" (formula "20") (term "1,1,0,1,1,0,1"))
                              (rule "mul_literals" (formula "20") (term "0,1,1,0,1,1,0,1"))
                              (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,1,1,0,1"))
                              (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,1,1,0,1"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "20") (term "0,1,1,1,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "20") (term "0,0,1,1,1,0,0,1"))
                              (rule "polySimp_elimOne" (formula "20") (term "0,0,1,1,1,0,0,1"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "20") (term "0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "20") (term "0,0,0,0"))
                              (rule "eqSymm" (formula "20") (term "0"))
                              (rule "polySimp_elimOne" (formula "20") (term "0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0,1,0,1"))
                              (rule "eqSymm" (formula "20") (term "1,0,1"))
                              (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,1,1,0,1"))
                              (rule "polySimp_rightDist" (formula "20") (term "1,1,0,1,1,0,1"))
                              (rule "mul_literals" (formula "20") (term "0,1,1,0,1,1,0,1"))
                              (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,1,1,0,1"))
                              (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,1,1,0,1"))
                              (rule "nnf_imp2or" (formula "20") (term "0,1"))
                              (rule "nnf_notAnd" (formula "20") (term "0,0,1"))
                              (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0,1"))
                              (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0,1"))
                              (rule "add_zero_right" (formula "20") (term "0,0,0,0,0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0,1"))
                              (rule "mul_literals" (formula "20") (term "1,0,0,0,1"))
                              (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0,1"))
                              (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0,1"))
                              (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0,1"))
                              (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0,1"))
                              (rule "add_literals" (formula "20") (term "0,0,0,1,0,0,1"))
                              (rule "add_zero_left" (formula "20") (term "0,0,1,0,0,1"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,1"))
                              (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0,1"))
                              (rule "arrayLengthNotNegative" (formula "19") (term "1,1,0"))
                              (rule "arrayLengthIsAShort" (formula "20") (term "1,1,0"))
                              (builtin "One Step Simplification" (formula "20"))
                              (rule "true_left" (formula "20"))
                              (rule "equalityToSeqGetAndSeqLenLeft" (formula "12") (inst "iv=iv"))
                              (rule "andLeft" (formula "12"))
                              (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
                              (rule "applyEq" (formula "12") (term "0,0") (ifseqformula "14"))
                              (builtin "One Step Simplification" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "applyEq" (formula "12") (term "0,0,1,0") (ifseqformula "13"))
                              (builtin "One Step Simplification" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "arrayLengthIsAShort" (formula "7") (term "1,1,0"))
                              (builtin "One Step Simplification" (formula "7"))
                              (rule "true_left" (formula "7"))
                              (rule "arrayLengthNotNegative" (formula "7") (term "1,1,0"))
                              (rule "ifthenelse_split" (formula "4") (term "0"))
                              (branch " verif.selectvoting.system.core.ConservativeExtension.messages.length >= 1 TRUE"
                                 (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "4"))
                                 (rule "leq_literals" (formula "7") (term "0"))
                                 (builtin "One Step Simplification" (formula "7"))
                                 (rule "true_left" (formula "7"))
                                 (rule "ifthenelse_split" (formula "2") (term "0"))
                                 (branch " verif.selectvoting.system.core.ConservativeExtension.messages.<created> = TRUE TRUE"
                                    (rule "applyEqReverse" (formula "22") (term "0,1,1,0") (ifseqformula "3"))
                                    (rule "applyEqReverse" (formula "22") (term "0,0,0,1,0") (ifseqformula "3"))
                                    (builtin "One Step Simplification" (formula "22"))
                                    (rule "allRight" (formula "22") (inst "sk=iv_1"))
                                    (rule "orRight" (formula "22"))
                                    (rule "orRight" (formula "22"))
                                    (rule "applyEqReverse" (formula "24") (term "1,1,1") (ifseqformula "3"))
                                    (rule "applyEqReverse" (formula "24") (term "0,1,1,1,0,1") (ifseqformula "3"))
                                    (rule "hideAuxiliaryEq" (formula "3"))
                                    (rule "eqSymm" (formula "23"))
                                    (rule "inEqSimp_geqRight" (formula "22"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "1") (term "0"))
                                    (rule "inEqSimp_leqRight" (formula "22"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "replace_known_left" (formula "23") (term "0,0,0") (ifseqformula "1"))
                                    (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "1")))
                                    (rule "inEqSimp_homoInEq0" (formula "23") (term "0,1"))
                                    (rule "polySimp_addComm1" (formula "23") (term "0,0,1"))
                                    (rule "inEqSimp_homoInEq0" (formula "23") (term "0,0"))
                                    (rule "polySimp_addComm1" (formula "23") (term "0,0,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                    (rule "polySimp_elimOne" (formula "2") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "0,1"))
                                    (rule "polySimp_mulComm0" (formula "23") (term "1,0,1"))
                                    (rule "polySimp_rightDist" (formula "23") (term "1,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,1"))
                                    (rule "mul_literals" (formula "23") (term "0,1,0,1"))
                                    (rule "polySimp_elimOne" (formula "23") (term "1,1,0,1"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "0,0"))
                                    (rule "polySimp_mulComm0" (formula "23") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "23") (term "1,0,0"))
                                    (rule "mul_literals" (formula "23") (term "0,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0"))
                                    (rule "pullOutSelect" (formula "23") (term "1,0") (inst "selectSK=arr_12"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "12"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "eqSymm" (formula "24"))
                                    (rule "allLeft" (formula "10") (inst "t=iv_0"))
                                    (rule "inEqSimp_commuteGeq" (formula "10") (term "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "10") (term "1") (ifseqformula "4"))
                                    (rule "inEqSimp_homoInEq1" (formula "10") (term "0,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1"))
                                    (rule "add_literals" (formula "10") (term "1,1,0,0,1"))
                                    (rule "times_zero_1" (formula "10") (term "1,0,0,1"))
                                    (rule "add_zero_right" (formula "10") (term "0,0,1"))
                                    (rule "leq_literals" (formula "10") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "10"))
                                    (rule "inEqSimp_contradInEq1" (formula "10") (term "1") (ifseqformula "6"))
                                    (rule "qeq_literals" (formula "10") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "10"))
                                    (rule "notLeft" (formula "10"))
                                    (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "24"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "ifthenelse_negated" (formula "1") (term "0"))
                                    (rule "narrowSelectArrayType" (formula "25") (term "1,0") (ifseqformula "8") (ifseqformula "24"))
                                    (rule "eqSymm" (formula "25"))
                                    (rule "narrowSelectArrayType" (formula "1") (term "2,0") (ifseqformula "11") (ifseqformula "24"))
                                    (rule "narrowSelectArrayType" (formula "1") (term "1,0") (ifseqformula "8") (ifseqformula "24"))
                                    (rule "ifthenelse_split" (formula "3") (term "0"))
                                    (branch " verif.selectvoting.system.core.ConservativeExtension.messages[iv_0].length >= 1 TRUE"
                                       (rule "replace_known_left" (formula "26") (term "0,1") (ifseqformula "4"))
                                       (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "4")))
                                       (rule "onlyCreatedObjectsAreReferenced" (formula "11") (term "1,0,0,0,0,0") (ifseqformula "9"))
                                       (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "30"))
                                       (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "6")))
                                       (rule "true_left" (formula "11"))
                                       (rule "allLeft" (formula "24") (inst "t=iv_0"))
                                       (rule "inEqSimp_commuteGeq" (formula "24") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "24") (term "1,0") (ifseqformula "7"))
                                       (rule "qeq_literals" (formula "24") (term "0,1,0"))
                                       (builtin "One Step Simplification" (formula "24"))
                                       (rule "pullOutSelect" (formula "24") (term "0,0,0") (inst "selectSK=arr_13"))
                                       (rule "simplifySelectOfAnonEQ" (formula "24") (ifseqformula "19"))
                                       (builtin "One Step Simplification" (formula "24"))
                                       (rule "applyEqReverse" (formula "25") (term "0,0,0") (ifseqformula "24"))
                                       (rule "hideAuxiliaryEq" (formula "24"))
                                       (rule "allLeft" (formula "17") (inst "t=iv_0"))
                                       (rule "inEqSimp_commuteGeq" (formula "17") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "17") (term "1,0") (ifseqformula "7"))
                                       (rule "qeq_literals" (formula "17") (term "0,1,0"))
                                       (builtin "One Step Simplification" (formula "17"))
                                       (rule "pullOutSelect" (formula "17") (term "0,0,0") (inst "selectSK=arr_14"))
                                       (rule "simplifySelectOfAnonEQ" (formula "17") (ifseqformula "13"))
                                       (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "31")) (ifInst ""  (formula "30")))
                                       (rule "applyEqReverse" (formula "18") (term "0,0,0") (ifseqformula "17"))
                                       (rule "hideAuxiliaryEq" (formula "17"))
                                       (rule "narrowSelectArrayType" (formula "17") (term "0,0,0") (ifseqformula "12") (ifseqformula "30"))
                                       (rule "allLeft" (formula "23") (inst "t=iv_0"))
                                       (rule "replaceKnownSelect_taclet0000100000000_5" (formula "23") (term "1,0,1"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0000100000000_6" (formula "23") (term "1,0,1"))
                                       (rule "inEqSimp_homoInEq1" (formula "23") (term "1,0"))
                                       (rule "polySimp_addComm1" (formula "23") (term "0,1,0"))
                                       (rule "Query_axiom_for_compare_[B_[B__in_verif_selectvoting_system_core_ConservativeExtension" (formula "23") (term "0,1") (inst "#res=x") (inst "#p0=x_arr") (inst "#p1=x_arr_1") (inst "compare_sk=compare_sk_0"))
                                       (builtin "One Step Simplification" (formula "23"))
                                       (rule "eqSymm" (formula "23") (term "0,1"))
                                       (rule "pullOutSelect" (formula "23") (term "0,1,0") (inst "selectSK=arr_15"))
                                       (rule "simplifySelectOfAnonEQ" (formula "23") (ifseqformula "20"))
                                       (builtin "One Step Simplification" (formula "23"))
                                       (rule "applyEqReverse" (formula "24") (term "0,1,0") (ifseqformula "23"))
                                       (rule "hideAuxiliaryEq" (formula "23"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0"))
                                       (rule "polySimp_mulComm0" (formula "24") (term "1,1,0"))
                                       (rule "polySimp_rightDist" (formula "24") (term "1,1,0"))
                                       (rule "mul_literals" (formula "24") (term "0,1,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0"))
                                       (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0"))
                                       (rule "inEqSimp_contradInEq1" (formula "24") (term "0,0") (ifseqformula "7"))
                                       (rule "qeq_literals" (formula "24") (term "0,0,0"))
                                       (builtin "One Step Simplification" (formula "24"))
                                       (rule "boxToDiamond" (formula "23") (term "1"))
                                       (builtin "One Step Simplification" (formula "23"))
                                       (rule "notLeft" (formula "23"))
                                       (rule "commute_or" (formula "23"))
                                       (rule "methodBodyExpand" (formula "28") (term "1") (newnames "heapBefore_compare,savedHeapBefore_compare,x_arrBefore_compare,x_arr_1Before_compare"))
                                       (builtin "One Step Simplification" (formula "28"))
                                       (rule "ifUnfold" (formula "28") (term "1") (inst "#boolv=x_1"))
                                       (rule "variableDeclaration" (formula "28") (term "1") (newnames "x_1"))
                                       (rule "compound_assignment_3_nonsimple" (formula "28") (term "1"))
                                       (rule "ifElseUnfold" (formula "28") (term "1") (inst "#boolv=x_2"))
                                       (rule "variableDeclaration" (formula "28") (term "1") (newnames "x_2"))
                                       (rule "compound_assignment_2" (formula "28") (term "1") (inst "#v=x_3"))
                                       (rule "variableDeclarationAssign" (formula "28") (term "1"))
                                       (rule "variableDeclaration" (formula "28") (term "1") (newnames "x_3"))
                                       (rule "inequality_comparison_simple" (formula "28") (term "1"))
                                       (builtin "One Step Simplification" (formula "28"))
                                       (rule "compound_assignment_1_new" (formula "28") (term "1"))
                                       (builtin "One Step Simplification" (formula "28"))
                                       (rule "ifthenelse_negated" (formula "28") (term "0,1,0"))
                                       (rule "arrayLengthNotNegative" (formula "3") (term "0"))
                                       (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "4"))
                                       (rule "leq_literals" (formula "3") (term "0"))
                                       (builtin "One Step Simplification" (formula "3"))
                                       (rule "true_left" (formula "3"))
                                       (rule "arrayLengthIsAShort" (formula "4") (term "0"))
                                       (builtin "One Step Simplification" (formula "4"))
                                       (rule "true_left" (formula "4"))
                                       (rule "ifElseSplit" (formula "28"))
                                       (branch "if x_2 true"
                                          (builtin "One Step Simplification" (formula "29"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "replace_known_left" (formula "27") (term "0,0") (ifseqformula "1"))
                                          (builtin "One Step Simplification" (formula "27"))
                                          (rule "replace_known_left" (formula "18") (term "1") (ifseqformula "27"))
                                          (builtin "One Step Simplification" (formula "18"))
                                          (rule "true_left" (formula "18"))
                                          (rule "ifSkipThen" (formula "28") (term "1"))
                                          (builtin "One Step Simplification" (formula "28"))
                                          (rule "assignment" (formula "28") (term "1"))
                                          (builtin "One Step Simplification" (formula "28"))
                                          (rule "inEqSimp_subsumption0" (formula "23") (term "1") (ifseqformula "26"))
                                          (rule "inEqSimp_homoInEq0" (formula "23") (term "0,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "23") (term "0,0,1"))
                                          (rule "add_literals" (formula "23") (term "1,1,0,0,1"))
                                          (rule "times_zero_1" (formula "23") (term "1,0,0,1"))
                                          (rule "add_literals" (formula "23") (term "0,0,1"))
                                          (rule "qeq_literals" (formula "23") (term "0,1"))
                                          (builtin "One Step Simplification" (formula "23"))
                                          (rule "true_left" (formula "23"))
                                          (rule "inEqSimp_exactShadow3" (formula "24") (ifseqformula "25"))
                                          (rule "mul_literals" (formula "24") (term "0,0"))
                                          (rule "add_zero_left" (formula "24") (term "0"))
                                          (rule "methodCallReturn" (formula "27") (term "1"))
                                          (rule "assignment" (formula "27") (term "1"))
                                          (builtin "One Step Simplification" (formula "27"))
                                          (rule "methodCallEmpty" (formula "27") (term "1"))
                                          (builtin "One Step Simplification" (formula "27"))
                                          (rule "emptyModality" (formula "27") (term "1"))
                                          (builtin "One Step Simplification" (formula "27"))
                                          (rule "notRight" (formula "27"))
                                          (rule "eqSymm" (formula "1"))
                                          (rule "ifthenelse_split" (formula "3") (term "0"))
                                          (branch " verif.selectvoting.system.core.ConservativeExtension.messages[iv_0].<created> = TRUE TRUE"
                                             (rule "applyEqReverse" (formula "30") (term "0") (ifseqformula "4"))
                                             (builtin "One Step Simplification" (formula "30"))
                                             (rule "closeTrue" (formula "30"))
                                          )
                                          (branch " verif.selectvoting.system.core.ConservativeExtension.messages[iv_0].<created> = TRUE FALSE"
                                             (rule "referencedObjectIsCreatedRight" (formula "28") (ifseqformula "29"))
                                             (rule "close" (formula "28") (ifseqformula "11"))
                                          )
                                       )
                                       (branch "if x_2 false"
                                          (builtin "One Step Simplification" (formula "29"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "notLeft" (formula "1"))
                                          (rule "replace_known_right" (formula "26") (term "0,0") (ifseqformula "28"))
                                          (builtin "One Step Simplification" (formula "26"))
                                          (rule "true_left" (formula "26"))
                                          (rule "inequality_comparison_simple" (formula "28") (term "1"))
                                          (builtin "One Step Simplification" (formula "28"))
                                          (rule "blockEmpty" (formula "28") (term "1"))
                                          (rule "ifSplit" (formula "28"))
                                          (branch "if x_1 true"
                                             (builtin "One Step Simplification" (formula "29"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "notLeft" (formula "1"))
                                             (rule "variableDeclarationAssign" (formula "29") (term "1"))
                                             (rule "variableDeclaration" (formula "29") (term "1") (newnames "n1"))
                                             (rule "assignment_read_length" (formula "29") (term "1"))
                                             (branch "Normal Execution (x_arr != null)"
                                                (builtin "One Step Simplification" (formula "30"))
                                                (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "28")))
                                                (rule "false_right" (formula "29"))
                                                (rule "variableDeclarationAssign" (formula "29") (term "1"))
                                                (rule "variableDeclaration" (formula "29") (term "1") (newnames "n2"))
                                                (rule "assignment_read_length" (formula "29") (term "1"))
                                                (branch "Normal Execution (x_arr_1 != null)"
                                                   (builtin "One Step Simplification" (formula "30"))
                                                   (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "27")))
                                                   (rule "false_right" (formula "29"))
                                                   (rule "variableDeclarationAssign" (formula "29") (term "1"))
                                                   (rule "variableDeclaration" (formula "29") (term "1") (newnames "min_1"))
                                                   (builtin "Use Operation Contract" (formula "29") (newnames "heapBefore_min,result_2,exc_2") (contract "verif.selectvoting.system.core.ConservativeExtension[verif.selectvoting.system.core.ConservativeExtension::min(int,int)].JML normal_behavior operation contract.0"))
                                                   (branch "Post (min)"
                                                      (builtin "One Step Simplification" (formula "27"))
                                                      (rule "andLeft" (formula "27"))
                                                      (rule "andLeft" (formula "28"))
                                                      (rule "andLeft" (formula "28"))
                                                      (rule "eqSymm" (formula "28") (term "1"))
                                                      (rule "eqSymm" (formula "29") (term "0,1,1"))
                                                      (rule "eqSymm" (formula "29") (term "0,1"))
                                                      (rule "inEqSimp_gtToGeq" (formula "29") (term "0"))
                                                      (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,0"))
                                                      (rule "polySimp_addComm1" (formula "29") (term "0,0"))
                                                      (rule "inEqSimp_commuteLeq" (formula "28") (term "0"))
                                                      (rule "assignment" (formula "32") (term "1"))
                                                      (rule "sequentialToParallel2" (formula "32"))
                                                      (rule "simplifyUpdate3" (formula "32") (term "1,0"))
                                                      (rule "inEqSimp_sepNegMonomial1" (formula "29") (term "0"))
                                                      (rule "polySimp_mulLiterals" (formula "29") (term "0,0"))
                                                      (rule "polySimp_elimOne" (formula "29") (term "0,0"))
                                                      (rule "for_to_while" (formula "32") (term "1") (inst "#outerLabel=_label1") (inst "#innerLabel=_label0"))
                                                      (rule "variableDeclarationAssign" (formula "32") (term "1"))
                                                      (rule "variableDeclaration" (formula "32") (term "1") (newnames "i"))
                                                      (rule "assignment" (formula "32") (term "1"))
                                                      (rule "sequentialToParallel2" (formula "32"))
                                                      (rule "simplifyUpdate3" (formula "32") (term "1,0"))
                                                      (builtin "Loop Invariant" (formula "32") (newnames "variant,b,heapBefore_LOOP,iBefore_LOOP,i_0,heap_After_LOOP,anon_heap_LOOP,o,f"))
                                                      (branch "Invariant Initially Valid"
                                                         (rule "inInt" (formula "32") (term "1,0,0,1,0,1"))
                                                         (rule "concrete_and_3" (formula "32") (term "0,0,1,0,1"))
                                                         (rule "eqSymm" (formula "32") (term "1,0,0,0,1"))
                                                         (rule "eqSymm" (formula "32") (term "1,0,0,0,0,1"))
                                                         (rule "eqSymm" (formula "32") (term "1,0,0,1"))
                                                         (rule "eqSymm" (formula "32") (term "1,0,1,0,1"))
                                                         (rule "applyOnRigidFormula" (formula "32"))
                                                         (rule "simplifyUpdate2" (formula "32") (term "1"))
                                                         (rule "applyOnRigidFormula" (formula "32") (term "0"))
                                                         (rule "simplifyUpdate2" (formula "32") (term "1,0"))
                                                         (rule "applyOnRigidFormula" (formula "32") (term "1"))
                                                         (rule "applyOnPV" (formula "32") (term "0,1"))
                                                         (rule "wellFormedAnonEQ" (formula "32") (term "1") (ifseqformula "20"))
                                                         (rule "wellFormedAnonEQ" (formula "32") (term "0,1") (ifseqformula "13"))
                                                         (rule "replace_known_left" (formula "32") (term "1,1") (ifseqformula "19"))
                                                         (rule "concrete_and_3" (formula "32") (term "1"))
                                                         (rule "replace_known_left" (formula "32") (term "1,1") (ifseqformula "12"))
                                                         (rule "concrete_and_3" (formula "32") (term "1"))
                                                         (rule "replace_known_left" (formula "32") (term "1") (ifseqformula "9"))
                                                         (rule "concrete_and_3" (formula "32"))
                                                         (rule "applyOnRigidFormula" (formula "32") (term "1"))
                                                         (rule "applyOnRigidFormula" (formula "32") (term "0"))
                                                         (rule "simplifyUpdate2" (formula "32") (term "1,0"))
                                                         (rule "simplifyUpdate2" (formula "32") (term "0,0"))
                                                         (rule "applyOnRigidFormula" (formula "32") (term "0,1"))
                                                         (rule "simplifyUpdate2" (formula "32") (term "0,0,1"))
                                                         (rule "simplifyUpdate2" (formula "32") (term "1,0,1"))
                                                         (rule "applyOnRigidFormula" (formula "32") (term "1,0"))
                                                         (rule "simplifyUpdate1" (formula "32") (term "0,1,0"))
                                                         (rule "simplifyUpdate1" (formula "32") (term "1,1,0"))
                                                         (rule "applyOnPV" (formula "32") (term "1,1,0"))
                                                         (rule "applyOnRigidFormula" (formula "32") (term "0,0"))
                                                         (rule "simplifyUpdate2" (formula "32") (term "0,0,0"))
                                                         (rule "simplifyUpdate2" (formula "32") (term "1,0,0"))
                                                         (rule "applyOnRigidFormula" (formula "32") (term "0,0,1"))
                                                         (rule "simplifyUpdate2" (formula "32") (term "0,0,0,1"))
                                                         (rule "applyOnRigidFormula" (formula "32") (term "1,0,1"))
                                                         (rule "simplifyUpdate1" (formula "32") (term "1,1,0,1"))
                                                         (rule "simplifyUpdate1" (formula "32") (term "0,1,0,1"))
                                                         (rule "applyOnRigidTerm" (formula "32") (term "0,1,0"))
                                                         (rule "simplifyUpdate1" (formula "32") (term "0,0,1,0"))
                                                         (rule "simplifyUpdate1" (formula "32") (term "2,0,1,0"))
                                                         (rule "simplifyUpdate1" (formula "32") (term "1,0,1,0"))
                                                         (rule "applyOnPV" (formula "32") (term "0,0,1,0"))
                                                         (rule "applyOnPV" (formula "32") (term "2,0,1,0"))
                                                         (rule "applyOnPV" (formula "32") (term "1,0,1,0"))
                                                         (rule "applyOnRigidFormula" (formula "32") (term "0,0,0"))
                                                         (rule "simplifyUpdate2" (formula "32") (term "0,0,0,0"))
                                                         (rule "simplifyUpdate2" (formula "32") (term "1,0,0,0"))
                                                         (rule "applyOnRigidFormula" (formula "32") (term "1,0,0"))
                                                         (rule "simplifyUpdate1" (formula "32") (term "0,1,0,0"))
                                                         (rule "simplifyUpdate1" (formula "32") (term "1,1,0,0"))
                                                         (rule "applyOnPV" (formula "32") (term "1,1,0,0"))
                                                         (rule "applyOnRigidFormula" (formula "32") (term "1,0,0,1"))
                                                         (rule "simplifyUpdate1" (formula "32") (term "0,1,0,0,1"))
                                                         (rule "applyOnPV" (formula "32") (term "1,1,0,0,1"))
                                                         (rule "applyOnRigidTerm" (formula "32") (term "1,1,0,1"))
                                                         (rule "simplifyUpdate1" (formula "32") (term "2,1,1,0,1"))
                                                         (rule "simplifyUpdate1" (formula "32") (term "0,1,1,0,1"))
                                                         (rule "simplifyUpdate1" (formula "32") (term "1,1,1,0,1"))
                                                         (rule "applyOnPV" (formula "32") (term "0,1,1,0,1"))
                                                         (rule "applyOnPV" (formula "32") (term "1,1,1,0,1"))
                                                         (rule "eqSymm" (formula "32") (term "1,0,1"))
                                                         (rule "applyOnRigidFormula" (formula "32") (term "0,0,0,0"))
                                                         (rule "simplifyUpdate2" (formula "32") (term "0,0,0,0,0"))
                                                         (rule "applyOnRigidFormula" (formula "32") (term "1,0,0,0"))
                                                         (rule "simplifyUpdate1" (formula "32") (term "0,1,0,0,0"))
                                                         (rule "simplifyUpdate1" (formula "32") (term "1,1,0,0,0"))
                                                         (rule "applyOnPV" (formula "32") (term "1,1,0,0,0"))
                                                         (rule "applyOnRigidTerm" (formula "32") (term "0,1,0,0"))
                                                         (rule "applyOnPV" (formula "32") (term "0,0,1,0,0"))
                                                         (rule "eqClose" (formula "32") (term "1,0,0"))
                                                         (rule "concrete_and_3" (formula "32") (term "0,0"))
                                                         (rule "applyOnRigidTerm" (formula "32") (term "1,1,0,1"))
                                                         (rule "simplifyUpdate1" (formula "32") (term "0,1,1,0,1"))
                                                         (rule "simplifyUpdate1" (formula "32") (term "2,1,1,0,1"))
                                                         (rule "simplifyUpdate1" (formula "32") (term "1,1,1,0,1"))
                                                         (rule "applyOnPV" (formula "32") (term "0,1,1,0,1"))
                                                         (rule "applyOnPV" (formula "32") (term "1,1,1,0,1"))
                                                         (rule "eqSymm" (formula "32") (term "1,0,1"))
                                                         (rule "applyOnRigidFormula" (formula "32") (term "1,0,0,0"))
                                                         (rule "simplifyUpdate1" (formula "32") (term "1,1,0,0,0"))
                                                         (rule "simplifyUpdate1" (formula "32") (term "0,1,0,0,0"))
                                                         (rule "applyOnPV" (formula "32") (term "1,1,0,0,0"))
                                                         (rule "applyOnPV" (formula "32") (term "0,1,0,0,0"))
                                                         (rule "applyOnRigidFormula" (formula "32") (term "0,0,0,0"))
                                                         (rule "simplifyUpdate1" (formula "32") (term "0,0,0,0,0"))
                                                         (rule "applyOnPV" (formula "32") (term "1,0,0,0,0"))
                                                         (rule "leq_literals" (formula "32") (term "0,0,0,0"))
                                                         (rule "concrete_and_1" (formula "32") (term "0,0,0"))
                                                         (rule "applyOnRigidTerm" (formula "32") (term "0,1,0,0"))
                                                         (rule "applyOnPV" (formula "32") (term "0,0,1,0,0"))
                                                         (rule "eqClose" (formula "32") (term "1,0,0"))
                                                         (rule "concrete_and_3" (formula "32") (term "0,0"))
                                                         (rule "inEqSimp_ltToLeq" (formula "32") (term "1,0,0,1"))
                                                         (rule "times_zero_1" (formula "32") (term "1,0,0,1,0,0,1"))
                                                         (rule "add_zero_right" (formula "32") (term "0,0,1,0,0,1"))
                                                         (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0,0,1"))
                                                         (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0"))
                                                         (rule "Query_axiom_for_min_int_int__in_verif_selectvoting_system_core_ConservativeExtension" (formula "32") (term "0,1,0") (inst "min_sk=min_sk_2") (inst "#p1=x_2") (inst "#p0=x_1") (inst "#res=x"))
                                                         (rule "inInt" (formula "1") (term "0,0,1"))
                                                         (rule "concrete_impl_1" (formula "1") (term "0,1"))
                                                         (rule "eqSymm" (formula "33") (term "1,0"))
                                                         (rule "eqSymm" (formula "1") (term "0,1"))
                                                         (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0,0,1"))
                                                         (rule "mul_literals" (formula "33") (term "1,1,0,0,1"))
                                                         (rule "boxToDiamond" (formula "1") (term "1"))
                                                         (rule "notLeft" (formula "1"))
                                                         (rule "nnf_imp2or" (formula "33") (term "0,1"))
                                                         (rule "nnf_notAnd" (formula "33") (term "0,0,1"))
                                                         (rule "inEqSimp_notGeq" (formula "33") (term "0,0,0,1"))
                                                         (rule "times_zero_1" (formula "33") (term "1,0,0,0,0,0,1"))
                                                         (rule "add_zero_right" (formula "33") (term "0,0,0,0,0,1"))
                                                         (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0,0,0,1"))
                                                         (rule "mul_literals" (formula "33") (term "1,0,0,0,1"))
                                                         (rule "neq_or" (formula "33") (term "0,0,1"))
                                                         (rule "concrete_or_1" (formula "33") (term "0,1"))
                                                         (rule "all_unused" (formula "33") (term "1"))
                                                         (rule "concrete_and_3" (formula "33"))
                                                         (rule "applyEq_and_int0" (formula "33"))
                                                         (rule "methodBodyExpand" (formula "30") (term "1") (newnames "heapBefore_min_2,savedHeapBefore_min_1"))
                                                         (rule "simplifyUpdate2" (formula "30") (term "1"))
                                                         (rule "arrayLengthNotNegative" (formula "17") (term "0,1"))
                                                         (rule "arrayLengthIsAShort" (formula "4") (term "0"))
                                                         (rule "inShort" (formula "4"))
                                                         (rule "true_left" (formula "4"))
                                                         (rule "arrayLengthNotNegative" (formula "5") (term "0"))
                                                         (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "9"))
                                                         (rule "leq_literals" (formula "5") (term "0"))
                                                         (rule "concrete_or_1" (formula "5"))
                                                         (rule "true_left" (formula "5"))
                                                         (rule "arrayLengthIsAShort" (formula "8") (term "0"))
                                                         (rule "inShort" (formula "8"))
                                                         (rule "true_left" (formula "8"))
                                                         (rule "arrayLengthNotNegative" (formula "4") (term "0"))
                                                         (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "3"))
                                                         (rule "leq_literals" (formula "4") (term "0"))
                                                         (rule "concrete_or_1" (formula "4"))
                                                         (rule "true_left" (formula "4"))
                                                         (rule "arrayLengthIsAShort" (formula "25") (term "0"))
                                                         (rule "inShort" (formula "25"))
                                                         (rule "true_left" (formula "25"))
                                                         (rule "equalityToSeqGetAndSeqLenLeft" (formula "16") (inst "iv=iv"))
                                                         (rule "andLeft" (formula "16"))
                                                         (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
                                                         (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
                                                         (rule "applyEq" (formula "17") (term "0,0,1,0,0,1,0,0") (ifseqformula "18"))
                                                         (rule "applyEq" (formula "17") (term "0,0,1,0") (ifseqformula "18"))
                                                         (rule "eqClose" (formula "17") (term "1,0"))
                                                         (rule "concrete_impl_4" (formula "17") (term "0"))
                                                         (rule "applyEq" (formula "16") (term "0,0") (ifseqformula "18"))
                                                         (rule "eqClose" (formula "16"))
                                                         (rule "true_left" (formula "16"))
                                                         (rule "all_unused" (formula "16"))
                                                         (rule "true_left" (formula "16"))
                                                         (rule "arrayLengthIsAShort" (formula "28") (term "0,1"))
                                                         (rule "inShort" (formula "28"))
                                                         (rule "true_left" (formula "28"))
                                                         (rule "arrayLengthNotNegative" (formula "28") (term "0,1"))
                                                         (rule "arrayLengthIsAShort" (formula "30") (term "0,0,1,1"))
                                                         (rule "inShort" (formula "30"))
                                                         (rule "true_left" (formula "30"))
                                                         (rule "arrayLengthNotNegative" (formula "30") (term "0,0,1,1"))
                                                         (rule "ifElseUnfold" (formula "32") (term "1") (inst "#boolv=x_3"))
                                                         (rule "variableDeclaration" (formula "32") (term "1") (newnames "x_7"))
                                                         (rule "less_equal_than_comparison_simple" (formula "32") (term "1"))
                                                         (rule "sequentialToParallel2" (formula "32"))
                                                         (rule "simplifyUpdate3" (formula "32") (term "1,0"))
                                                         (rule "applyOnElementary" (formula "32") (term "1,0"))
                                                         (rule "applyOnRigidTerm" (formula "32") (term "0,1,0"))
                                                         (rule "simplifyUpdate1" (formula "32") (term "2,0,1,0"))
                                                         (rule "simplifyUpdate1" (formula "32") (term "1,0,1,0"))
                                                         (rule "applyOnRigidFormula" (formula "32") (term "0,0,1,0"))
                                                         (rule "simplifyUpdate1" (formula "32") (term "0,0,0,1,0"))
                                                         (rule "simplifyUpdate1" (formula "32") (term "1,0,0,1,0"))
                                                         (rule "applyOnPV" (formula "32") (term "0,0,0,1,0"))
                                                         (rule "applyOnPV" (formula "32") (term "1,0,0,1,0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0,1,0"))
                                                         (rule "onlyCreatedObjectsAreReferenced" (formula "1") (term "1,2,0") (ifseqformula "9"))
                                                         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "37"))
                                                         (rule "concrete_or_2" (formula "1"))
                                                         (rule "replace_known_left" (formula "2") (term "0,0") (ifseqformula "1"))
                                                         (rule "ifthenelse_true" (formula "2") (term "0"))
                                                         (rule "applyEqReverse" (formula "38") (term "0") (ifseqformula "2"))
                                                         (rule "eqClose" (formula "38"))
                                                         (rule "closeTrue" (formula "38"))
                                                      )
                                                      (branch "Body Preserves Invariant"
                                                         (rule "inInt" (formula "31") (term "1,1,1"))
                                                         (rule "concrete_and_3" (formula "31") (term "1,1"))
                                                         (rule "inInt" (formula "31") (term "1,0,0,1,1,1"))
                                                         (rule "concrete_and_3" (formula "31") (term "0,0,1,1,1"))
                                                         (rule "inInt" (formula "34") (term "1,0,0,1,0,0,1,1,1,0,1,1,1,1,1"))
                                                         (rule "concrete_and_3" (formula "34") (term "0,0,1,0,0,1,1,1,0,1,1,1,1,1"))
                                                         (rule "translateJavaSubInt" (formula "34") (term "0,0,1,1,1"))
                                                         (rule "translateJavaSubInt" (formula "34") (term "0,1,1,1,1,0,1,1,1,1,1"))
                                                         (rule "simplifyUpdate2" (formula "34") (term "1"))
                                                         (rule "eqSymm" (formula "31") (term "1,0,1,1,1"))
                                                         (rule "eqSymm" (formula "31") (term "1,0,0,1,1"))
                                                         (rule "eqSymm" (formula "31") (term "1,0,0,0,1,1"))
                                                         (rule "eqSymm" (formula "31") (term "1,0,1,1"))
                                                         (rule "eqSymm" (formula "34") (term "1,0,0,0,0,0,1,1,1,0,1,1,1,1,1"))
                                                         (rule "eqSymm" (formula "34") (term "1,0,0,0,0,1,1,1,0,1,1,1,1,1"))
                                                         (rule "eqSymm" (formula "34") (term "1,0,1,0,0,1,1,1,0,1,1,1,1,1"))
                                                         (rule "eqSymm" (formula "34") (term "1,0,0,0,1,1,1,0,1,1,1,1,1"))
                                                         (rule "eqSymm" (formula "34") (term "0,0,1,0,1,1,1,0,1,1,1,1,1"))
                                                         (rule "polySimp_elimSub" (formula "34") (term "0,0,1,1,1"))
                                                         (rule "polySimp_elimSub" (formula "34") (term "0,1,1,1,1,0,1,1,1,1,1"))
                                                         (rule "sequentialToParallel2" (formula "31"))
                                                         (rule "simplifyUpdate2" (formula "31"))
                                                         (rule "simplifyUpdate3" (formula "31") (term "1,0"))
                                                         (rule "andLeft" (formula "31"))
                                                         (rule "simplifyUpdate2" (formula "32"))
                                                         (rule "andLeft" (formula "31"))
                                                         (rule "simplifyUpdate2" (formula "31"))
                                                         (rule "simplifyUpdate2" (formula "32"))
                                                         (rule "andLeft" (formula "31"))
                                                         (rule "simplifyUpdate2" (formula "31"))
                                                         (rule "simplifyUpdate2" (formula "32"))
                                                         (rule "andLeft" (formula "31"))
                                                         (rule "simplifyUpdate2" (formula "32"))
                                                         (rule "simplifyUpdate2" (formula "31"))
                                                         (rule "andLeft" (formula "31"))
                                                         (rule "simplifyUpdate2" (formula "31"))
                                                         (rule "sequentialToParallel2" (formula "39"))
                                                         (rule "simplifyUpdate3" (formula "39") (term "1,0"))
                                                         (rule "applyOnElementary" (formula "39") (term "1,0"))
                                                         (rule "applyOnPV" (formula "39") (term "0,1,0"))
                                                         (rule "sequentialToParallel2" (formula "39") (term "1"))
                                                         (rule "applyOnElementary" (formula "39") (term "1,0,1"))
                                                         (rule "sequentialToParallel2" (formula "39"))
                                                         (rule "simplifyUpdate2" (formula "39"))
                                                         (rule "simplifyUpdate3" (formula "39") (term "1,0"))
                                                         (rule "impRight" (formula "39"))
                                                         (rule "simplifyUpdate2" (formula "1"))
                                                         (rule "simplifyUpdate3" (formula "1") (term "1,0"))
                                                         (rule "applyOnParallel" (formula "40") (term "1,0"))
                                                         (rule "simplifyUpdate3" (formula "40") (term "0,1,0"))
                                                         (rule "applyOnElementary" (formula "40") (term "1,1,0"))
                                                         (rule "sequentialToParallel1" (formula "40") (term "0,1,1,0"))
                                                         (rule "simplifyUpdate1" (formula "40") (term "0,1,1,0"))
                                                         (rule "simplifyUpdate3" (formula "40") (term "1,0,0,1,1,0"))
                                                         (rule "polySimp_addComm0" (formula "40") (term "0,1,1,1,1,0,1"))
                                                         (rule "polySimp_addComm0" (formula "40") (term "1,0,1,1,0"))
                                                         (rule "applyOnRigidFormula" (formula "37"))
                                                         (rule "applyOnRigidFormula" (formula "36"))
                                                         (rule "simplifyUpdate1" (formula "36") (term "0"))
                                                         (rule "simplifyUpdate1" (formula "36") (term "1"))
                                                         (rule "applyOnPV" (formula "36") (term "1"))
                                                         (rule "applyOnRigidFormula" (formula "35"))
                                                         (rule "simplifyUpdate1" (formula "35") (term "0"))
                                                         (rule "simplifyUpdate1" (formula "35") (term "1"))
                                                         (rule "applyOnPV" (formula "35") (term "1"))
                                                         (rule "applyOnRigidFormula" (formula "34"))
                                                         (rule "simplifyUpdate1" (formula "34") (term "0"))
                                                         (rule "simplifyUpdate1" (formula "34") (term "1"))
                                                         (rule "applyOnPV" (formula "34") (term "1"))
                                                         (rule "applyOnRigidFormula" (formula "33"))
                                                         (rule "simplifyUpdate1" (formula "33") (term "1"))
                                                         (rule "simplifyUpdate1" (formula "33") (term "0"))
                                                         (rule "applyOnPV" (formula "33") (term "1"))
                                                         (rule "applyOnPV" (formula "33") (term "0"))
                                                         (rule "applyOnRigidFormula" (formula "32"))
                                                         (rule "applyOnPV" (formula "32") (term "1"))
                                                         (rule "simplifyUpdate1" (formula "32") (term "0"))
                                                         (rule "applyOnRigidTerm" (formula "40") (term "0,1,1,0"))
                                                         (rule "simplifyUpdate1" (formula "40") (term "0,0,1,1,0"))
                                                         (rule "simplifyUpdate1" (formula "40") (term "1,0,1,1,0"))
                                                         (rule "applyOnPV" (formula "40") (term "1,0,1,1,0"))
                                                         (rule "polySimp_addComm0" (formula "40") (term "0,1,1,0"))
                                                         (rule "applyOnRigidFormula" (formula "37") (term "0"))
                                                         (rule "simplifyUpdate2" (formula "37") (term "0,0"))
                                                         (rule "simplifyUpdate2" (formula "37") (term "1,0"))
                                                         (rule "applyOnRigidTerm" (formula "36") (term "0"))
                                                         (rule "simplifyUpdate1" (formula "36") (term "0,0"))
                                                         (rule "simplifyUpdate1" (formula "36") (term "1,0"))
                                                         (rule "simplifyUpdate1" (formula "36") (term "2,0"))
                                                         (rule "applyOnPV" (formula "36") (term "0,0"))
                                                         (rule "applyOnPV" (formula "36") (term "1,0"))
                                                         (rule "applyOnPV" (formula "36") (term "2,0"))
                                                         (rule "applyOnRigidTerm" (formula "35") (term "0"))
                                                         (rule "applyOnPV" (formula "35") (term "0,0"))
                                                         (rule "eqClose" (formula "35"))
                                                         (rule "true_left" (formula "35"))
                                                         (rule "inEqSimp_ltToLeq" (formula "39") (term "1,0,0,1,0,0,1,1,1,0,1"))
                                                         (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,1,0,0,1,0,0,1,1,1,0,1"))
                                                         (rule "applyOnRigidTerm" (formula "34") (term "0"))
                                                         (rule "applyOnPV" (formula "34") (term "0,0"))
                                                         (rule "eqClose" (formula "34"))
                                                         (rule "true_left" (formula "34"))
                                                         (rule "applyOnRigidTerm" (formula "38") (term "1,0,1,1,0"))
                                                         (rule "applyOnPV" (formula "38") (term "0,1,0,1,1,0"))
                                                         (rule "simplifyUpdate1" (formula "38") (term "1,1,0,1,1,0"))
                                                         (rule "polySimp_addComm0" (formula "38") (term "0,1,1,0"))
                                                         (rule "applyOnRigidFormula" (formula "35") (term "0,0"))
                                                         (rule "simplifyUpdate2" (formula "35") (term "0,0,0"))
                                                         (rule "applyOnRigidFormula" (formula "35") (term "1,0"))
                                                         (rule "simplifyUpdate1" (formula "35") (term "0,1,0"))
                                                         (rule "simplifyUpdate1" (formula "35") (term "1,1,0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "38") (term "1,0,0,0,0,0,0,1,1,1,0,1"))
                                                         (rule "inEqSimp_commuteLeq" (formula "38") (term "0,0,0,0,0,0,0,1,1,1,0,1"))
                                                         (rule "inEqSimp_commuteLeq" (formula "38") (term "0,0,0,1,0,0,1,1,1,0,1"))
                                                         (rule "applyOnRigidFormula" (formula "35") (term "1,0,0"))
                                                         (rule "simplifyUpdate1" (formula "35") (term "0,1,0,0"))
                                                         (rule "applyOnPV" (formula "35") (term "1,1,0,0"))
                                                         (rule "applyOnRigidTerm" (formula "35") (term "0,1,0"))
                                                         (rule "simplifyUpdate1" (formula "35") (term "2,0,1,0"))
                                                         (rule "simplifyUpdate1" (formula "35") (term "1,0,1,0"))
                                                         (rule "simplifyUpdate1" (formula "35") (term "0,0,1,0"))
                                                         (rule "applyOnPV" (formula "35") (term "1,0,1,0"))
                                                         (rule "applyOnPV" (formula "35") (term "0,0,1,0"))
                                                         (rule "applyOnRigidTerm" (formula "35") (term "1,1,0"))
                                                         (rule "simplifyUpdate1" (formula "35") (term "2,1,1,0"))
                                                         (rule "simplifyUpdate1" (formula "35") (term "0,1,1,0"))
                                                         (rule "simplifyUpdate1" (formula "35") (term "1,1,1,0"))
                                                         (rule "applyOnPV" (formula "35") (term "0,1,1,0"))
                                                         (rule "applyOnPV" (formula "35") (term "1,1,1,0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "33"))
                                                         (rule "inEqSimp_ltToLeq" (formula "35") (term "1,0,0"))
                                                         (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,1,0,0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "32"))
                                                         (rule "inEqSimp_commuteLeq" (formula "35") (term "0,0,0"))
                                                         (rule "variableDeclarationAssign" (formula "1") (term "1"))
                                                         (rule "variableDeclarationAssign" (formula "38") (term "1"))
                                                         (rule "variableDeclaration" (formula "1") (term "1") (newnames "b_2"))
                                                         (rule "variableDeclaration" (formula "38") (term "1") (newnames "rtrn"))
                                                         (rule "assignment" (formula "38") (term "1"))
                                                         (rule "sequentialToParallel2" (formula "38"))
                                                         (rule "simplifyUpdate3" (formula "38") (term "1,0"))
                                                         (rule "variableDeclaration" (formula "38") (term "1") (newnames "returnExpr"))
                                                         (rule "variableDeclarationAssign" (formula "38") (term "1"))
                                                         (rule "variableDeclaration" (formula "38") (term "1") (newnames "exc_3"))
                                                         (rule "assignment" (formula "38") (term "1"))
                                                         (rule "sequentialToParallel2" (formula "38"))
                                                         (rule "simplifyUpdate3" (formula "38") (term "1,0"))
                                                         (rule "variableDeclaration" (formula "38") (term "1") (newnames "thrownExc"))
                                                         (rule "blockThrow" (formula "38") (term "1,0,0,1"))
                                                         (rule "blockReturn" (formula "38") (term "1,0,1,0,1"))
                                                         (rule "blockThrow" (formula "38") (term "1,0,0,1"))
                                                         (rule "blockReturn" (formula "38") (term "1,0,1,0,1"))
                                                         (rule "blockThrow" (formula "38") (term "1,0,0,1"))
                                                         (rule "blockReturn" (formula "38") (term "1,0,1,0,1"))
                                                         (rule "Query_axiom_for_min_int_int__in_verif_selectvoting_system_core_ConservativeExtension" (formula "34") (term "0") (inst "min_sk=min_sk_1") (inst "#p1=x_2") (inst "#p0=x_1") (inst "#res=x"))
                                                         (rule "inInt" (formula "34") (term "0,0,1"))
                                                         (rule "concrete_impl_1" (formula "34") (term "0,1"))
                                                         (rule "eqSymm" (formula "35"))
                                                         (rule "eqSymm" (formula "34") (term "0,1"))
                                                         (rule "applyEq" (formula "39") (term "1,0,1,1,0,0,0") (ifseqformula "35"))
                                                         (rule "applyEq" (formula "1") (term "0,1,0,0") (ifseqformula "35"))
                                                         (rule "applyEq" (formula "39") (term "0,1,0,0,0,0,0") (ifseqformula "35"))
                                                         (rule "applyEq" (formula "33") (term "0") (ifseqformula "35"))
                                                         (rule "applyEq" (formula "29") (term "1,1") (ifseqformula "35"))
                                                         (rule "applyEq" (formula "30") (term "1,0,1") (ifseqformula "35"))
                                                         (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "1,0,0"))
                                                         (rule "polySimp_mulComm0" (formula "36") (term "1,1,0,0"))
                                                         (rule "polySimp_rightDist" (formula "36") (term "1,1,0,0"))
                                                         (rule "polySimp_mulLiterals" (formula "36") (term "1,1,1,0,0"))
                                                         (rule "mul_literals" (formula "36") (term "0,1,1,0,0"))
                                                         (rule "polySimp_elimOne" (formula "36") (term "1,1,1,0,0"))
                                                         (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "1,0,0,1,0,0,1,1,1,0,1"))
                                                         (rule "polySimp_mulComm0" (formula "39") (term "1,1,0,0,1,0,0,1,1,1,0,1"))
                                                         (rule "polySimp_rightDist" (formula "39") (term "1,1,0,0,1,0,0,1,1,1,0,1"))
                                                         (rule "mul_literals" (formula "39") (term "0,1,1,0,0,1,0,0,1,1,1,0,1"))
                                                         (rule "polySimp_mulLiterals" (formula "39") (term "1,1,1,0,0,1,0,0,1,1,1,0,1"))
                                                         (rule "polySimp_elimOne" (formula "39") (term "1,1,1,0,0,1,0,0,1,1,1,0,1"))
                                                         (rule "boxToDiamond" (formula "1") (term "1"))
                                                         (rule "notLeft" (formula "1"))
                                                         (rule "boxToDiamond" (formula "33") (term "1"))
                                                         (rule "notLeft" (formula "33"))
                                                         (rule "nnf_imp2or" (formula "34") (term "0"))
                                                         (rule "nnf_notAnd" (formula "34") (term "0,0"))
                                                         (rule "inEqSimp_notGeq" (formula "34") (term "0,0,0"))
                                                         (rule "times_zero_1" (formula "34") (term "1,0,0,0,0,0"))
                                                         (rule "add_zero_right" (formula "34") (term "0,0,0,0,0"))
                                                         (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,0"))
                                                         (rule "mul_literals" (formula "34") (term "1,0,0,0"))
                                                         (rule "inEqSimp_notLeq" (formula "34") (term "1,0,0"))
                                                         (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0"))
                                                         (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0"))
                                                         (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0"))
                                                         (rule "add_literals" (formula "34") (term "0,0,0,1,0,0"))
                                                         (rule "add_zero_left" (formula "34") (term "0,0,1,0,0"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "1,0,0"))
                                                         (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0"))
                                                         (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0"))
                                                         (rule "nnf_imp2or" (formula "39") (term "0,1,0,0,1,1,1,0,1"))
                                                         (rule "nnf_notAnd" (formula "39") (term "0,0,1,0,0,1,1,1,0,1"))
                                                         (rule "inEqSimp_notLeq" (formula "39") (term "1,0,0,1,0,0,1,1,1,0,1"))
                                                         (rule "polySimp_rightDist" (formula "39") (term "1,0,0,1,0,0,1,0,0,1,1,1,0,1"))
                                                         (rule "mul_literals" (formula "39") (term "0,1,0,0,1,0,0,1,0,0,1,1,1,0,1"))
                                                         (rule "polySimp_addAssoc" (formula "39") (term "0,0,1,0,0,1,0,0,1,1,1,0,1"))
                                                         (rule "add_literals" (formula "39") (term "0,0,0,1,0,0,1,0,0,1,1,1,0,1"))
                                                         (rule "add_zero_left" (formula "39") (term "0,0,1,0,0,1,0,0,1,1,1,0,1"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "39") (term "1,0,0,1,0,0,1,1,1,0,1"))
                                                         (rule "polySimp_mulLiterals" (formula "39") (term "1,1,0,0,1,0,0,1,1,1,0,1"))
                                                         (rule "polySimp_elimOne" (formula "39") (term "1,1,0,0,1,0,0,1,1,1,0,1"))
                                                         (rule "inEqSimp_notGeq" (formula "39") (term "0,0,0,1,0,0,1,1,1,0,1"))
                                                         (rule "mul_literals" (formula "39") (term "1,0,0,0,0,0,1,0,0,1,1,1,0,1"))
                                                         (rule "add_zero_right" (formula "39") (term "0,0,0,0,0,1,0,0,1,1,1,0,1"))
                                                         (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "0,0,0,1,0,0,1,1,1,0,1"))
                                                         (rule "mul_literals" (formula "39") (term "1,0,0,0,1,0,0,1,1,1,0,1"))
                                                         (rule "less_than_comparison_simple" (formula "36") (term "1"))
                                                         (rule "sequentialToParallel2" (formula "36"))
                                                         (rule "simplifyUpdate2" (formula "36"))
                                                         (rule "simplifyUpdate3" (formula "36") (term "1,0"))
                                                         (rule "applyOnElementary" (formula "36") (term "1,0"))
                                                         (rule "applyOnRigidTerm" (formula "36") (term "0,1,0"))
                                                         (rule "simplifyUpdate1" (formula "36") (term "2,0,1,0"))
                                                         (rule "simplifyUpdate1" (formula "36") (term "1,0,1,0"))
                                                         (rule "applyOnRigidFormula" (formula "36") (term "0,0,1,0"))
                                                         (rule "simplifyUpdate1" (formula "36") (term "1,0,0,1,0"))
                                                         (rule "simplifyUpdate1" (formula "36") (term "0,0,0,1,0"))
                                                         (rule "applyOnPV" (formula "36") (term "1,0,0,1,0"))
                                                         (rule "applyOnPV" (formula "36") (term "0,0,0,1,0"))
                                                         (rule "inEqSimp_ltToLeq" (formula "36") (term "0,0,1,0"))
                                                         (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,0,0,1,0"))
                                                         (rule "polySimp_addComm1" (formula "36") (term "0,0,0,1,0"))
                                                         (rule "inEqSimp_sepNegMonomial0" (formula "36") (term "0,0,1,0"))
                                                         (rule "polySimp_mulLiterals" (formula "36") (term "0,0,0,1,0"))
                                                         (rule "polySimp_elimOne" (formula "36") (term "0,0,0,1,0"))
                                                         (rule "arrayLengthIsAShort" (formula "25") (term "0"))
                                                         (rule "inShort" (formula "25"))
                                                         (rule "true_left" (formula "25"))
                                                         (rule "arrayLengthNotNegative" (formula "18") (term "1,1,0"))
                                                         (rule "arrayLengthIsAShort" (formula "8") (term "0"))
                                                         (rule "inShort" (formula "8"))
                                                         (rule "true_left" (formula "8"))
                                                         (rule "arrayLengthNotNegative" (formula "3") (term "0"))
                                                         (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "4"))
                                                         (rule "leq_literals" (formula "3") (term "0"))
                                                         (rule "concrete_or_1" (formula "3"))
                                                         (rule "true_left" (formula "3"))
                                                         (rule "arrayLengthNotNegative" (formula "8") (term "0"))
                                                         (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "9"))
                                                         (rule "leq_literals" (formula "8") (term "0"))
                                                         (rule "concrete_or_1" (formula "8"))
                                                         (rule "true_left" (formula "8"))
                                                         (rule "equalityToSeqGetAndSeqLenLeft" (formula "16") (inst "iv=iv"))
                                                         (rule "andLeft" (formula "16"))
                                                         (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
                                                         (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
                                                         (rule "applyEq" (formula "16") (term "0,0") (ifseqformula "18"))
                                                         (rule "eqClose" (formula "16"))
                                                         (rule "true_left" (formula "16"))
                                                         (rule "applyEq" (formula "16") (term "0,0,1,0,0,1,0,0") (ifseqformula "17"))
                                                         (rule "applyEq" (formula "16") (term "0,0,1,0") (ifseqformula "17"))
                                                         (rule "eqClose" (formula "16") (term "1,0"))
                                                         (rule "concrete_impl_4" (formula "16") (term "0"))
                                                         (rule "all_unused" (formula "16"))
                                                         (rule "true_left" (formula "16"))
                                                         (rule "arrayLengthIsAShort" (formula "3") (term "0"))
                                                         (rule "inShort" (formula "3"))
                                                         (rule "true_left" (formula "3"))
                                                         (rule "arrayLengthIsAShort" (formula "28") (term "0,1"))
                                                         (rule "inShort" (formula "28"))
                                                         (rule "true_left" (formula "28"))
                                                         (rule "arrayLengthNotNegative" (formula "28") (term "0,1"))
                                                         (rule "methodBodyExpand" (formula "36") (term "1") (newnames "heapBefore_min_1,savedHeapBefore_min_0"))
                                                         (rule "simplifyUpdate2" (formula "36") (term "1"))
                                                         (rule "arrayLengthNotNegative" (formula "30") (term "0,0,1,1"))
                                                         (rule "arrayLengthIsAShort" (formula "31") (term "0,0,1,1"))
                                                         (rule "inShort" (formula "31"))
                                                         (rule "true_left" (formula "31"))
                                                         (rule "methodCallEmpty" (formula "38") (term "1"))
                                                         (rule "simplifyUpdate2" (formula "38"))
                                                         (rule "emptyModality" (formula "38") (term "1"))
                                                         (rule "notRight" (formula "38"))
                                                         (rule "applyOnRigidFormula" (formula "1"))
                                                         (rule "applyOnPV" (formula "1") (term "0"))
                                                         (rule "simplifyUpdate1" (formula "1") (term "1"))
                                                         (rule "ifthenelse_concrete3" (formula "1"))
                                                         (rule "boolean_not_equal_2" (formula "1") (term "1"))
                                                         (rule "concrete_or_4" (formula "1"))
                                                         (rule "inEqSimp_subsumption1" (formula "35") (ifseqformula "1"))
                                                         (rule "inEqSimp_homoInEq0" (formula "35") (term "0"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,0"))
                                                         (rule "add_literals" (formula "35") (term "1,1,0,0"))
                                                         (rule "times_zero_1" (formula "35") (term "1,0,0"))
                                                         (rule "add_zero_right" (formula "35") (term "0,0"))
                                                         (rule "qeq_literals" (formula "35") (term "0"))
                                                         (rule "concrete_or_1" (formula "35"))
                                                         (rule "true_left" (formula "35"))
                                                         (rule "ifUnfold" (formula "40") (term "1") (inst "#boolv=x"))
                                                         (rule "variableDeclaration" (formula "40") (term "1") (newnames "x"))
                                                         (rule "less_than_comparison_simple" (formula "40") (term "1"))
                                                         (rule "sequentialToParallel2" (formula "40"))
                                                         (rule "simplifyUpdate3" (formula "40") (term "1,0"))
                                                         (rule "applyOnElementary" (formula "40") (term "1,0"))
                                                         (rule "applyOnRigidTerm" (formula "40") (term "0,1,0"))
                                                         (rule "simplifyUpdate1" (formula "40") (term "1,0,1,0"))
                                                         (rule "simplifyUpdate1" (formula "40") (term "2,0,1,0"))
                                                         (rule "applyOnRigidFormula" (formula "40") (term "0,0,1,0"))
                                                         (rule "simplifyUpdate1" (formula "40") (term "1,0,0,1,0"))
                                                         (rule "simplifyUpdate1" (formula "40") (term "0,0,0,1,0"))
                                                         (rule "applyOnPV" (formula "40") (term "1,0,0,1,0"))
                                                         (rule "applyOnPV" (formula "40") (term "0,0,0,1,0"))
                                                         (rule "inEqSimp_ltToLeq" (formula "40") (term "0,0,1,0"))
                                                         (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,0,0,1,0"))
                                                         (rule "polySimp_addComm1" (formula "40") (term "0,0,0,1,0"))
                                                         (rule "inEqSimp_sepNegMonomial0" (formula "40") (term "0,0,1,0"))
                                                         (rule "polySimp_mulLiterals" (formula "40") (term "0,0,0,1,0"))
                                                         (rule "polySimp_elimOne" (formula "40") (term "0,0,0,1,0"))
                                                         (rule "replace_known_left" (formula "40") (term "0,0,1,0") (ifseqformula "1"))
                                                         (rule "ifthenelse_true" (formula "40") (term "0,1,0"))
                                                         (rule "ifElseUnfold" (formula "37") (term "1") (inst "#boolv=x_3"))
                                                         (rule "variableDeclaration" (formula "37") (term "1") (newnames "x_6"))
                                                         (rule "less_equal_than_comparison_simple" (formula "37") (term "1"))
                                                         (rule "sequentialToParallel2" (formula "37"))
                                                         (rule "simplifyUpdate3" (formula "37") (term "1,0"))
                                                         (rule "applyOnElementary" (formula "37") (term "1,0"))
                                                         (rule "applyOnRigidTerm" (formula "37") (term "0,1,0"))
                                                         (rule "simplifyUpdate1" (formula "37") (term "1,0,1,0"))
                                                         (rule "simplifyUpdate1" (formula "37") (term "2,0,1,0"))
                                                         (rule "applyOnRigidFormula" (formula "37") (term "0,0,1,0"))
                                                         (rule "simplifyUpdate1" (formula "37") (term "0,0,0,1,0"))
                                                         (rule "simplifyUpdate1" (formula "37") (term "1,0,0,1,0"))
                                                         (rule "applyOnPV" (formula "37") (term "0,0,0,1,0"))
                                                         (rule "applyOnPV" (formula "37") (term "1,0,0,1,0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "37") (term "0,0,1,0"))
                                                         (rule "onlyCreatedObjectsAreReferenced" (formula "38") (term "0") (ifseqformula "20"))
                                                         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "39"))
                                                         (rule "concrete_or_2" (formula "1"))
                                                         (rule "onlyCreatedObjectsAreReferenced" (formula "43") (term "1,1") (ifseqformula "11"))
                                                         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "43"))
                                                         (rule "concrete_or_2" (formula "1"))
                                                         (rule "replace_known_left" (formula "4") (term "0,0") (ifseqformula "1"))
                                                         (rule "ifthenelse_true" (formula "4") (term "0"))
                                                         (rule "applyEqReverse" (formula "44") (term "0") (ifseqformula "4"))
                                                         (rule "eqClose" (formula "44"))
                                                         (rule "closeTrue" (formula "44"))
                                                      )
                                                      (branch "Use Case"
                                                         (rule "false_to_not_true" (formula "34") (term "0,0,1,1"))
                                                         (rule "inInt" (formula "31") (term "1,1,1"))
                                                         (rule "concrete_and_3" (formula "31") (term "1,1"))
                                                         (rule "inInt" (formula "31") (term "1,0,0,1,1,1"))
                                                         (rule "concrete_and_3" (formula "31") (term "0,0,1,1,1"))
                                                         (rule "simplifyUpdate2" (formula "34"))
                                                         (rule "eqSymm" (formula "31") (term "1,0,0,1,1"))
                                                         (rule "eqSymm" (formula "31") (term "1,0,1,1"))
                                                         (rule "eqSymm" (formula "31") (term "1,0,0,0,1,1"))
                                                         (rule "eqSymm" (formula "31") (term "1,0,1,1,1"))
                                                         (rule "sequentialToParallel2" (formula "34"))
                                                         (rule "simplifyUpdate2" (formula "34"))
                                                         (rule "simplifyUpdate3" (formula "34") (term "1,0"))
                                                         (rule "sequentialToParallel2" (formula "31"))
                                                         (rule "simplifyUpdate2" (formula "31"))
                                                         (rule "simplifyUpdate3" (formula "31") (term "1,0"))
                                                         (rule "andLeft" (formula "31"))
                                                         (rule "simplifyUpdate2" (formula "32"))
                                                         (rule "andLeft" (formula "31"))
                                                         (rule "simplifyUpdate2" (formula "31"))
                                                         (rule "simplifyUpdate2" (formula "32"))
                                                         (rule "andLeft" (formula "31"))
                                                         (rule "simplifyUpdate2" (formula "31"))
                                                         (rule "simplifyUpdate2" (formula "32"))
                                                         (rule "andLeft" (formula "31"))
                                                         (rule "simplifyUpdate2" (formula "32"))
                                                         (rule "simplifyUpdate2" (formula "31"))
                                                         (rule "andLeft" (formula "31"))
                                                         (rule "simplifyUpdate2" (formula "31"))
                                                         (rule "applyOnRigidFormula" (formula "36"))
                                                         (rule "applyOnRigidFormula" (formula "35"))
                                                         (rule "simplifyUpdate1" (formula "35") (term "0"))
                                                         (rule "simplifyUpdate1" (formula "35") (term "1"))
                                                         (rule "applyOnPV" (formula "35") (term "1"))
                                                         (rule "applyOnRigidFormula" (formula "34"))
                                                         (rule "simplifyUpdate1" (formula "34") (term "1"))
                                                         (rule "simplifyUpdate1" (formula "34") (term "0"))
                                                         (rule "applyOnPV" (formula "34") (term "1"))
                                                         (rule "applyOnRigidFormula" (formula "33"))
                                                         (rule "simplifyUpdate1" (formula "33") (term "1"))
                                                         (rule "simplifyUpdate1" (formula "33") (term "0"))
                                                         (rule "applyOnPV" (formula "33") (term "1"))
                                                         (rule "applyOnRigidFormula" (formula "32"))
                                                         (rule "simplifyUpdate1" (formula "32") (term "1"))
                                                         (rule "simplifyUpdate1" (formula "32") (term "0"))
                                                         (rule "applyOnPV" (formula "32") (term "1"))
                                                         (rule "applyOnPV" (formula "32") (term "0"))
                                                         (rule "applyOnRigidFormula" (formula "31"))
                                                         (rule "simplifyUpdate1" (formula "31") (term "0"))
                                                         (rule "applyOnPV" (formula "31") (term "1"))
                                                         (rule "applyOnRigidFormula" (formula "36") (term "0"))
                                                         (rule "simplifyUpdate2" (formula "36") (term "0,0"))
                                                         (rule "simplifyUpdate2" (formula "36") (term "1,0"))
                                                         (rule "applyOnRigidTerm" (formula "35") (term "0"))
                                                         (rule "simplifyUpdate1" (formula "35") (term "0,0"))
                                                         (rule "simplifyUpdate1" (formula "35") (term "2,0"))
                                                         (rule "simplifyUpdate1" (formula "35") (term "1,0"))
                                                         (rule "applyOnPV" (formula "35") (term "0,0"))
                                                         (rule "applyOnPV" (formula "35") (term "2,0"))
                                                         (rule "applyOnPV" (formula "35") (term "1,0"))
                                                         (rule "applyOnRigidTerm" (formula "34") (term "0"))
                                                         (rule "applyOnPV" (formula "34") (term "0,0"))
                                                         (rule "eqClose" (formula "34"))
                                                         (rule "true_left" (formula "34"))
                                                         (rule "applyOnRigidTerm" (formula "33") (term "0"))
                                                         (rule "applyOnPV" (formula "33") (term "0,0"))
                                                         (rule "eqClose" (formula "33"))
                                                         (rule "true_left" (formula "33"))
                                                         (rule "applyOnRigidFormula" (formula "34") (term "0,0"))
                                                         (rule "simplifyUpdate2" (formula "34") (term "0,0,0"))
                                                         (rule "applyOnRigidFormula" (formula "34") (term "1,0"))
                                                         (rule "simplifyUpdate1" (formula "34") (term "1,1,0"))
                                                         (rule "simplifyUpdate1" (formula "34") (term "0,1,0"))
                                                         (rule "applyOnRigidFormula" (formula "34") (term "1,0,0"))
                                                         (rule "applyOnPV" (formula "34") (term "1,1,0,0"))
                                                         (rule "simplifyUpdate1" (formula "34") (term "0,1,0,0"))
                                                         (rule "applyOnRigidTerm" (formula "34") (term "1,1,0"))
                                                         (rule "simplifyUpdate1" (formula "34") (term "2,1,1,0"))
                                                         (rule "simplifyUpdate1" (formula "34") (term "0,1,1,0"))
                                                         (rule "simplifyUpdate1" (formula "34") (term "1,1,1,0"))
                                                         (rule "applyOnPV" (formula "34") (term "0,1,1,0"))
                                                         (rule "applyOnPV" (formula "34") (term "1,1,1,0"))
                                                         (rule "eqSymm" (formula "34") (term "1,0"))
                                                         (rule "applyOnRigidTerm" (formula "34") (term "1,1,0"))
                                                         (rule "simplifyUpdate1" (formula "34") (term "1,1,1,0"))
                                                         (rule "simplifyUpdate1" (formula "34") (term "2,1,1,0"))
                                                         (rule "simplifyUpdate1" (formula "34") (term "0,1,1,0"))
                                                         (rule "applyOnPV" (formula "34") (term "1,1,1,0"))
                                                         (rule "applyOnPV" (formula "34") (term "0,1,1,0"))
                                                         (rule "eqSymm" (formula "34") (term "1,0"))
                                                         (rule "inEqSimp_ltToLeq" (formula "34") (term "1,0,0"))
                                                         (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1,0,0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "32"))
                                                         (rule "inEqSimp_commuteLeq" (formula "31"))
                                                         (rule "inEqSimp_commuteLeq" (formula "34") (term "0,0,0"))
                                                         (rule "variableDeclarationAssign" (formula "37") (term "1"))
                                                         (rule "variableDeclaration" (formula "37") (term "1") (newnames "b_1"))
                                                         (rule "blockEmpty" (formula "37") (term "1,0,1"))
                                                         (rule "Query_axiom_for_min_int_int__in_verif_selectvoting_system_core_ConservativeExtension" (formula "33") (term "0") (inst "min_sk=min_sk_0") (inst "#p1=x_2") (inst "#p0=x_1") (inst "#res=x"))
                                                         (rule "inInt" (formula "33") (term "0,0,1"))
                                                         (rule "concrete_impl_1" (formula "33") (term "0,1"))
                                                         (rule "eqSymm" (formula "34"))
                                                         (rule "eqSymm" (formula "33") (term "0,1"))
                                                         (rule "applyEq" (formula "38") (term "0,1,0,0") (ifseqformula "34"))
                                                         (rule "applyEq" (formula "32") (term "0") (ifseqformula "34"))
                                                         (rule "applyEq" (formula "29") (term "1,0,1") (ifseqformula "34"))
                                                         (rule "applyEq" (formula "28") (term "1,1") (ifseqformula "34"))
                                                         (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,0"))
                                                         (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,0"))
                                                         (rule "polySimp_rightDist" (formula "35") (term "1,1,0,0"))
                                                         (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,0"))
                                                         (rule "mul_literals" (formula "35") (term "0,1,1,0,0"))
                                                         (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0,0"))
                                                         (rule "boxToDiamond" (formula "33") (term "1"))
                                                         (rule "notLeft" (formula "33"))
                                                         (rule "nnf_imp2or" (formula "34") (term "0"))
                                                         (rule "nnf_notAnd" (formula "34") (term "0,0"))
                                                         (rule "inEqSimp_notGeq" (formula "34") (term "0,0,0"))
                                                         (rule "times_zero_1" (formula "34") (term "1,0,0,0,0,0"))
                                                         (rule "add_literals" (formula "34") (term "0,0,0,0,0"))
                                                         (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,0"))
                                                         (rule "mul_literals" (formula "34") (term "1,0,0,0"))
                                                         (rule "inEqSimp_notLeq" (formula "34") (term "1,0,0"))
                                                         (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0"))
                                                         (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0"))
                                                         (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0"))
                                                         (rule "add_literals" (formula "34") (term "0,0,0,1,0,0"))
                                                         (rule "add_zero_left" (formula "34") (term "0,0,1,0,0"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "1,0,0"))
                                                         (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0"))
                                                         (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0"))
                                                         (rule "less_than_comparison_simple" (formula "38") (term "1"))
                                                         (rule "sequentialToParallel2" (formula "38"))
                                                         (rule "simplifyUpdate2" (formula "38"))
                                                         (rule "simplifyUpdate3" (formula "38") (term "1,0"))
                                                         (rule "applyOnElementary" (formula "38") (term "1,0"))
                                                         (rule "applyOnRigidTerm" (formula "38") (term "0,1,0"))
                                                         (rule "simplifyUpdate1" (formula "38") (term "1,0,1,0"))
                                                         (rule "simplifyUpdate1" (formula "38") (term "2,0,1,0"))
                                                         (rule "applyOnRigidFormula" (formula "38") (term "0,0,1,0"))
                                                         (rule "simplifyUpdate1" (formula "38") (term "0,0,0,1,0"))
                                                         (rule "simplifyUpdate1" (formula "38") (term "1,0,0,1,0"))
                                                         (rule "applyOnPV" (formula "38") (term "0,0,0,1,0"))
                                                         (rule "applyOnPV" (formula "38") (term "1,0,0,1,0"))
                                                         (rule "inEqSimp_ltToLeq" (formula "38") (term "0,0,1,0"))
                                                         (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,0,0,1,0"))
                                                         (rule "polySimp_addComm1" (formula "38") (term "0,0,0,1,0"))
                                                         (rule "inEqSimp_sepNegMonomial0" (formula "38") (term "0,0,1,0"))
                                                         (rule "polySimp_mulLiterals" (formula "38") (term "0,0,0,1,0"))
                                                         (rule "polySimp_elimOne" (formula "38") (term "0,0,0,1,0"))
                                                         (rule "methodBodyExpand" (formula "35") (term "1") (newnames "heapBefore_min_0,savedHeapBefore_min"))
                                                         (rule "simplifyUpdate2" (formula "35") (term "1"))
                                                         (rule "methodCallEmpty" (formula "38") (term "1"))
                                                         (rule "emptyModality" (formula "38") (term "1"))
                                                         (rule "impRight" (formula "38"))
                                                         (rule "simplifyUpdate2" (formula "39"))
                                                         (rule "simplifyUpdate2" (formula "1"))
                                                         (rule "notLeft" (formula "1"))
                                                         (rule "applyOnRigidFormula" (formula "35"))
                                                         (rule "simplifyUpdate1" (formula "35") (term "1"))
                                                         (rule "applyOnPV" (formula "35") (term "0"))
                                                         (rule "ifthenelse_concrete3" (formula "35"))
                                                         (rule "boolean_not_equal_2" (formula "35") (term "1"))
                                                         (rule "concrete_or_4" (formula "35"))
                                                         (rule "inEqSimp_geqRight" (formula "35"))
                                                         (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                                         (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                                         (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                                         (rule "add_literals" (formula "1") (term "0,0,0"))
                                                         (rule "add_zero_left" (formula "1") (term "0,0"))
                                                         (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                         (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                                         (rule "polySimp_elimOne" (formula "1") (term "1"))
                                                         (rule "inEqSimp_antiSymm" (formula "33") (ifseqformula "1"))
                                                         (rule "applyEqRigid" (formula "1") (term "0") (ifseqformula "33"))
                                                         (rule "inEqSimp_homoInEq0" (formula "1"))
                                                         (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
                                                         (rule "add_literals" (formula "1") (term "1,0"))
                                                         (rule "times_zero_1" (formula "1") (term "0"))
                                                         (rule "qeq_literals" (formula "1"))
                                                         (rule "true_left" (formula "1"))
                                                         (rule "applyEq" (formula "33") (term "0") (ifseqformula "32"))
                                                         (rule "inEqSimp_homoInEq1" (formula "33"))
                                                         (rule "polySimp_pullOutFactor1" (formula "33") (term "0"))
                                                         (rule "add_literals" (formula "33") (term "1,0"))
                                                         (rule "times_zero_1" (formula "33") (term "0"))
                                                         (rule "leq_literals" (formula "33"))
                                                         (rule "true_left" (formula "33"))
                                                         (rule "applyEq" (formula "28") (term "1,1") (ifseqformula "32"))
                                                         (rule "applyEq" (formula "29") (term "1,0,1") (ifseqformula "32"))
                                                         (rule "applyEq" (formula "33") (term "1") (ifseqformula "32"))
                                                         (rule "applyEqRigid" (formula "35") (term "1,0,0,1") (ifseqformula "32"))
                                                         (rule "returnUnfold" (formula "38") (term "1") (inst "#v0=x_1"))
                                                         (rule "variableDeclarationAssign" (formula "38") (term "1"))
                                                         (rule "variableDeclaration" (formula "38") (term "1") (newnames "x_4"))
                                                         (rule "arrayLengthIsAShort" (formula "3") (term "0"))
                                                         (rule "inShort" (formula "3"))
                                                         (rule "true_left" (formula "3"))
                                                         (rule "arrayLengthNotNegative" (formula "5") (term "0"))
                                                         (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "9"))
                                                         (rule "leq_literals" (formula "5") (term "0"))
                                                         (rule "concrete_or_1" (formula "5"))
                                                         (rule "true_left" (formula "5"))
                                                         (rule "arrayLengthNotNegative" (formula "23") (term "0,1"))
                                                         (rule "arrayLengthIsAShort" (formula "23") (term "0,1"))
                                                         (rule "inShort" (formula "23"))
                                                         (rule "true_left" (formula "23"))
                                                         (rule "arrayLengthNotNegative" (formula "4") (term "0"))
                                                         (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "3"))
                                                         (rule "leq_literals" (formula "4") (term "0"))
                                                         (rule "concrete_or_1" (formula "4"))
                                                         (rule "true_left" (formula "4"))
                                                         (rule "equalityToSeqGetAndSeqLenLeft" (formula "16") (inst "iv=iv"))
                                                         (rule "andLeft" (formula "16"))
                                                         (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
                                                         (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
                                                         (rule "applyEq" (formula "17") (term "0,0,1,0,0,1,0,0") (ifseqformula "18"))
                                                         (rule "applyEq" (formula "17") (term "0,0,1,0") (ifseqformula "18"))
                                                         (rule "eqClose" (formula "17") (term "1,0"))
                                                         (rule "concrete_impl_4" (formula "17") (term "0"))
                                                         (rule "applyEq" (formula "16") (term "0,0") (ifseqformula "18"))
                                                         (rule "eqClose" (formula "16"))
                                                         (rule "true_left" (formula "16"))
                                                         (rule "all_unused" (formula "16"))
                                                         (rule "true_left" (formula "16"))
                                                         (rule "arrayLengthIsAShort" (formula "5") (term "0"))
                                                         (rule "inShort" (formula "5"))
                                                         (rule "true_left" (formula "5"))
                                                         (rule "arrayLengthNotNegative" (formula "28") (term "0,1"))
                                                         (rule "arrayLengthIsAShort" (formula "29") (term "0,1"))
                                                         (rule "inShort" (formula "29"))
                                                         (rule "true_left" (formula "29"))
                                                         (rule "arrayLengthNotNegative" (formula "30") (term "0,0,1,1"))
                                                         (rule "arrayLengthIsAShort" (formula "31") (term "0,0,1,1"))
                                                         (rule "inShort" (formula "31"))
                                                         (rule "true_left" (formula "31"))
                                                         (rule "assignmentSubtractionInt" (formula "40") (term "1"))
                                                         (rule "translateJavaSubInt" (formula "40") (term "0,0,1"))
                                                         (rule "polySimp_elimSub" (formula "40") (term "0,0,1"))
                                                         (rule "sequentialToParallel2" (formula "40"))
                                                         (rule "simplifyUpdate2" (formula "40"))
                                                         (rule "simplifyUpdate3" (formula "40") (term "1,0"))
                                                         (rule "applyOnElementary" (formula "40") (term "1,0"))
                                                         (rule "applyOnRigidTerm" (formula "40") (term "0,1,0"))
                                                         (rule "simplifyUpdate1" (formula "40") (term "1,0,1,0"))
                                                         (rule "simplifyUpdate1" (formula "40") (term "0,0,1,0"))
                                                         (rule "applyOnPV" (formula "40") (term "0,0,1,0"))
                                                         (rule "applyOnRigidTerm" (formula "40") (term "1,0,1,0"))
                                                         (rule "simplifyUpdate1" (formula "40") (term "1,1,0,1,0"))
                                                         (rule "applyOnPV" (formula "40") (term "0,1,0,1,0"))
                                                         (rule "blockReturn" (formula "40") (term "1"))
                                                         (rule "methodCallReturn" (formula "40") (term "1"))
                                                         (rule "assignment" (formula "40") (term "1"))
                                                         (rule "sequentialToParallel2" (formula "40"))
                                                         (rule "simplifyUpdate2" (formula "40"))
                                                         (rule "simplifyUpdate3" (formula "40") (term "1,0"))
                                                         (rule "applyOnElementary" (formula "40") (term "1,0"))
                                                         (rule "applyOnPV" (formula "40") (term "0,1,0"))
                                                         (rule "methodCallEmpty" (formula "40") (term "1"))
                                                         (rule "simplifyUpdate2" (formula "40"))
                                                         (rule "emptyModality" (formula "40") (term "1"))
                                                         (rule "notRight" (formula "40"))
                                                         (rule "applyOnRigidFormula" (formula "1"))
                                                         (rule "simplifyUpdate1" (formula "1") (term "1"))
                                                         (rule "applyOnPV" (formula "1") (term "0"))
                                                         (rule "polySimp_homoEq" (formula "1"))
                                                         (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                                                         (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                                                         (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0"))
                                                         (rule "polySimp_elimOne" (formula "1") (term "1,1,0"))
                                                         (rule "polySimp_mulComm0" (formula "1") (term "0,1,0"))
                                                         (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                                         (rule "polySimp_sepPosMonomial" (formula "1"))
                                                         (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                                         (rule "polySimp_rightDist" (formula "1") (term "1"))
                                                         (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                                         (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                                         (rule "polySimp_mulComm0" (formula "1") (term "0,1"))
                                                         (rule "applyEq" (formula "38") (term "0,1,0") (ifseqformula "1"))
                                                         (rule "applyEq" (formula "32") (term "0,0,1") (ifseqformula "1"))
                                                         (rule "polySimp_homoEq" (formula "32") (term "0,1"))
                                                         (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1"))
                                                         (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1"))
                                                         (rule "polySimp_mulAssoc" (formula "32") (term "0,1,0,0,1"))
                                                         (rule "polySimp_mulComm0" (formula "32") (term "0,0,1,0,0,1"))
                                                         (rule "polySimp_mulLiterals" (formula "32") (term "0,1,0,0,1"))
                                                         (rule "polySimp_elimOne" (formula "32") (term "0,1,0,0,1"))
                                                         (rule "polySimp_addAssoc" (formula "32") (term "0,0,1"))
                                                         (rule "polySimp_addComm0" (formula "32") (term "0,0,0,1"))
                                                         (rule "applyEq" (formula "30") (term "0,0") (ifseqformula "1"))
                                                         (rule "inEqSimp_homoInEq1" (formula "30") (term "0"))
                                                         (rule "polySimp_mulComm0" (formula "30") (term "1,0,0"))
                                                         (rule "polySimp_rightDist" (formula "30") (term "1,0,0"))
                                                         (rule "polySimp_mulAssoc" (formula "30") (term "0,1,0,0"))
                                                         (rule "polySimp_mulComm0" (formula "30") (term "0,0,1,0,0"))
                                                         (rule "polySimp_mulLiterals" (formula "30") (term "0,1,0,0"))
                                                         (rule "polySimp_elimOne" (formula "30") (term "0,1,0,0"))
                                                         (rule "polySimp_addAssoc" (formula "30") (term "0,0"))
                                                         (rule "polySimp_addComm0" (formula "30") (term "0,0,0"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "30") (term "0,0"))
                                                         (rule "add_literals" (formula "30") (term "1,1,0,0"))
                                                         (rule "times_zero_1" (formula "30") (term "1,0,0"))
                                                         (rule "add_zero_right" (formula "30") (term "0,0"))
                                                         (rule "applyEq" (formula "32") (term "0,0,1,1") (ifseqformula "1"))
                                                         (rule "polySimp_homoEq" (formula "32") (term "0,1,1"))
                                                         (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,1"))
                                                         (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,1"))
                                                         (rule "polySimp_mulAssoc" (formula "32") (term "0,1,0,0,1,1"))
                                                         (rule "polySimp_mulComm0" (formula "32") (term "0,0,1,0,0,1,1"))
                                                         (rule "polySimp_mulLiterals" (formula "32") (term "0,1,0,0,1,1"))
                                                         (rule "polySimp_elimOne" (formula "32") (term "0,1,0,0,1,1"))
                                                         (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,1"))
                                                         (rule "polySimp_addComm0" (formula "32") (term "0,0,0,1,1"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0,1,1"))
                                                         (rule "add_literals" (formula "32") (term "1,1,0,0,1,1"))
                                                         (rule "times_zero_1" (formula "32") (term "1,0,0,1,1"))
                                                         (rule "add_zero_right" (formula "32") (term "0,0,1,1"))
                                                         (rule "applyEq" (formula "31") (term "0") (ifseqformula "1"))
                                                         (rule "applyEq" (formula "32") (term "0,0") (ifseqformula "1"))
                                                         (rule "inEqSimp_homoInEq0" (formula "32") (term "0"))
                                                         (rule "polySimp_mulComm0" (formula "32") (term "1,0,0"))
                                                         (rule "polySimp_rightDist" (formula "32") (term "1,0,0"))
                                                         (rule "polySimp_mulAssoc" (formula "32") (term "0,1,0,0"))
                                                         (rule "polySimp_mulComm0" (formula "32") (term "0,0,1,0,0"))
                                                         (rule "polySimp_mulLiterals" (formula "32") (term "0,1,0,0"))
                                                         (rule "polySimp_elimOne" (formula "32") (term "0,1,0,0"))
                                                         (rule "polySimp_addAssoc" (formula "32") (term "0,0"))
                                                         (rule "polySimp_addComm1" (formula "32") (term "0,0,0"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0"))
                                                         (rule "add_literals" (formula "32") (term "1,1,0,0"))
                                                         (rule "times_zero_1" (formula "32") (term "1,0,0"))
                                                         (rule "add_zero_right" (formula "32") (term "0,0"))
                                                         (rule "polySimp_sepNegMonomial" (formula "32") (term "0,1"))
                                                         (rule "polySimp_mulLiterals" (formula "32") (term "0,0,1"))
                                                         (rule "polySimp_elimOne" (formula "32") (term "0,0,1"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "31"))
                                                         (rule "polySimp_mulLiterals" (formula "31") (term "1"))
                                                         (rule "polySimp_elimOne" (formula "31") (term "1"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "32") (term "0"))
                                                         (rule "mul_literals" (formula "32") (term "1,0"))
                                                         (rule "commute_and" (formula "32") (term "1"))
                                                         (rule "ifElseUnfold" (formula "38") (term "1") (inst "#boolv=x_3"))
                                                         (rule "variableDeclaration" (formula "38") (term "1") (newnames "x_5"))
                                                         (rule "less_equal_than_comparison_simple" (formula "38") (term "1"))
                                                         (rule "sequentialToParallel2" (formula "38"))
                                                         (rule "simplifyUpdate3" (formula "38") (term "1,0"))
                                                         (rule "applyOnElementary" (formula "38") (term "1,0"))
                                                         (rule "applyOnRigidTerm" (formula "38") (term "0,1,0"))
                                                         (rule "simplifyUpdate1" (formula "38") (term "2,0,1,0"))
                                                         (rule "simplifyUpdate1" (formula "38") (term "1,0,1,0"))
                                                         (rule "applyOnRigidFormula" (formula "38") (term "0,0,1,0"))
                                                         (rule "simplifyUpdate1" (formula "38") (term "0,0,0,1,0"))
                                                         (rule "simplifyUpdate1" (formula "38") (term "1,0,0,1,0"))
                                                         (rule "applyOnPV" (formula "38") (term "0,0,0,1,0"))
                                                         (rule "applyOnPV" (formula "38") (term "1,0,0,1,0"))
                                                         (rule "inEqSimp_homoInEq0" (formula "38") (term "0,0,1,0"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "38") (term "0,0,0,1,0"))
                                                         (rule "add_literals" (formula "38") (term "1,1,0,0,0,1,0"))
                                                         (rule "times_zero_1" (formula "38") (term "1,0,0,0,1,0"))
                                                         (rule "add_zero_right" (formula "38") (term "0,0,0,1,0"))
                                                         (rule "inEqSimp_invertInEq1" (formula "38") (term "0,0,1,0"))
                                                         (rule "mul_literals" (formula "38") (term "1,0,0,1,0"))
                                                         (rule "polySimp_mulLiterals" (formula "38") (term "0,0,0,1,0"))
                                                         (rule "polySimp_elimOne" (formula "38") (term "0,0,0,1,0"))
                                                         (rule "onlyCreatedObjectsAreReferenced" (formula "4") (term "0,0") (ifseqformula "10"))
                                                         (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "42"))
                                                         (rule "concrete_or_2" (formula "4"))
                                                         (rule "replace_known_left" (formula "2") (term "0,0") (ifseqformula "4"))
                                                         (rule "ifthenelse_true" (formula "2") (term "0"))
                                                         (rule "applyEqReverse" (formula "43") (term "0") (ifseqformula "2"))
                                                         (rule "eqClose" (formula "43"))
                                                         (rule "closeTrue" (formula "43"))
                                                      )
                                                   )
                                                   (branch "Exceptional Post (min)"
                                                      (builtin "One Step Simplification" (formula "27"))
                                                      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "27") (term "1,0") (ifseqformula "20"))
                                                      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "27") (term "0,1,0") (ifseqformula "13"))
                                                      (rule "andLeft" (formula "27"))
                                                      (rule "andLeft" (formula "28"))
                                                      (rule "andLeft" (formula "27"))
                                                      (rule "notLeft" (formula "27"))
                                                      (rule "close" (formula "30") (ifseqformula "29"))
                                                   )
                                                   (branch "Pre (min)"
                                                      (builtin "One Step Simplification" (formula "29"))
                                                      (rule "wellFormedAnonEQ" (formula "29") (ifseqformula "20"))
                                                      (rule "wellFormedAnonEQ" (formula "29") (term "0") (ifseqformula "13"))
                                                      (rule "replace_known_left" (formula "29") (term "0,0") (ifseqformula "9"))
                                                      (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "12")) (ifInst ""  (formula "19")))
                                                      (rule "closeTrue" (formula "29"))
                                                   )
                                                )
                                                (branch "Null Reference (x_arr_1 = null)"
                                                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "28")))
                                                   (rule "closeFalse" (formula "1"))
                                                )
                                             )
                                             (branch "Null Reference (x_arr = null)"
                                                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "29")))
                                                (rule "closeFalse" (formula "1"))
                                             )
                                          )
                                          (branch "if x_1 false"
                                             (builtin "One Step Simplification" (formula "29"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "methodCallReturn" (formula "29") (term "1"))
                                             (rule "assignment" (formula "29") (term "1"))
                                             (builtin "One Step Simplification" (formula "29"))
                                             (rule "methodCallEmpty" (formula "29") (term "1"))
                                             (builtin "One Step Simplification" (formula "29"))
                                             (rule "emptyModality" (formula "29") (term "1"))
                                             (builtin "One Step Simplification" (formula "29"))
                                             (rule "notRight" (formula "29"))
                                             (rule "eqSymm" (formula "1"))
                                             (rule "applyEqRigid" (formula "25") (term "0,0") (ifseqformula "1"))
                                             (rule "leq_literals" (formula "25") (term "0"))
                                             (builtin "One Step Simplification" (formula "25"))
                                             (rule "true_left" (formula "25"))
                                             (rule "ifthenelse_split" (formula "3") (term "0"))
                                             (branch " verif.selectvoting.system.core.ConservativeExtension.messages[iv_0].<created> = TRUE TRUE"
                                                (rule "applyEqReverse" (formula "31") (term "0") (ifseqformula "4"))
                                                (builtin "One Step Simplification" (formula "31"))
                                                (rule "closeTrue" (formula "31"))
                                             )
                                             (branch " verif.selectvoting.system.core.ConservativeExtension.messages[iv_0].<created> = TRUE FALSE"
                                                (rule "referencedObjectIsCreatedRight" (formula "28") (ifseqformula "30"))
                                                (rule "close" (formula "28") (ifseqformula "11"))
                                             )
                                          )
                                       )
                                    )
                                    (branch " verif.selectvoting.system.core.ConservativeExtension.messages[iv_0].length >= 1 FALSE"
                                       (rule "inEqSimp_geqRight" (formula "24"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "inEqSimp_homoInEq1" (formula "4"))
                                       (rule "times_zero_2" (formula "4") (term "1,0"))
                                       (rule "add_zero_right" (formula "4") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                                       (rule "mul_literals" (formula "4") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "4") (ifseqformula "3"))
                                       (rule "qeq_literals" (formula "4") (term "0"))
                                       (builtin "One Step Simplification" (formula "4"))
                                       (rule "closeFalse" (formula "4"))
                                    )
                                 )
                                 (branch " verif.selectvoting.system.core.ConservativeExtension.messages.<created> = TRUE FALSE"
                                    (rule "referencedObjectIsCreatedRight" (formula "21") (ifseqformula "25"))
                                    (rule "close" (formula "21") (ifseqformula "5"))
                                 )
                              )
                              (branch " verif.selectvoting.system.core.ConservativeExtension.messages.length >= 1 FALSE"
                                 (rule "inEqSimp_geqRight" (formula "22"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "inEqSimp_homoInEq1" (formula "5"))
                                 (rule "times_zero_2" (formula "5") (term "1,0"))
                                 (rule "add_zero_right" (formula "5") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                                 (rule "mul_literals" (formula "5") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "5") (ifseqformula "4"))
                                 (rule "qeq_literals" (formula "5") (term "0"))
                                 (builtin "One Step Simplification" (formula "5"))
                                 (rule "closeFalse" (formula "5"))
                              )
                           )
                           (branch " verif.selectvoting.system.core.ConservativeExtension.messages.length >= 1 + iv_0 FALSE"
                              (rule "eqSymm" (formula "20"))
                              (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "19")))
                              (rule "closeTrue" (formula "20"))
                           )
                        )
                     )
                     (branch "CUT: array2seq2d(heapAfter_copyOf, verif.selectvoting.system.core.ConservativeExtension.messages) = array2seq2d(heapAfter_copyOf, verif.selectvoting.system.core.ConservativeExtension.messages@heapAfter_copyOf) FALSE"
                        (rule "array2seq2dDef" (formula "20") (term "1") (inst "u=u") (userinteraction))
                        (rule "array2seq2dDef" (formula "20") (term "0") (inst "u=u") (userinteraction))
                        (rule "eqSymm" (formula "20"))
                        (rule "eqSymm" (formula "1"))
                        (rule "eqSymm" (formula "2"))
                        (rule "applyEq" (formula "17") (term "0") (ifseqformula "2"))
                        (rule "applyEq" (formula "17") (term "1") (ifseqformula "1"))
                        (rule "array2seqDef" (formula "20") (term "2,1") (inst "u=u_1"))
                        (rule "eqSymm" (formula "20"))
                        (rule "array2seqDef" (formula "1") (term "0") (inst "u=u"))
                        (rule "array2seqDef" (formula "1") (term "0") (inst "u=u"))
                        (rule "eqSeqDef2" (formula "13") (inst "iv=iv") (ifseqformula "13"))
                        (builtin "One Step Simplification" (formula "13"))
                        (rule "true_left" (formula "13"))
                        (rule "eqSeqDef2" (formula "13") (inst "iv=iv") (ifseqformula "13"))
                        (builtin "One Step Simplification" (formula "13"))
                        (rule "true_left" (formula "13"))
                        (rule "eqSeqDef" (formula "16") (inst "iv=iv"))
                        (rule "getOfSeqDef" (formula "16") (term "0,1,0,1"))
                        (rule "castDel" (formula "16") (term "1,0,1,0,1"))
                        (rule "castDel" (formula "16") (term "2,0,1,0,1"))
                        (rule "add_zero_right" (formula "16") (term "0,2,0,1,1,0,1,0,1"))
                        (rule "add_zero_right" (formula "16") (term "0,2,1,2,1,0,1,0,1"))
                        (rule "polySimp_elimSub" (formula "16") (term "1,1,0,0,1,0,1"))
                        (rule "mul_literals" (formula "16") (term "1,1,1,0,0,1,0,1"))
                        (rule "add_zero_right" (formula "16") (term "1,1,0,0,1,0,1"))
                        (rule "lenOfSeqDef" (formula "16") (term "0,0"))
                        (rule "eqSymm" (formula "16") (term "0"))
                        (rule "polySimp_elimSub" (formula "16") (term "1,1,0"))
                        (rule "times_zero_2" (formula "16") (term "1,1,1,0"))
                        (rule "add_zero_right" (formula "16") (term "1,1,0"))
                        (rule "getOfSeqDef" (formula "16") (term "1,1,0,1"))
                        (rule "castDel" (formula "16") (term "2,1,1,0,1"))
                        (rule "castDel" (formula "16") (term "1,1,1,0,1"))
                        (rule "add_zero_right" (formula "16") (term "0,2,1,1,1,1,0,1"))
                        (rule "polySimp_elimSub" (formula "16") (term "1,1,0,1,1,0,1"))
                        (rule "times_zero_2" (formula "16") (term "1,1,1,0,1,1,0,1"))
                        (rule "add_zero_right" (formula "16") (term "1,1,0,1,1,0,1"))
                        (rule "lenOfSeqDef" (formula "16") (term "1,1,0,0,1"))
                        (rule "polySimp_elimSub" (formula "16") (term "1,1,1,0,0,1"))
                        (rule "times_zero_2" (formula "16") (term "1,1,1,1,0,0,1"))
                        (rule "add_zero_right" (formula "16") (term "1,1,1,0,0,1"))
                        (rule "lenOfSeqDef" (formula "16") (term "0,0"))
                        (rule "polySimp_elimSub" (formula "16") (term "1,0,0"))
                        (rule "mul_literals" (formula "16") (term "1,1,0,0"))
                        (rule "add_zero_right" (formula "16") (term "1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0,1,0,1"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0,1,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "16") (term "0,1,0"))
                        (rule "add_zero_right" (formula "16") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,1,1,0,1"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,1,1,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "16") (term "0,1,1,0,0,1"))
                        (rule "add_zero_right" (formula "16") (term "0,0,1,1,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,1,0,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,0"))
                        (rule "add_zero_right" (formula "16") (term "0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0,1,0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,1,1,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0,1,0,1"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0,1,0,1"))
                        (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0,1,0,1"))
                        (rule "mul_literals" (formula "16") (term "0,1,1,0,0,1,0,1"))
                        (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0,1,0,1"))
                        (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0,1,0,1"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "16") (term "0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "16") (term "0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,1,1,0,1"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,1,1,0,1"))
                        (rule "polySimp_rightDist" (formula "16") (term "1,1,0,1,1,0,1"))
                        (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,1,1,0,1"))
                        (rule "mul_literals" (formula "16") (term "0,1,1,0,1,1,0,1"))
                        (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,1,1,0,1"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "16") (term "0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "16") (term "0,0,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "0,0,1,0,0,1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "16") (term "0,0,0,1,0,0,1,0,0,1"))
                        (rule "polySimp_elimOne" (formula "16") (term "0,0,0,1,0,0,1,0,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0,1"))
                        (rule "mul_literals" (formula "16") (term "0,1,1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0,1"))
                        (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0,1"))
                        (rule "array2seqDef" (formula "16") (term "1,1,1,0,1") (inst "u=u"))
                        (rule "pullOutSelect" (formula "16") (term "0,1,0,0") (inst "selectSK=verif_selectvoting_system_core_ConservativeExtension_messages_2"))
                        (rule "applyEq" (formula "17") (term "1,1,2,1,1,1,0,1") (ifseqformula "1"))
                        (rule "applyEq" (formula "17") (term "1,0,1,1,1,1,0,1") (ifseqformula "1"))
                        (rule "applyEq" (formula "17") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "1"))
                        (rule "applyEq" (formula "17") (term "0,0,0,0,0") (ifseqformula "1"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "6"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "applyEqReverse" (formula "17") (term "0,1,0,0") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "17") (term "1,1,2,1,1,1,0,1") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "17") (term "1,0,1,1,1,1,0,1") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "17") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "1"))
                        (builtin "One Step Simplification" (formula "17"))
                        (rule "applyEqReverse" (formula "17") (term "0,0,0,0") (ifseqformula "1"))
                        (builtin "One Step Simplification" (formula "17"))
                        (rule "closeTrue" (formula "17"))
                     )
                  )
                  (branch "CUT: seqDef_1 = array2seq(heapAfter_copyOf, result_0) FALSE"
                     (rule "array2seqDef" (formula "19") (term "1") (inst "u=u") (userinteraction))
                     (rule "eqSymm" (formula "19"))
                     (rule "close" (formula "19") (ifseqformula "15"))
                  )
               )
               (branch "CUT: seqDef_0 = array2seq(heapAfter_sort, result_0) FALSE"
                  (rule "array2seqDef" (formula "18") (term "1") (inst "u=u") (userinteraction))
                  (rule "eqSymm" (formula "18"))
                  (rule "close" (formula "18") (ifseqformula "13"))
               )
            )
            (branch "Case 2"
               (rule "pullOutSelect" (formula "19") (term "0,1,1,0,0,0") (inst "selectSK=verif_selectvoting_system_core_ConservativeExtension_messages_1"))
               (rule "applyEq" (formula "20") (term "1,0,0,1,0,0") (ifseqformula "1"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "12"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "eqSymm" (formula "1") (term "0,0"))
               (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "18"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "6"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "applyEqReverse" (formula "20") (term "0,1,1,0,0,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "20") (term "1,0,0,1,0,0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "andRight" (formula "19"))
               (branch "Case 1"
                  (rule "allRight" (formula "19") (inst "sk=i_6"))
                  (rule "orRight" (formula "19"))
                  (rule "orRight" (formula "19"))
                  (rule "notRight" (formula "21"))
                  (rule "inEqSimp_leqRight" (formula "20"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "inEqSimp_geqRight" (formula "21"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_9"))
                  (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "15"))
                  (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "22")))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,1,0,0") (ifseqformula "9"))
                  (rule "applyEqRigid" (formula "3") (term "1") (ifseqformula "4"))
                  (rule "ifEqualsNull" (formula "3"))
                  (rule "pullOutSelect" (formula "3") (term "0,1,1") (inst "selectSK=arr_10"))
                  (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "10"))
                  (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "23")))
                  (rule "ifthenelse_negated" (formula "3") (term "0"))
                  (rule "orLeft" (formula "4"))
                  (branch " ( verif.selectvoting.system.core.ConservativeExtension.messages = result_0 | !( verif.selectvoting.system.core.ConservativeExtension.messages.<created> = TRUE | (verif.selectvoting.system.core.ConservativeExtension.messages@heap).<created>@anon_heap_copyOf<<anonHeapFunction>> = TRUE)) & (verif.selectvoting.system.core.ConservativeExtension.messages@heap)[i_6]@anon_heap_sort<<anonHeapFunction>> = null"
                     (rule "andLeft" (formula "4"))
                     (rule "ifthenelse_split" (formula "3") (term "0"))
                     (branch " verif.selectvoting.system.core.ConservativeExtension.messages.<created> = TRUE TRUE"
                        (rule "hideAuxiliaryEq" (formula "4"))
                        (rule "replace_known_left" (formula "4") (term "0,0,1") (ifseqformula "3"))
                        (builtin "One Step Simplification" (formula "4"))
                        (rule "referencedObjectIsCreatedRightEQ" (formula "22") (ifseqformula "4") (ifseqformula "23"))
                        (rule "close" (formula "22") (ifseqformula "7"))
                     )
                     (branch " verif.selectvoting.system.core.ConservativeExtension.messages.<created> = TRUE FALSE"
                        (rule "referencedObjectIsCreatedRight" (formula "22") (ifseqformula "25"))
                        (rule "close" (formula "22") (ifseqformula "7"))
                     )
                  )
                  (branch " !( verif.selectvoting.system.core.ConservativeExtension.messages = result_0 | !( verif.selectvoting.system.core.ConservativeExtension.messages.<created> = TRUE | (verif.selectvoting.system.core.ConservativeExtension.messages@heap).<created>@anon_heap_copyOf<<anonHeapFunction>> = TRUE)) & arr_10<<selectSK>> = null"
                     (rule "andLeft" (formula "4"))
                     (rule "notLeft" (formula "4"))
                     (rule "orRight" (formula "21"))
                     (rule "notRight" (formula "22"))
                     (rule "applyEq" (formula "4") (term "1") (ifseqformula "5"))
                     (rule "ifEqualsNull" (formula "4"))
                     (rule "cnf_rightDist" (formula "4"))
                     (rule "andLeft" (formula "4"))
                     (rule "commute_or" (formula "4"))
                     (rule "cnf_rightDist" (formula "5"))
                     (rule "andLeft" (formula "5"))
                     (rule "commute_or" (formula "5"))
                     (rule "cnf_rightDist" (formula "4"))
                     (builtin "One Step Simplification" (formula "4"))
                     (rule "commute_or" (formula "4"))
                     (rule "allLeft" (formula "11") (inst "t=i_6"))
                     (rule "inEqSimp_commuteGeq" (formula "11") (term "1"))
                     (rule "inEqSimp_contradInEq1" (formula "11") (term "1") (ifseqformula "2"))
                     (rule "inEqSimp_homoInEq1" (formula "11") (term "0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,1"))
                     (rule "add_literals" (formula "11") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "11") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "11") (term "0,0,1"))
                     (rule "leq_literals" (formula "11") (term "0,1"))
                     (builtin "One Step Simplification" (formula "11"))
                     (rule "inEqSimp_contradInEq1" (formula "11") (term "1") (ifseqformula "3"))
                     (rule "qeq_literals" (formula "11") (term "0,1"))
                     (builtin "One Step Simplification" (formula "11"))
                     (rule "notLeft" (formula "11"))
                     (rule "replace_known_right" (formula "6") (term "0") (ifseqformula "24"))
                     (builtin "One Step Simplification" (formula "6"))
                     (rule "replace_known_right" (formula "4") (term "1") (ifseqformula "24"))
                     (builtin "One Step Simplification" (formula "4"))
                     (rule "notLeft" (formula "4"))
                     (rule "referencedObjectIsCreatedRight" (formula "23") (ifseqformula "28"))
                     (rule "close" (formula "23") (ifseqformula "8"))
                  )
               )
               (branch "Case 2"
                  (rule "allRight" (formula "19") (inst "sk=i_5"))
                  (rule "orRight" (formula "19"))
                  (rule "orRight" (formula "19"))
                  (rule "notRight" (formula "21"))
                  (rule "inEqSimp_geqRight" (formula "21"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                  (rule "inEqSimp_leqRight" (formula "21"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                  (rule "polySimp_elimOne" (formula "2") (term "0"))
                  (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_7"))
                  (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "15"))
                  (builtin "One Step Simplification" (formula "3"))
                  (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                  (rule "hideAuxiliaryEq" (formula "3"))
                  (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "13") (ifseqformula "20"))
                  (rule "allLeft" (formula "18") (inst "t=i_5"))
                  (rule "inEqSimp_commuteGeq" (formula "18") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "18") (term "1,0") (ifseqformula "1"))
                  (rule "qeq_literals" (formula "18") (term "0,1,0"))
                  (builtin "One Step Simplification" (formula "18"))
                  (rule "inEqSimp_contradInEq1" (formula "18") (term "1") (ifseqformula "2"))
                  (rule "inEqSimp_homoInEq1" (formula "18") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0,1"))
                  (rule "add_literals" (formula "18") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "18") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "18") (term "0,0,1"))
                  (rule "leq_literals" (formula "18") (term "0,1"))
                  (builtin "One Step Simplification" (formula "18"))
                  (rule "notLeft" (formula "18"))
                  (rule "pullOutSelect" (formula "19") (term "0") (inst "selectSK=arr_8"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "15"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "applyEqReverse" (formula "20") (term "0") (ifseqformula "1"))
                  (rule "close" (formula "20") (ifseqformula "4"))
               )
            )
         )
         (branch "Case 2"
            (rule "allRight" (formula "19") (inst "sk=f_1"))
            (rule "allRight" (formula "19") (inst "sk=o_1"))
            (rule "orRight" (formula "19"))
            (rule "eqSymm" (formula "20"))
            (rule "pullOutSelect" (formula "20") (term "0") (inst "selectSK=f_1_0"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "12"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,1,0,0") (ifseqformula "6"))
            (rule "eqSymm" (formula "21"))
            (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_1_1"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "7"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "21")))
            (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "commute_and" (formula "1") (term "0,0,0"))
            (rule "ifthenelse_split" (formula "1") (term "0"))
            (branch " !f_1 = java.lang.Object::<created> & o_1 = result_0 | !o_1 = null & !( o_1.<created> = TRUE | o_1.<created>@anon_heap_copyOf<<anonHeapFunction>> = TRUE) TRUE"
               (rule "applyEqReverse" (formula "22") (term "1") (ifseqformula "2"))
               (rule "hideAuxiliaryEq" (formula "2"))
               (rule "eqSymm" (formula "21"))
               (rule "orLeft" (formula "1"))
               (branch "!f_1 = java.lang.Object::<created> & o_1 = result_0"
                  (rule "andLeft" (formula "1"))
                  (rule "notLeft" (formula "1"))
                  (rule "applyEq" (formula "21") (term "0,0,0") (ifseqformula "1"))
                  (rule "replace_known_right" (formula "21") (term "0,0") (ifseqformula "19"))
                  (builtin "One Step Simplification" (formula "21"))
                  (rule "notRight" (formula "21"))
                  (rule "applyEq" (formula "22") (term "1,1") (ifseqformula "2"))
                  (rule "applyEq" (formula "22") (term "1,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "2"))
                  (rule "close" (formula "19") (ifseqformula "1"))
               )
               (branch " !o_1 = null & !( o_1.<created> = TRUE | o_1.<created>@anon_heap_copyOf<<anonHeapFunction>> = TRUE)"
                  (rule "andLeft" (formula "1"))
                  (rule "notLeft" (formula "2"))
                  (rule "notLeft" (formula "1"))
                  (rule "orRight" (formula "17"))
                  (rule "replace_known_right" (formula "22") (term "0,1") (ifseqformula "17"))
                  (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "16")))
                  (rule "closeTrue" (formula "22"))
               )
            )
            (branch " !f_1 = java.lang.Object::<created> & o_1 = result_0 | !o_1 = null & !( o_1.<created> = TRUE | o_1.<created>@anon_heap_copyOf<<anonHeapFunction>> = TRUE) FALSE"
               (rule "close" (formula "22") (ifseqformula "1"))
            )
         )
      )
      (branch "Exceptional Post (sort)"
         (builtin "One Step Simplification" (formula "11"))
         (builtin "One Step Simplification" (formula "15"))
         (rule "translateJavaSubInt" (formula "11") (term "1,1,0,0,0,1,0,1,1"))
         (rule "translateJavaAddInt" (formula "11") (term "0,2,2,0,1,0,0,1,0,1,1"))
         (rule "andLeft" (formula "11"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "12") (term "1,0") (ifseqformula "11"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "12") (term "0,1,0") (ifseqformula "5"))
         (rule "andLeft" (formula "12"))
         (rule "andLeft" (formula "13"))
         (rule "andLeft" (formula "12"))
         (rule "andLeft" (formula "14"))
         (rule "notLeft" (formula "12"))
         (rule "close" (formula "16") (ifseqformula "15"))
      )
      (branch "Pre (sort)"
         (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "11")) (ifInst ""  (formula "11")))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "13") (term "1,1") (ifseqformula "5"))
         (rule "wellFormedAnonEQ" (formula "13") (term "0,1") (ifseqformula "5"))
         (rule "leq_literals" (formula "13") (term "0,0,1,0"))
         (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "1")) (ifInst ""  (formula "4")) (ifInst ""  (formula "10")) (ifInst ""  (formula "7")))
         (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,0"))
         (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "13") (term "0,1"))
         (rule "inEqSimp_commuteLeq" (formula "13") (term "0,1,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,1,1"))
         (rule "inEqSimp_homoInEq0" (formula "13") (term "1,0,1,1"))
         (rule "polySimp_pullOutFactor1" (formula "13") (term "0,1,0,1,1"))
         (rule "add_literals" (formula "13") (term "1,0,1,0,1,1"))
         (rule "times_zero_1" (formula "13") (term "0,1,0,1,1"))
         (rule "qeq_literals" (formula "13") (term "1,0,1,1"))
         (builtin "One Step Simplification" (formula "13"))
         (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,0"))
         (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0,0"))
         (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0,0"))
         (rule "mul_literals" (formula "13") (term "0,1,1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0,0"))
         (rule "nonNull" (formula "13") (term "1,1,1,1") (inst "i=i"))
         (rule "greater_literals" (formula "13") (term "0,1,1,1,1,1"))
         (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "11")))
         (rule "sub_literals" (formula "13") (term "2,1,0,1,1,1,1"))
         (builtin "One Step Simplification" (formula "13"))
         (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,1,1,1,1"))
         (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0,1,1,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,1,1,1,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,1,1,1,1"))
         (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0,1,1,1,1"))
         (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0,1,1,1,1"))
         (rule "mul_literals" (formula "13") (term "0,1,1,0,0,1,1,1,1"))
         (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0,1,1,1,1"))
         (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0,1,1,1,1"))
         (rule "nnf_imp2or" (formula "13") (term "0,0"))
         (rule "nnf_notAnd" (formula "13") (term "0,0,0"))
         (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0,0"))
         (rule "mul_literals" (formula "13") (term "1,0,0,0,0,0,0"))
         (rule "add_zero_right" (formula "13") (term "0,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,0"))
         (rule "mul_literals" (formula "13") (term "1,0,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0,0"))
         (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0,0"))
         (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0,0"))
         (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0,0"))
         (rule "add_literals" (formula "13") (term "0,0,0,1,0,0,0"))
         (rule "add_zero_left" (formula "13") (term "0,0,1,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0"))
         (rule "nnf_imp2or" (formula "13") (term "0,1,1,1,1"))
         (rule "nnf_notAnd" (formula "13") (term "0,0,1,1,1,1"))
         (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0,1,1,1,1"))
         (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0,1,1,1,1"))
         (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0,1,1,1,1"))
         (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0,1,1,1,1"))
         (rule "add_literals" (formula "13") (term "0,0,0,1,0,0,1,1,1,1"))
         (rule "add_zero_left" (formula "13") (term "0,0,1,0,0,1,1,1,1"))
         (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0,1,1,1,1"))
         (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,1,1,1,1"))
         (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,1,1,1,1"))
         (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0,1,1,1,1"))
         (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0,1,1,1,1"))
         (rule "add_zero_right" (formula "13") (term "0,0,0,0,0,1,1,1,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,1,1,1,1"))
         (rule "mul_literals" (formula "13") (term "1,0,0,0,1,1,1,1"))
         (rule "arrayLengthIsAShort" (formula "3") (term "1,1,0"))
         (builtin "One Step Simplification" (formula "3"))
         (rule "true_left" (formula "3"))
         (rule "arrayLengthNotNegative" (formula "3") (term "1,1,0"))
         (rule "equalityToSeqGetAndSeqLenLeft" (formula "9") (inst "iv=iv"))
         (rule "andLeft" (formula "9"))
         (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
         (rule "applyEq" (formula "10") (term "0,0,1,0,0,1,0,0") (ifseqformula "11"))
         (rule "applyEq" (formula "10") (term "0,0,1,0") (ifseqformula "11"))
         (builtin "One Step Simplification" (formula "10"))
         (rule "true_left" (formula "10"))
         (rule "applyEq" (formula "9") (term "0,0") (ifseqformula "10"))
         (builtin "One Step Simplification" (formula "9"))
         (rule "true_left" (formula "9"))
         (rule "arrayLengthNotNegative" (formula "10") (term "1,1,0"))
         (rule "replace_known_left" (formula "15") (term "0,1,1,1") (ifseqformula "10"))
         (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "10")) (ifInst ""  (formula "10")))
         (rule "andRight" (formula "15"))
         (branch "Case 1"
            (rule "allRight" (formula "15") (inst "sk=i_3"))
            (rule "orRight" (formula "15"))
            (rule "orRight" (formula "15"))
            (rule "notRight" (formula "17"))
            (rule "inEqSimp_leqRight" (formula "16"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "add_zero_left" (formula "1") (term "0"))
            (rule "inEqSimp_geqRight" (formula "17"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "1") (term "0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0"))
            (rule "polySimp_elimOne" (formula "1") (term "0"))
            (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_5"))
            (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "10"))
            (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "17")) (ifInst ""  (formula "16")))
            (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
            (rule "hideAuxiliaryEq" (formula "3"))
            (rule "arrayLengthIsAShort" (formula "14") (term "1,1,0"))
            (builtin "One Step Simplification" (formula "14"))
            (rule "true_left" (formula "14"))
            (rule "allLeft" (formula "14") (inst "t=i_3"))
            (rule "inEqSimp_commuteGeq" (formula "14") (term "1"))
            (rule "inEqSimp_contradInEq1" (formula "14") (term "1") (ifseqformula "1"))
            (rule "inEqSimp_homoInEq1" (formula "14") (term "0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,0,1"))
            (rule "add_literals" (formula "14") (term "1,1,0,0,1"))
            (rule "times_zero_1" (formula "14") (term "1,0,0,1"))
            (rule "add_zero_right" (formula "14") (term "0,0,1"))
            (rule "leq_literals" (formula "14") (term "0,1"))
            (builtin "One Step Simplification" (formula "14"))
            (rule "inEqSimp_contradInEq1" (formula "14") (term "1") (ifseqformula "2"))
            (rule "qeq_literals" (formula "14") (term "0,1"))
            (builtin "One Step Simplification" (formula "14"))
            (rule "notLeft" (formula "14"))
            (rule "pullOutSelect" (formula "15") (term "0") (inst "selectSK=arr_6"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "10"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "18")) (ifInst ""  (formula "17")))
            (rule "applyEqReverse" (formula "16") (term "0") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "narrowSelectArrayType" (formula "15") (term "0") (ifseqformula "8") (ifseqformula "17"))
            (rule "close" (formula "15") (ifseqformula "3"))
         )
         (branch "Case 2"
            (rule "allRight" (formula "15") (inst "sk=i_2"))
            (rule "orRight" (formula "15"))
            (rule "orRight" (formula "15"))
            (rule "notRight" (formula "17"))
            (rule "inEqSimp_leqRight" (formula "16"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "add_zero_left" (formula "1") (term "0"))
            (rule "inEqSimp_geqRight" (formula "17"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "1") (term "0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0"))
            (rule "polySimp_elimOne" (formula "1") (term "0"))
            (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_4"))
            (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "10"))
            (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "17")) (ifInst ""  (formula "16")))
            (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
            (rule "hideAuxiliaryEq" (formula "3"))
            (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "8") (ifseqformula "16"))
            (rule "arrayLengthIsAShort" (formula "14") (term "1,1,0"))
            (builtin "One Step Simplification" (formula "14"))
            (rule "true_left" (formula "14"))
            (rule "allLeft" (formula "14") (inst "t=i_2"))
            (rule "replaceKnownSelect_taclet1200_0" (formula "14") (term "0,0,0,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet1200_1" (formula "14") (term "0,0,0,0"))
            (rule "narrowSelectArrayType" (formula "14") (term "0,0,0,0") (ifseqformula "8") (ifseqformula "17"))
            (rule "replace_known_left" (formula "14") (term "0,0,0") (ifseqformula "3"))
            (builtin "One Step Simplification" (formula "14"))
            (rule "inEqSimp_commuteGeq" (formula "14") (term "1"))
            (rule "inEqSimp_contradInEq1" (formula "14") (term "0") (ifseqformula "2"))
            (rule "qeq_literals" (formula "14") (term "0,0"))
            (builtin "One Step Simplification" (formula "14"))
            (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "14"))
            (rule "andLeft" (formula "1"))
            (rule "inEqSimp_homoInEq1" (formula "1"))
            (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
            (rule "add_literals" (formula "1") (term "1,1,0"))
            (rule "times_zero_1" (formula "1") (term "1,0"))
            (rule "add_zero_right" (formula "1") (term "0"))
            (rule "leq_literals" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
      )
   )
   (branch "Null Reference (result_1 = null)"
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "12")))
      (rule "closeFalse" (formula "1"))
   )
)
(branch "Exceptional Post (copyOf)"
   (builtin "One Step Simplification" (formula "5"))
   (builtin "One Step Simplification" (formula "7"))
   (rule "andLeft" (formula "5"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "6") (term "1,0") (ifseqformula "5"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "8"))
   (rule "notLeft" (formula "6"))
   (rule "close" (formula "10") (ifseqformula "9"))
)
(branch "Pre (copyOf)"
   (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "4")) (ifInst ""  (formula "1")) (ifInst ""  (formula "4")))
   (rule "nonNull" (formula "5") (term "0") (inst "i=i"))
   (rule "sub_literals" (formula "5") (term "2,1,0,1,1,0"))
   (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "4")))
   (rule "greater_literals" (formula "5") (term "0,0"))
   (builtin "One Step Simplification" (formula "5"))
   (rule "narrowSelectArrayType" (formula "5") (term "0,0,1,0,0") (ifseqformula "1") (ifseqformula "4"))
   (rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "5") (term "1,1,0,0,0"))
   (rule "polySimp_rightDist" (formula "5") (term "1,1,0,0,0"))
   (rule "mul_literals" (formula "5") (term "0,1,1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "5") (term "1,1,1,0,0,0"))
   (rule "nnf_imp2or" (formula "5") (term "0,0"))
   (rule "nnf_notAnd" (formula "5") (term "0,0,0"))
   (rule "inEqSimp_notGeq" (formula "5") (term "0,0,0,0"))
   (rule "times_zero_1" (formula "5") (term "1,0,0,0,0,0,0"))
   (rule "add_zero_right" (formula "5") (term "0,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0,0"))
   (rule "mul_literals" (formula "5") (term "1,0,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "5") (term "1,0,0,0"))
   (rule "polySimp_rightDist" (formula "5") (term "1,0,0,1,0,0,0"))
   (rule "mul_literals" (formula "5") (term "0,1,0,0,1,0,0,0"))
   (rule "polySimp_addAssoc" (formula "5") (term "0,0,1,0,0,0"))
   (rule "add_literals" (formula "5") (term "0,0,0,1,0,0,0"))
   (rule "add_zero_left" (formula "5") (term "0,0,1,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0,0"))
   (rule "arrayLengthNotNegative" (formula "3") (term "1,1,0"))
   (rule "arrayLengthIsAShort" (formula "4") (term "1,1,0"))
   (builtin "One Step Simplification" (formula "4"))
   (rule "true_left" (formula "4"))
   (rule "cut_direct" (formula "6") (term "1"))
   (branch "CUT: verif.selectvoting.system.core.ConservativeExtension.messages.<created> = TRUE TRUE"
      (builtin "One Step Simplification" (formula "7"))
      (rule "allRight" (formula "7") (inst "sk=i_4"))
      (rule "orRight" (formula "7"))
      (rule "notRight" (formula "8"))
      (rule "orRight" (formula "8"))
      (rule "inEqSimp_geqRight" (formula "9"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "1") (term "0"))
      (rule "inEqSimp_leqRight" (formula "9"))
      (rule "mul_literals" (formula "1") (term "1,0,0"))
      (rule "add_literals" (formula "1") (term "0,0"))
      (rule "add_zero_left" (formula "1") (term "0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "2"))
      (rule "polySimp_mulLiterals" (formula "2") (term "0"))
      (rule "polySimp_elimOne" (formula "2") (term "0"))
      (rule "allLeft" (formula "8") (inst "t=i_4"))
      (rule "replace_known_left" (formula "8") (term "0,0,0") (ifseqformula "3"))
      (builtin "One Step Simplification" (formula "8"))
      (rule "inEqSimp_commuteGeq" (formula "8") (term "1"))
      (rule "inEqSimp_contradInEq1" (formula "8") (term "0") (ifseqformula "1"))
      (rule "qeq_literals" (formula "8") (term "0,0"))
      (builtin "One Step Simplification" (formula "8"))
      (rule "inEqSimp_contradInEq1" (formula "8") (ifseqformula "2"))
      (rule "andLeft" (formula "8"))
      (rule "inEqSimp_homoInEq1" (formula "8"))
      (rule "polySimp_pullOutFactor1b" (formula "8") (term "0"))
      (rule "add_literals" (formula "8") (term "1,1,0"))
      (rule "times_zero_1" (formula "8") (term "1,0"))
      (rule "add_zero_right" (formula "8") (term "0"))
      (rule "leq_literals" (formula "8"))
      (rule "closeFalse" (formula "8"))
   )
   (branch "CUT: verif.selectvoting.system.core.ConservativeExtension.messages.<created> = TRUE FALSE"
      (builtin "One Step Simplification" (formula "7"))
      (rule "referencedObjectIsCreatedRight" (formula "6") (ifseqformula "5"))
      (rule "close" (formula "6") (ifseqformula "1"))
   )
)
)

}
